{
  "version": 3,
  "sources": ["../../src/index.js"],
  "sourcesContent": ["/*!\n * DOM Selector - A CSS selector engine.\n * @license MIT\n * @copyright asamuzaK (Kazz)\n * @see {@link https://github.com/asamuzaK/domSelector/blob/main/LICENSE}\n */\n\n/* import */\nimport { Finder } from './js/finder.js';\n\n/* export for test */\nexport { Finder };\n\n/* instance, export for test */\nexport let finder = new Finder();\n\n/**\n * matches\n * @param {string} selector - CSS selector\n * @param {object} node - Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.noexcept] - no exception\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {boolean} - `true` if matched, `false` otherwise\n */\nexport const matches = (selector, node, opt) => {\n  let res;\n  try {\n    if (!finder) {\n      finder = new Finder();\n    }\n    res = finder.matches(selector, node, opt);\n  } catch (e) {\n    if (e instanceof globalThis[e.name]) {\n      finder = null;\n    }\n    throw e;\n  }\n  return res;\n};\n\n/**\n * closest\n * @param {string} selector - CSS selector\n * @param {object} node - Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.noexcept] - no exception\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {?object} - matched node\n */\nexport const closest = (selector, node, opt) => {\n  let res;\n  try {\n    if (!finder) {\n      finder = new Finder();\n    }\n    res = finder.closest(selector, node, opt);\n  } catch (e) {\n    if (e instanceof globalThis[e.name]) {\n      finder = null;\n    }\n    throw e;\n  }\n  return res;\n};\n\n/**\n * querySelector\n * @param {string} selector - CSS selector\n * @param {object} node - Document, DocumentFragment or Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.noexcept] - no exception\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {?object} - matched node\n */\nexport const querySelector = (selector, node, opt) => {\n  let res;\n  try {\n    if (!finder) {\n      finder = new Finder();\n    }\n    res = finder.querySelector(selector, node, opt);\n  } catch (e) {\n    if (e instanceof globalThis[e.name]) {\n      finder = null;\n    }\n    throw e;\n  }\n  return res;\n};\n\n/**\n * querySelectorAll\n * NOTE: returns Array, not NodeList\n * @param {string} selector - CSS selector\n * @param {object} node - Document, DocumentFragment or Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.noexcept] - no exception\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {Array.<object|undefined>} - array of matched nodes\n */\nexport const querySelectorAll = (selector, node, opt) => {\n  let res;\n  try {\n    if (!finder) {\n      finder = new Finder();\n    }\n    res = finder.querySelectorAll(selector, node, opt);\n  } catch (e) {\n    if (e instanceof globalThis[e.name]) {\n      finder = null;\n    }\n    throw e;\n  }\n  return res;\n};\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,iCAAAE,EAAA,WAAAC,EAAA,YAAAC,EAAA,kBAAAC,EAAA,qBAAAC,IAAA,eAAAC,EAAAP,GAQA,IAAAQ,EAAuB,0BARvB;AAAA;AAAA;AAAA;AAAA;AAAA,GAcO,IAAIL,EAAS,IAAI,SAWjB,MAAMC,EAAU,CAACK,EAAUC,EAAMC,IAAQ,CAC9C,IAAIC,EACJ,GAAI,CACGT,IACHA,EAAS,IAAI,UAEfS,EAAMT,EAAO,QAAQM,EAAUC,EAAMC,CAAG,CAC1C,OAAS,EAAG,CACV,MAAI,aAAa,WAAW,EAAE,IAAI,IAChCR,EAAS,MAEL,CACR,CACA,OAAOS,CACT,EAWaV,EAAU,CAACO,EAAUC,EAAMC,IAAQ,CAC9C,IAAIC,EACJ,GAAI,CACGT,IACHA,EAAS,IAAI,UAEfS,EAAMT,EAAO,QAAQM,EAAUC,EAAMC,CAAG,CAC1C,OAAS,EAAG,CACV,MAAI,aAAa,WAAW,EAAE,IAAI,IAChCR,EAAS,MAEL,CACR,CACA,OAAOS,CACT,EAWaP,EAAgB,CAACI,EAAUC,EAAMC,IAAQ,CACpD,IAAIC,EACJ,GAAI,CACGT,IACHA,EAAS,IAAI,UAEfS,EAAMT,EAAO,cAAcM,EAAUC,EAAMC,CAAG,CAChD,OAAS,EAAG,CACV,MAAI,aAAa,WAAW,EAAE,IAAI,IAChCR,EAAS,MAEL,CACR,CACA,OAAOS,CACT,EAYaN,EAAmB,CAACG,EAAUC,EAAMC,IAAQ,CACvD,IAAIC,EACJ,GAAI,CACGT,IACHA,EAAS,IAAI,UAEfS,EAAMT,EAAO,iBAAiBM,EAAUC,EAAMC,CAAG,CACnD,OAAS,EAAG,CACV,MAAI,aAAa,WAAW,EAAE,IAAI,IAChCR,EAAS,MAEL,CACR,CACA,OAAOS,CACT",
  "names": ["src_exports", "__export", "closest", "finder", "matches", "querySelector", "querySelectorAll", "__toCommonJS", "import_finder", "selector", "node", "opt", "res"]
}
