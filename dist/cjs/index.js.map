{
  "version": 3,
  "sources": ["../../src/index.js"],
  "sourcesContent": ["/*!\n * DOM Selector - A CSS selector engine.\n * @license MIT\n * @copyright asamuzaK (Kazz)\n * @see {@link https://github.com/asamuzaK/domSelector/blob/main/LICENSE}\n */\n\n/* import */\nimport { Matcher } from './js/matcher.js';\n\n/* instance */\nlet matcher = new Matcher();\n\n/**\n * matches\n * @param {string} selector - CSS selector\n * @param {object} node - Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {boolean} - `true` if matched, `false` otherwise\n */\nexport const matches = (selector, node, opt) => {\n  let res;\n  try {\n    if (!matcher) {\n      matcher = new Matcher();\n    }\n    res = matcher.matches(node, selector, opt);\n  } catch (e) {\n    matcher = null;\n    throw e;\n  }\n  return res;\n};\n\n/**\n * closest\n * @param {string} selector - CSS selector\n * @param {object} node - Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {?object} - matched node\n */\nexport const closest = (selector, node, opt) => {\n  let res;\n  try {\n    if (!matcher) {\n      matcher = new Matcher();\n    }\n    res = matcher.closest(node, selector, opt);\n  } catch (e) {\n    matcher = null;\n    throw e;\n  }\n  return res;\n};\n\n/**\n * querySelector\n * @param {string} selector - CSS selector\n * @param {object} node - Document, DocumentFragment or Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {?object} - matched node\n */\nexport const querySelector = (selector, node, opt) => {\n  let res;\n  try {\n    if (!matcher) {\n      matcher = new Matcher();\n    }\n    res = matcher.querySelector(node, selector, opt);\n  } catch (e) {\n    matcher = null;\n    throw e;\n  }\n  return res;\n};\n\n/**\n * querySelectorAll\n * NOTE: returns Array, not NodeList\n * @param {string} selector - CSS selector\n * @param {object} node - Document, DocumentFragment or Element node\n * @param {object} [opt] - options\n * @param {boolean} [opt.warn] - console warn e.g. unsupported pseudo-class\n * @returns {Array.<object|undefined>} - array of matched nodes\n */\nexport const querySelectorAll = (selector, node, opt) => {\n  let res;\n  try {\n    if (!matcher) {\n      matcher = new Matcher();\n    }\n    res = matcher.querySelectorAll(node, selector, opt);\n  } catch (e) {\n    matcher = null;\n    throw e;\n  }\n  return res;\n};\n"],
  "mappings": "4ZAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,aAAAE,EAAA,YAAAC,EAAA,kBAAAC,EAAA,qBAAAC,IAAA,eAAAC,EAAAN,GAQA,IAAAO,EAAwB,2BARxB;AAAA;AAAA;AAAA;AAAA;AAAA,GAWA,IAAIC,EAAU,IAAI,UAUX,MAAML,EAAU,CAACM,EAAUC,EAAMC,IAAQ,CAC9C,IAAIC,EACJ,GAAI,CACGJ,IACHA,EAAU,IAAI,WAEhBI,EAAMJ,EAAQ,QAAQE,EAAMD,EAAUE,CAAG,CAC3C,OAASE,EAAG,CACV,MAAAL,EAAU,KACJK,CACR,CACA,OAAOD,CACT,EAUaV,EAAU,CAACO,EAAUC,EAAMC,IAAQ,CAC9C,IAAIC,EACJ,GAAI,CACGJ,IACHA,EAAU,IAAI,WAEhBI,EAAMJ,EAAQ,QAAQE,EAAMD,EAAUE,CAAG,CAC3C,OAASE,EAAG,CACV,MAAAL,EAAU,KACJK,CACR,CACA,OAAOD,CACT,EAUaR,EAAgB,CAACK,EAAUC,EAAMC,IAAQ,CACpD,IAAIC,EACJ,GAAI,CACGJ,IACHA,EAAU,IAAI,WAEhBI,EAAMJ,EAAQ,cAAcE,EAAMD,EAAUE,CAAG,CACjD,OAASE,EAAG,CACV,MAAAL,EAAU,KACJK,CACR,CACA,OAAOD,CACT,EAWaP,EAAmB,CAACI,EAAUC,EAAMC,IAAQ,CACvD,IAAIC,EACJ,GAAI,CACGJ,IACHA,EAAU,IAAI,WAEhBI,EAAMJ,EAAQ,iBAAiBE,EAAMD,EAAUE,CAAG,CACpD,OAASE,EAAG,CACV,MAAAL,EAAU,KACJK,CACR,CACA,OAAOD,CACT",
  "names": ["src_exports", "__export", "closest", "matches", "querySelector", "querySelectorAll", "__toCommonJS", "import_matcher", "matcher", "selector", "node", "opt", "res", "e"]
}
