{
  "version": 3,
  "sources": ["../../../src/js/parser.js"],
  "sourcesContent": ["/**\n * parser.js\n */\n\n/* import */\nimport { findAll, parse, toPlainObject, walk } from 'css-tree';\n\n/* constants */\nimport {\n  PSEUDO_CLASS_SELECTOR, SELECTOR, SYNTAX_ERR, TYPE_FROM, TYPE_TO\n} from './constant.js';\nconst CODE_POINT_UNIT = parseInt('10000', 16);\nconst HEX = 16;\nconst PAIR = 2;\n\n/* regexp */\nconst HEX_CAPTURE = /^([\\da-f]{1,6}\\s?)/i;\nconst PSEUDO_FUNC = /^(?:(?:ha|i)s|not|where)$/;\nconst WHITESPACE = /^[\\n\\r\\f]/;\n\n/**\n * unescape selector\n * @param {string} selector - CSS selector\n * @returns {?string} - unescaped selector\n */\nexport const unescapeSelector = (selector = '') => {\n  if (typeof selector === 'string' && selector.indexOf('\\\\', 0) >= 0) {\n    const arr = selector.split('\\\\');\n    const l = arr.length;\n    for (let i = 1; i < l; i++) {\n      let item = arr[i];\n      if (i === l - 1 && item === '') {\n        item = '\\uFFFD';\n      } else {\n        const hexExists = HEX_CAPTURE.exec(item);\n        if (hexExists) {\n          const [, hex] = hexExists;\n          let str;\n          try {\n            const low = parseInt('D800', 16);\n            const high = parseInt('DFFF', 16);\n            const deci = parseInt(hex, 16);\n            if (deci === 0 || (deci >= low && deci <= high)) {\n              str = '\\uFFFD';\n            } else {\n              str = String.fromCodePoint(deci);\n            }\n          } catch (e) {\n            str = '\\uFFFD';\n          }\n          let postStr = '';\n          if (item.length > hex.length) {\n            postStr = item.substring(hex.length);\n          }\n          item = `${str}${postStr}`;\n        } else if (WHITESPACE.test(item)) {\n          item = '\\\\' + item;\n        }\n      }\n      arr[i] = item;\n    }\n    selector = arr.join('');\n  }\n  return selector;\n};\n\n/**\n * preprocess\n * @see https://drafts.csswg.org/css-syntax-3/#input-preprocessing\n * @param {...*} args - arguments\n * @returns {string} - filtered selector string\n */\nexport const preprocess = (...args) => {\n  if (!args.length) {\n    throw new TypeError('1 argument required, but only 0 present.');\n  }\n  let [selector] = args;\n  if (typeof selector === 'string') {\n    let index = 0;\n    while (index >= 0) {\n      index = selector.indexOf('#', index);\n      if (index < 0) {\n        break;\n      }\n      const preHash = selector.substring(0, index + 1);\n      let postHash = selector.substring(index + 1);\n      const codePoint = postHash.codePointAt(0);\n      if (codePoint >= CODE_POINT_UNIT) {\n        const str = `\\\\${codePoint.toString(HEX)} `;\n        if (postHash.length === PAIR) {\n          postHash = str;\n        } else {\n          postHash = `${str}${postHash.substring(PAIR)}`;\n        }\n      }\n      selector = `${preHash}${postHash}`;\n      index++;\n    }\n    selector = selector.replace(/\\f|\\r\\n?/g, '\\n')\n      .replace(/[\\0\\uD800-\\uDFFF]|\\\\$/g, '\\uFFFD');\n  } else if (selector === undefined || selector === null) {\n    selector = Object.prototype.toString.call(selector)\n      .slice(TYPE_FROM, TYPE_TO).toLowerCase();\n  } else {\n    throw new DOMException(`Invalid selector ${selector}`, SYNTAX_ERR);\n  }\n  return selector;\n};\n\n/**\n * create AST from CSS selector\n * @param {string} selector - CSS selector\n * @returns {object} - AST\n */\nexport const parseSelector = selector => {\n  selector = preprocess(selector);\n  // invalid selectors\n  if (/^$|^\\s*>|,\\s*$/.test(selector)) {\n    throw new DOMException(`Invalid selector ${selector}`, SYNTAX_ERR);\n  }\n  let res;\n  try {\n    const ast = parse(selector, {\n      context: 'selectorList',\n      parseCustomProperty: true\n    });\n    res = toPlainObject(ast);\n  } catch (e) {\n    if (e.message === '\"]\" is expected' && !selector.endsWith(']')) {\n      res = parseSelector(`${selector}]`);\n    } else if (e.message === '\")\" is expected' && !selector.endsWith(')')) {\n      res = parseSelector(`${selector})`);\n    } else {\n      throw new DOMException(e.message, SYNTAX_ERR);\n    }\n  }\n  return res;\n};\n\n/**\n * walk AST\n * @param {object} ast - AST\n * @returns {Array.<object|undefined>} - collection of AST branches\n */\nexport const walkAST = (ast = {}) => {\n  const branches = new Set();\n  let hasPseudoFunc;\n  const opt = {\n    enter: node => {\n      if (node.type === SELECTOR) {\n        branches.add(node.children);\n      } else if (node.type === PSEUDO_CLASS_SELECTOR &&\n                 PSEUDO_FUNC.test(node.name)) {\n        hasPseudoFunc = true;\n      }\n    }\n  };\n  walk(ast, opt);\n  if (hasPseudoFunc) {\n    findAll(ast, (node, item, list) => {\n      if (node.type === PSEUDO_CLASS_SELECTOR && PSEUDO_FUNC.test(node.name) &&\n          list) {\n        const itemList = list.filter(i => {\n          const { name, type } = i;\n          return type === PSEUDO_CLASS_SELECTOR && PSEUDO_FUNC.test(name);\n        });\n        for (const { children } of itemList) {\n          // SelectorList\n          for (const { children: grandChildren } of children) {\n            // Selector\n            for (const { children: greatGrandChildren } of grandChildren) {\n              if (branches.has(greatGrandChildren)) {\n                branches.delete(greatGrandChildren);\n              }\n            }\n          }\n        }\n      }\n    });\n  }\n  return [...branches];\n};\n\n/* export */\nexport { generate as generateCSS } from 'css-tree';\n"],
  "mappings": "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",
  "names": ["parser_exports", "__export", "parseSelector", "preprocess", "unescapeSelector", "walkAST", "__toCommonJS", "import_css_tree", "import_constant", "CODE_POINT_UNIT", "HEX", "PAIR", "HEX_CAPTURE", "PSEUDO_FUNC", "WHITESPACE", "selector", "arr", "l", "i", "item", "hexExists", "hex", "str", "low", "high", "deci", "postStr", "args", "index", "preHash", "postHash", "codePoint", "res", "ast", "e", "branches", "hasPseudoFunc", "node", "list", "itemList", "name", "type", "children", "grandChildren", "greatGrandChildren"]
}
