{
  "version": 3,
  "sources": ["../../../src/js/finder.js"],
  "sourcesContent": ["/**\n * finder.js\n */\n\n/* import */\nimport isCustomElementName from 'is-potential-custom-element-name';\nimport nwsapi from 'nwsapi';\nimport {\n  isContentEditable, isInShadowTree, resolveContent, sortNodes\n} from './dom-util.js';\nimport { matcher } from './matcher.js';\nimport {\n  filterSelector, generateCSS, parseSelector, sortAST, unescapeSelector, walkAST\n} from './parser.js';\n\n/* constants */\nimport {\n  BIT_01, COMBINATOR, DOCUMENT_FRAGMENT_NODE, DOCUMENT_NODE, ELEMENT_NODE,\n  EMPTY, NOT_SUPPORTED_ERR, REG_LOGICAL_PSEUDO, REG_SHADOW_HOST, SELECTOR_CLASS,\n  SELECTOR_ID, SELECTOR_PSEUDO_CLASS, SELECTOR_PSEUDO_ELEMENT, SELECTOR_TYPE,\n  SHOW_ALL, SYNTAX_ERR, TEXT_NODE, WALKER_FILTER\n} from './constant.js';\nconst DIR_NEXT = 'next';\nconst DIR_PREV = 'prev';\nconst TARGET_ALL = 'all';\nconst TARGET_FIRST = 'first';\nconst TARGET_LINEAL = 'lineal';\nconst TARGET_SELF = 'self';\n\n/**\n * Finder\n * NOTE: #ast[i] corresponds to #nodes[i]\n * #ast: Array<Ast | undefined>\n * #nodes: Array<Nodes>\n * Ast: {\n *   branch: Array<Branch | undefined>,\n *   collected: boolean,\n *   dir: string | null,\n *   filtered: boolean,\n *   find: boolean\n * }\n * Branch: Array<Twig>\n * Twig: {\n *   combo: Leaf | null,\n *   leaves: Array<Leaf>\n * }\n * Leaf: {\n *   children: Array<Leaf | undefined> | null,\n *   loc: null,\n *   type: string\n * }\n * Nodes: Array<HTMLElement | undefined>\n */\nexport class Finder {\n  /* private fields */\n  #ast;\n  #cache;\n  #content;\n  #descendant;\n  #document;\n  #event;\n  #node;\n  #nodes;\n  #noexcept;\n  #nwsapi;\n  #qswalker;\n  #results;\n  #root;\n  #shadow;\n  #sort;\n  #walker;\n  #walkers;\n  #warn;\n  #window;\n\n  /**\n   * construct\n   * @param {object} window - window\n   */\n  constructor(window) {\n    this.#window = window;\n    this.#document = window.document;\n    this.#cache = new WeakMap();\n    this.#results = new WeakMap();\n    this.#nwsapi = nwsapi({\n      document: window.document,\n      DOMException: window.DOMException\n    });\n    this.#nwsapi.configure({\n      LOGERRORS: false\n    });\n  }\n\n  /**\n   * handle error\n   * @private\n   * @param {Error} e - Error\n   * @throws Error\n   * @returns {void}\n   */\n  _onError(e) {\n    if (!this.#noexcept) {\n      if (e instanceof DOMException ||\n          e instanceof this.#window.DOMException) {\n        if (e.name === NOT_SUPPORTED_ERR) {\n          if (this.#warn) {\n            console.warn(e.message);\n          }\n        } else {\n          throw new this.#window.DOMException(e.message, e.name);\n        }\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * setup finder\n   * @private\n   * @param {string} selector - CSS selector\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} opt - options\n   * @param {object} [opt.event] - MouseEvent, KeyboardEvent\n   * @param {boolean} [opt.noexcept] - no exception\n   * @param {boolean} [opt.warn] - console warn\n   * @returns {object} - node\n   */\n  _setup(selector, node, opt = {}) {\n    const { event, noexcept, warn } = opt;\n    this.#noexcept = !!noexcept;\n    this.#warn = !!warn;\n    this.#event = this._setEvent(event);\n    this.#node = node;\n    [this.#content, this.#root, this.#walker] = resolveContent(node);\n    this.#shadow = isInShadowTree(node);\n    [this.#ast, this.#nodes] = this._correspond(selector);\n    this.#walkers = new WeakMap();\n    return node;\n  }\n\n  /**\n   * set event\n   * @private\n   * @param {object} event - instance of MouseEvent, KeyboardEvent\n   * @returns {object} - result\n   */\n  _setEvent(event) {\n    return (event instanceof this.#window.MouseEvent ||\n            event instanceof this.#window.KeyboardEvent)\n      ? event\n      : null;\n  }\n\n  /**\n   * correspond ast and nodes\n   * @private\n   * @param {string} selector - CSS selector\n   * @returns {Array.<Array.<object|undefined>>} - array of ast and nodes\n   */\n  _correspond(selector) {\n    const nodes = [];\n    this.#descendant = false;\n    let ast;\n    if (this.#content) {\n      const cachedItem = this.#cache.get(this.#content);\n      if (cachedItem && cachedItem.has(`${selector}`)) {\n        const item = cachedItem.get(`${selector}`);\n        this.#descendant = item.descendant;\n        ast = item.ast;\n      }\n    }\n    if (ast) {\n      const l = ast.length;\n      for (let i = 0; i < l; i++) {\n        ast[i].collected = false;\n        ast[i].dir = null;\n        ast[i].filtered = false;\n        ast[i].find = false;\n        nodes[i] = [];\n      }\n    } else {\n      let cssAst;\n      try {\n        cssAst = parseSelector(selector);\n      } catch (e) {\n        this._onError(e);\n      }\n      const branches = walkAST(cssAst);\n      let descendant = false;\n      let i = 0;\n      ast = [];\n      for (const [...items] of branches) {\n        const branch = [];\n        let item = items.shift();\n        if (item && item.type !== COMBINATOR) {\n          const leaves = new Set();\n          while (item) {\n            if (item.type === COMBINATOR) {\n              const [nextItem] = items;\n              if (nextItem.type === COMBINATOR) {\n                const msg = `Invalid selector ${selector}`;\n                throw new DOMException(msg, SYNTAX_ERR);\n              }\n              const itemName = item.name;\n              if (/^[\\s>]$/.test(itemName)) {\n                descendant = true;\n              }\n              branch.push({\n                combo: item,\n                leaves: sortAST(leaves)\n              });\n              leaves.clear();\n            } else if (item) {\n              let { name: itemName } = item;\n              if (itemName && typeof itemName === 'string') {\n                itemName = unescapeSelector(itemName);\n                if (typeof itemName === 'string' && itemName !== item.name) {\n                  item.name = itemName;\n                }\n                if (/[|:]/.test(itemName)) {\n                  item.namespace = true;\n                }\n              }\n              leaves.add(item);\n            }\n            if (items.length) {\n              item = items.shift();\n            } else {\n              branch.push({\n                combo: null,\n                leaves: sortAST(leaves)\n              });\n              leaves.clear();\n              break;\n            }\n          }\n        }\n        ast.push({\n          branch,\n          collected: false,\n          dir: null,\n          filtered: false,\n          find: false\n        });\n        nodes[i] = [];\n        i++;\n      }\n      if (this.#content) {\n        let cachedItem;\n        if (this.#cache.has(this.#content)) {\n          cachedItem = this.#cache.get(this.#content);\n        } else {\n          cachedItem = new Map();\n        }\n        cachedItem.set(`${selector}`, {\n          ast,\n          descendant\n        });\n        this.#cache.set(this.#content, cachedItem);\n      }\n      this.#descendant = descendant;\n    }\n    return [\n      ast,\n      nodes\n    ];\n  }\n\n  /**\n   * create tree walker\n   * @private\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @returns {object} - tree walker\n   */\n  _createTreeWalker(node) {\n    let walker;\n    if (this.#walkers.has(node)) {\n      walker = this.#walkers.get(node);\n    } else {\n      walker = this.#document.createTreeWalker(node, WALKER_FILTER);\n      this.#walkers.set(node, walker);\n    }\n    return walker;\n  }\n\n  /**\n   * prepare querySelector walker\n   * @private\n   * @returns {object} - tree walker\n   */\n  _prepareQuerySelectorWalker() {\n    this.#qswalker = this._createTreeWalker(this.#node);\n    this.#sort = false;\n    return this.#qswalker;\n  }\n\n  /**\n   * traverse tree walker\n   * @private\n   * @param {object} node - Element node\n   * @param {object} [walker] - tree walker\n   * @returns {?object} - current node\n   */\n  _traverse(node, walker = this.#walker) {\n    let refNode = walker.currentNode;\n    let current;\n    if (refNode === node) {\n      current = refNode;\n    } else if (refNode.contains(node)) {\n      refNode = walker.nextNode();\n      while (refNode) {\n        if (refNode === node) {\n          current = refNode;\n          break;\n        }\n        refNode = walker.nextNode();\n      }\n    } else {\n      if (refNode !== walker.root) {\n        while (refNode) {\n          if (refNode === walker.root || refNode === node) {\n            break;\n          }\n          refNode = walker.parentNode();\n        }\n      }\n      if (node?.nodeType === ELEMENT_NODE) {\n        while (refNode) {\n          if (refNode === node) {\n            current = refNode;\n            break;\n          }\n          refNode = walker.nextNode();\n        }\n      } else {\n        current = refNode;\n      }\n    }\n    return current ?? null;\n  }\n\n  /**\n   * collect nth child\n   * @private\n   * @param {object} anb - An+B options\n   * @param {number} anb.a - a\n   * @param {number} anb.b - b\n   * @param {boolean} [anb.reverse] - reverse order\n   * @param {object} [anb.selector] - AST\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _collectNthChild(anb, node, opt) {\n    const { a, b, reverse, selector } = anb;\n    const { parentNode } = node;\n    const matched = new Set();\n    let selectorBranches;\n    if (selector) {\n      if (this.#cache.has(selector)) {\n        selectorBranches = this.#cache.get(selector);\n      } else {\n        selectorBranches = walkAST(selector);\n        this.#cache.set(selector, selectorBranches);\n      }\n    }\n    if (parentNode) {\n      const walker = this.#walker;\n      let refNode = this._traverse(parentNode, walker);\n      refNode = walker.firstChild();\n      let l = 0;\n      while (refNode) {\n        l++;\n        refNode = walker.nextSibling();\n      }\n      refNode = this._traverse(parentNode, walker);\n      const selectorNodes = new Set();\n      if (selectorBranches) {\n        refNode = walker.firstChild();\n        while (refNode) {\n          let bool;\n          for (const leaves of selectorBranches) {\n            bool = this._matchLeaves(leaves, refNode, opt);\n            if (!bool) {\n              break;\n            }\n          }\n          if (bool) {\n            selectorNodes.add(refNode);\n          }\n          refNode = walker.nextSibling();\n        }\n      }\n      // :first-child, :last-child, :nth-child(b of S), :nth-last-child(b of S)\n      if (a === 0) {\n        if (b > 0 && b <= l) {\n          if (selectorNodes.size) {\n            refNode = this._traverse(parentNode, walker);\n            if (reverse) {\n              refNode = walker.lastChild();\n            } else {\n              refNode = walker.firstChild();\n            }\n            let i = 0;\n            while (refNode) {\n              if (selectorNodes.has(refNode)) {\n                if (i === b - 1) {\n                  matched.add(refNode);\n                  break;\n                }\n                i++;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n            }\n          } else if (!selector) {\n            refNode = this._traverse(parentNode, walker);\n            if (reverse) {\n              refNode = walker.lastChild();\n            } else {\n              refNode = walker.firstChild();\n            }\n            let i = 0;\n            while (refNode) {\n              if (i === b - 1) {\n                matched.add(refNode);\n                break;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n              i++;\n            }\n          }\n        }\n      // :nth-child()\n      } else {\n        let nth = b - 1;\n        if (a > 0) {\n          while (nth < 0) {\n            nth += a;\n          }\n        }\n        if (nth >= 0 && nth < l) {\n          refNode = this._traverse(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let i = 0;\n          let j = a > 0 ? 0 : b - 1;\n          while (refNode) {\n            if (refNode && nth >= 0 && nth < l) {\n              if (selectorNodes.size) {\n                if (selectorNodes.has(refNode)) {\n                  if (j === nth) {\n                    matched.add(refNode);\n                    nth += a;\n                  }\n                  if (a > 0) {\n                    j++;\n                  } else {\n                    j--;\n                  }\n                }\n              } else if (i === nth) {\n                if (!selector) {\n                  matched.add(refNode);\n                }\n                nth += a;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n              i++;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n      if (reverse && matched.size > 1) {\n        const m = [...matched];\n        return new Set(m.reverse());\n      }\n    } else if (node === this.#root && (a + b) === 1) {\n      if (selectorBranches) {\n        let bool;\n        for (const leaves of selectorBranches) {\n          bool = this._matchLeaves(leaves, node, opt);\n          if (bool) {\n            break;\n          }\n        }\n        if (bool) {\n          matched.add(node);\n        }\n      } else {\n        matched.add(node);\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * collect nth of type\n   * @private\n   * @param {object} anb - An+B options\n   * @param {number} anb.a - a\n   * @param {number} anb.b - b\n   * @param {boolean} [anb.reverse] - reverse order\n   * @param {object} node - Element node\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _collectNthOfType(anb, node) {\n    const { a, b, reverse } = anb;\n    const { localName, parentNode, prefix } = node;\n    const matched = new Set();\n    if (parentNode) {\n      const walker = this.#walker;\n      let refNode = this._traverse(parentNode, walker);\n      refNode = walker.firstChild();\n      let l = 0;\n      while (refNode) {\n        l++;\n        refNode = walker.nextSibling();\n      }\n      // :first-of-type, :last-of-type\n      if (a === 0) {\n        if (b > 0 && b <= l) {\n          refNode = this._traverse(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let j = 0;\n          while (refNode) {\n            const { localName: itemLocalName, prefix: itemPrefix } = refNode;\n            if (itemLocalName === localName && itemPrefix === prefix) {\n              if (j === b - 1) {\n                matched.add(refNode);\n                break;\n              }\n              j++;\n            }\n            if (reverse) {\n              refNode = walker.previousSibling();\n            } else {\n              refNode = walker.nextSibling();\n            }\n          }\n        }\n      // :nth-of-type()\n      } else {\n        let nth = b - 1;\n        if (a > 0) {\n          while (nth < 0) {\n            nth += a;\n          }\n        }\n        if (nth >= 0 && nth < l) {\n          refNode = this._traverse(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let j = a > 0 ? 0 : b - 1;\n          while (refNode) {\n            const { localName: itemLocalName, prefix: itemPrefix } = refNode;\n            if (itemLocalName === localName && itemPrefix === prefix) {\n              if (j === nth) {\n                matched.add(refNode);\n                nth += a;\n              }\n              if (nth < 0 || nth >= l) {\n                break;\n              } else if (a > 0) {\n                j++;\n              } else {\n                j--;\n              }\n            }\n            if (reverse) {\n              refNode = walker.previousSibling();\n            } else {\n              refNode = walker.nextSibling();\n            }\n          }\n        }\n      }\n      if (reverse && matched.size > 1) {\n        const m = [...matched];\n        return new Set(m.reverse());\n      }\n    } else if (node === this.#root && (a + b) === 1) {\n      matched.add(node);\n    }\n    return matched;\n  }\n\n  /**\n   * match An+B\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - Element node\n   * @param {string} nthName - nth pseudo-class name\n   * @param {object} opt - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchAnPlusB(ast, node, nthName, opt) {\n    const {\n      nth: {\n        a,\n        b,\n        name: nthIdentName\n      },\n      selector\n    } = ast;\n    const anbMap = new Map();\n    if (nthIdentName) {\n      if (nthIdentName === 'even') {\n        anbMap.set('a', 2);\n        anbMap.set('b', 0);\n      } else if (nthIdentName === 'odd') {\n        anbMap.set('a', 2);\n        anbMap.set('b', 1);\n      }\n      if (nthName.indexOf('last') > -1) {\n        anbMap.set('reverse', true);\n      }\n    } else {\n      if (typeof a === 'string' && /-?\\d+/.test(a)) {\n        anbMap.set('a', a * 1);\n      } else {\n        anbMap.set('a', 0);\n      }\n      if (typeof b === 'string' && /-?\\d+/.test(b)) {\n        anbMap.set('b', b * 1);\n      } else {\n        anbMap.set('b', 0);\n      }\n      if (nthName.indexOf('last') > -1) {\n        anbMap.set('reverse', true);\n      }\n    }\n    if (/^nth-(?:last-)?child$/.test(nthName)) {\n      if (selector) {\n        anbMap.set('selector', selector);\n      }\n      const anb = Object.fromEntries(anbMap);\n      const nodes = this._collectNthChild(anb, node, opt);\n      return nodes;\n    } else if (/^nth-(?:last-)?of-type$/.test(nthName)) {\n      const anb = Object.fromEntries(anbMap);\n      const nodes = this._collectNthOfType(anb, node);\n      return nodes;\n    }\n    return new Set();\n  }\n\n  /**\n   * match :has() pseudo-class function\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {boolean} - result\n   */\n  _matchHasPseudoFunc(leaves, node, opt = {}) {\n    let bool;\n    if (Array.isArray(leaves) && leaves.length) {\n      const [leaf] = leaves;\n      const { type: leafType } = leaf;\n      let combo;\n      if (leafType === COMBINATOR) {\n        combo = leaves.shift();\n      } else {\n        combo = {\n          name: ' ',\n          type: COMBINATOR\n        };\n      }\n      const twigLeaves = [];\n      while (leaves.length) {\n        const [item] = leaves;\n        const { type: itemType } = item;\n        if (itemType === COMBINATOR) {\n          break;\n        } else {\n          twigLeaves.push(leaves.shift());\n        }\n      }\n      const twig = {\n        combo,\n        leaves: twigLeaves\n      };\n      opt.dir = DIR_NEXT;\n      const nodes = this._matchCombinator(twig, node, opt);\n      if (nodes.size) {\n        if (leaves.length) {\n          for (const nextNode of nodes) {\n            bool = this._matchHasPseudoFunc(Object.assign([], leaves),\n              nextNode, opt);\n            if (bool) {\n              break;\n            }\n          }\n        } else {\n          bool = true;\n        }\n      }\n    }\n    return !!bool;\n  }\n\n  /**\n   * match logical pseudo-class functions - :has(), :is(), :not(), :where()\n   * @private\n   * @param {object} astData - AST data\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {?object} - matched node\n   */\n  _matchLogicalPseudoFunc(astData, node, opt = {}) {\n    const {\n      astName = '', branches = [], selector = '', twigBranches = []\n    } = astData;\n    let res;\n    if (astName === 'has') {\n      if (selector.includes(':has(')) {\n        res = null;\n      } else {\n        let bool;\n        for (const leaves of branches) {\n          bool = this._matchHasPseudoFunc(Object.assign([], leaves), node, opt);\n          if (bool) {\n            break;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      }\n    } else {\n      const forgive = /^(?:is|where)$/.test(astName);\n      opt.forgive = forgive;\n      const l = twigBranches.length;\n      let bool;\n      for (let i = 0; i < l; i++) {\n        const branch = twigBranches[i];\n        const lastIndex = branch.length - 1;\n        const { leaves } = branch[lastIndex];\n        bool = this._matchLeaves(leaves, node, opt);\n        if (bool && lastIndex > 0) {\n          let nextNodes = new Set([node]);\n          for (let j = lastIndex - 1; j >= 0; j--) {\n            const twig = branch[j];\n            const arr = [];\n            opt.dir = DIR_PREV;\n            for (const nextNode of nextNodes) {\n              const m = this._matchCombinator(twig, nextNode, opt);\n              if (m.size) {\n                arr.push(...m);\n              }\n            }\n            if (arr.length) {\n              if (j === 0) {\n                bool = true;\n              } else {\n                nextNodes = new Set(arr);\n              }\n            } else {\n              bool = false;\n              break;\n            }\n          }\n        }\n        if (bool) {\n          break;\n        }\n      }\n      if (astName === 'not') {\n        if (!bool) {\n          res = node;\n        }\n      } else if (bool) {\n        res = node;\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match pseudo-class selector\n   * @private\n   * @see https://html.spec.whatwg.org/#pseudo-classes\n   * @param {object} ast - AST\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @param {boolean} [opt.forgive] - forgive unknown pseudo-class\n   * @param {boolean} [opt.warn] - warn unsupported pseudo-class\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchPseudoClassSelector(ast, node, opt = {}) {\n    const { children: astChildren, name: astName } = ast;\n    const { localName, parentNode } = node;\n    const {\n      forgive,\n      warn = this.#warn\n    } = opt;\n    const matched = new Set();\n    // :has(), :is(), :not(), :where()\n    if (REG_LOGICAL_PSEUDO.test(astName)) {\n      let astData;\n      if (this.#cache.has(ast)) {\n        astData = this.#cache.get(ast);\n      } else {\n        const branches = walkAST(ast);\n        const selectors = [];\n        const twigBranches = [];\n        for (const [...leaves] of branches) {\n          for (const leaf of leaves) {\n            const css = generateCSS(leaf);\n            selectors.push(css);\n          }\n          const branch = [];\n          const leavesSet = new Set();\n          let item = leaves.shift();\n          while (item) {\n            if (item.type === COMBINATOR) {\n              branch.push({\n                combo: item,\n                leaves: [...leavesSet]\n              });\n              leavesSet.clear();\n            } else if (item) {\n              leavesSet.add(item);\n            }\n            if (leaves.length) {\n              item = leaves.shift();\n            } else {\n              branch.push({\n                combo: null,\n                leaves: [...leavesSet]\n              });\n              leavesSet.clear();\n              break;\n            }\n          }\n          twigBranches.push(branch);\n        }\n        astData = {\n          astName,\n          branches,\n          twigBranches,\n          selector: selectors.join(',')\n        };\n        this.#cache.set(ast, astData);\n      }\n      const res = this._matchLogicalPseudoFunc(astData, node, opt);\n      if (res) {\n        matched.add(res);\n      }\n    } else if (Array.isArray(astChildren)) {\n      // :nth-child(), :nth-last-child(), nth-of-type(), :nth-last-of-type()\n      if (/^nth-(?:last-)?(?:child|of-type)$/.test(astName)) {\n        const [branch] = astChildren;\n        const nodes = this._matchAnPlusB(branch, node, astName, opt);\n        return nodes;\n      } else {\n        switch (astName) {\n          // :dir(), :lang()\n          case 'dir':\n          case 'lang': {\n            const res = matcher.matchSelector(ast, node);\n            if (res) {\n              matched.add(res);\n            }\n            break;\n          }\n          case 'current':\n          case 'nth-col':\n          case 'nth-last-col': {\n            if (warn) {\n              const msg = `Unsupported pseudo-class :${astName}()`;\n              throw new DOMException(msg, NOT_SUPPORTED_ERR);\n            }\n            break;\n          }\n          case 'host':\n          case 'host-context': {\n            // ignore\n            break;\n          }\n          default: {\n            if (!forgive) {\n              const msg = `Unknown pseudo-class :${astName}()`;\n              throw new DOMException(msg, SYNTAX_ERR);\n            }\n          }\n        }\n      }\n    } else {\n      const regAnchor = /^a(?:rea)?$/;\n      const regFormCtrl =\n        /^(?:button|fieldset|input|optgroup|option|select|textarea)$/;\n      const regFormValidity = /^(?:button|form|input|select|textarea)$/;\n      const regInteract = /^(?:details|dialog)$/;\n      const regTypeCheck = /^(?:checkbox|radio)$/;\n      const regTypeDate = /^(?:date(?:time-local)?|month|time|week)$/;\n      const regTypeRange =\n        /(?:date(?:time-local)?|month|number|range|time|week)$/;\n      const regTypeText = /^(?:email|number|password|search|tel|text|url)$/;\n      switch (astName) {\n        case 'any-link':\n        case 'link': {\n          if (regAnchor.test(localName) && node.hasAttribute('href')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'local-link': {\n          if (regAnchor.test(localName) && node.hasAttribute('href')) {\n            const { href, origin, pathname } = new URL(this.#content.URL);\n            const attrURL = new URL(node.getAttribute('href'), href);\n            if (attrURL.origin === origin && attrURL.pathname === pathname) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'visited': {\n          // prevent fingerprinting\n          break;\n        }\n        case 'hover': {\n          const { target, type } = this.#event ?? {};\n          if ((type === 'mouseover' || type === 'pointerover') &&\n              node.contains(target)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'active': {\n          const { buttons, target, type } = this.#event ?? {};\n          if ((type === 'mousedown' || type === 'pointerdown') &&\n              buttons & BIT_01 && node.contains(target)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'target': {\n          const { hash } = new URL(this.#content.URL);\n          if (node.id && hash === `#${node.id}` &&\n              this.#content.contains(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'target-within': {\n          const { hash } = new URL(this.#content.URL);\n          if (hash) {\n            const id = hash.replace(/^#/, '');\n            let current = this.#content.getElementById(id);\n            while (current) {\n              if (current === node) {\n                matched.add(node);\n                break;\n              }\n              current = current.parentNode;\n            }\n          }\n          break;\n        }\n        case 'scope': {\n          if (this.#node.nodeType === ELEMENT_NODE) {\n            if (!this.#shadow && node === this.#node) {\n              matched.add(node);\n            }\n          } else if (node === this.#content.documentElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'focus':\n        case 'focus-visible': {\n          const { target, type } = this.#event ?? {};\n          if (node === this.#content.activeElement && node.tabIndex >= 0 &&\n              (astName === 'focus' ||\n               (type === 'keydown' && node.contains(target)))) {\n            let refNode = node;\n            let focus = true;\n            while (refNode) {\n              if (refNode.disabled || refNode.hasAttribute('disabled') ||\n                  refNode.hidden || refNode.hasAttribute('hidden')) {\n                focus = false;\n                break;\n              } else {\n                const { display, visibility } =\n                  this.#window.getComputedStyle(refNode);\n                focus = !(display === 'none' || visibility === 'hidden');\n                if (!focus) {\n                  break;\n                }\n              }\n              if (refNode.parentNode &&\n                  refNode.parentNode.nodeType === ELEMENT_NODE) {\n                refNode = refNode.parentNode;\n              } else {\n                break;\n              }\n            }\n            if (focus) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'focus-within': {\n          let active;\n          let current = this.#content.activeElement;\n          if (current.tabIndex >= 0) {\n            while (current) {\n              if (current === node) {\n                active = true;\n                break;\n              }\n              current = current.parentNode;\n            }\n          }\n          if (active) {\n            let refNode = node;\n            let focus = true;\n            while (refNode) {\n              if (refNode.disabled || refNode.hasAttribute('disabled') ||\n                  refNode.hidden || refNode.hasAttribute('hidden')) {\n                focus = false;\n                break;\n              } else {\n                const { display, visibility } =\n                  this.#window.getComputedStyle(refNode);\n                focus = !(display === 'none' || visibility === 'hidden');\n                if (!focus) {\n                  break;\n                }\n              }\n              if (refNode.parentNode &&\n                  refNode.parentNode.nodeType === ELEMENT_NODE) {\n                refNode = refNode.parentNode;\n              } else {\n                break;\n              }\n            }\n            if (focus) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'open': {\n          if (regInteract.test(localName) && node.hasAttribute('open')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'closed': {\n          if (regInteract.test(localName) && !node.hasAttribute('open')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'disabled': {\n          if (regFormCtrl.test(localName) || isCustomElementName(localName)) {\n            if (node.disabled || node.hasAttribute('disabled')) {\n              matched.add(node);\n            } else {\n              let parent = parentNode;\n              while (parent) {\n                if (parent.localName === 'fieldset') {\n                  break;\n                }\n                parent = parent.parentNode;\n              }\n              if (parent && parentNode.localName !== 'legend' &&\n                  parent.hasAttribute('disabled')) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'enabled': {\n          if ((regFormCtrl.test(localName) || isCustomElementName(localName)) &&\n              !(node.disabled && node.hasAttribute('disabled'))) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'read-only': {\n          switch (localName) {\n            case 'textarea': {\n              if (node.readonly || node.hasAttribute('readonly') ||\n                  node.disabled || node.hasAttribute('disabled')) {\n                matched.add(node);\n              }\n              break;\n            }\n            case 'input': {\n              if ((!node.type || regTypeDate.test(node.type) ||\n                   regTypeText.test(node.type)) &&\n                  (node.readonly || node.hasAttribute('readonly') ||\n                   node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            default: {\n              if (!isContentEditable(node)) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'read-write': {\n          switch (localName) {\n            case 'textarea': {\n              if (!(node.readonly || node.hasAttribute('readonly') ||\n                    node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            case 'input': {\n              if ((!node.type || regTypeDate.test(node.type) ||\n                   regTypeText.test(node.type)) &&\n                  !(node.readonly || node.hasAttribute('readonly') ||\n                    node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            default: {\n              if (isContentEditable(node)) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'placeholder-shown': {\n          let targetNode;\n          if (localName === 'textarea') {\n            targetNode = node;\n          } else if (localName === 'input') {\n            if (node.hasAttribute('type')) {\n              if (regTypeText.test(node.getAttribute('type'))) {\n                targetNode = node;\n              }\n            } else {\n              targetNode = node;\n            }\n          }\n          if (targetNode && node.value === '' &&\n              node.hasAttribute('placeholder') &&\n              node.getAttribute('placeholder').trim().length) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'checked': {\n          if ((node.checked && localName === 'input' &&\n               node.hasAttribute('type') &&\n               regTypeCheck.test(node.getAttribute('type'))) ||\n              (node.selected && localName === 'option')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'indeterminate': {\n          if ((node.indeterminate && localName === 'input' &&\n               node.type === 'checkbox') ||\n              (localName === 'progress' && !node.hasAttribute('value'))) {\n            matched.add(node);\n          } else if (localName === 'input' && node.type === 'radio' &&\n                     !node.hasAttribute('checked')) {\n            const nodeName = node.name;\n            let parent = node.parentNode;\n            while (parent) {\n              if (parent.localName === 'form') {\n                break;\n              }\n              parent = parent.parentNode;\n            }\n            if (!parent) {\n              parent = this.#content.documentElement;\n            }\n            const items = parent.getElementsByTagName('input');\n            const l = items.length;\n            let checked;\n            for (let i = 0; i < l; i++) {\n              const item = items[i];\n              if (item.getAttribute('type') === 'radio') {\n                if (nodeName) {\n                  if (item.getAttribute('name') === nodeName) {\n                    checked = !!item.checked;\n                  }\n                } else if (!item.hasAttribute('name')) {\n                  checked = !!item.checked;\n                }\n                if (checked) {\n                  break;\n                }\n              }\n            }\n            if (!checked) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'default': {\n          const regTypeReset = /^(?:button|reset)$/;\n          const regTypeSubmit = /^(?:image|submit)$/;\n          // button[type=\"submit\"], input[type=\"submit\"], input[type=\"image\"]\n          if ((localName === 'button' &&\n               !(node.hasAttribute('type') &&\n                 regTypeReset.test(node.getAttribute('type')))) ||\n              (localName === 'input' && node.hasAttribute('type') &&\n               regTypeSubmit.test(node.getAttribute('type')))) {\n            let form = node.parentNode;\n            while (form) {\n              if (form.localName === 'form') {\n                break;\n              }\n              form = form.parentNode;\n            }\n            if (form) {\n              const walker = this.#walker;\n              let nextNode = this._traverse(form, walker);\n              nextNode = walker.firstChild();\n              while (nextNode && form.contains(nextNode)) {\n                const nodeName = nextNode.localName;\n                let m;\n                if (nodeName === 'button') {\n                  m = !(nextNode.hasAttribute('type') &&\n                    regTypeReset.test(nextNode.getAttribute('type')));\n                } else if (nodeName === 'input') {\n                  m = nextNode.hasAttribute('type') &&\n                    regTypeSubmit.test(nextNode.getAttribute('type'));\n                }\n                if (m) {\n                  if (nextNode === node) {\n                    matched.add(node);\n                  }\n                  break;\n                }\n                nextNode = walker.nextNode();\n              }\n            }\n          // input[type=\"checkbox\"], input[type=\"radio\"]\n          } else if (localName === 'input' && node.hasAttribute('type') &&\n                     regTypeCheck.test(node.getAttribute('type')) &&\n                     (node.checked || node.hasAttribute('checked'))) {\n            matched.add(node);\n          // option\n          } else if (localName === 'option') {\n            let parent = parentNode;\n            let isMultiple = false;\n            while (parent) {\n              if (parent.localName === 'datalist') {\n                break;\n              } else if (parent.localName === 'select') {\n                if (parent.multiple || parent.hasAttribute('multiple')) {\n                  isMultiple = true;\n                }\n                break;\n              }\n              parent = parent.parentNode;\n            }\n            if (isMultiple) {\n              if (node.selected || node.hasAttribute('selected')) {\n                matched.add(node);\n              }\n            } else {\n              const defaultOpt = new Set();\n              const walker = this.#walker;\n              let refNode = this._traverse(parentNode, walker);\n              refNode = walker.firstChild();\n              while (refNode) {\n                if (refNode.selected || refNode.hasAttribute('selected')) {\n                  defaultOpt.add(refNode);\n                  break;\n                }\n                refNode = walker.nextSibling();\n              }\n              if (defaultOpt.size) {\n                if (defaultOpt.has(node)) {\n                  matched.add(node);\n                }\n              }\n            }\n          }\n          break;\n        }\n        case 'valid': {\n          if (regFormValidity.test(localName)) {\n            if (node.checkValidity()) {\n              matched.add(node);\n            }\n          } else if (localName === 'fieldset') {\n            const walker = this.#walker;\n            let refNode = this._traverse(node, walker);\n            refNode = walker.firstChild();\n            let bool;\n            while (refNode && node.contains(refNode)) {\n              if (regFormValidity.test(refNode.localName)) {\n                bool = refNode.checkValidity();\n                if (!bool) {\n                  break;\n                }\n              }\n              refNode = walker.nextNode();\n            }\n            if (bool) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'invalid': {\n          if (regFormValidity.test(localName)) {\n            if (!node.checkValidity()) {\n              matched.add(node);\n            }\n          } else if (localName === 'fieldset') {\n            const walker = this.#walker;\n            let refNode = this._traverse(node, walker);\n            refNode = walker.firstChild();\n            let bool;\n            while (refNode && node.contains(refNode)) {\n              if (regFormValidity.test(refNode.localName)) {\n                bool = refNode.checkValidity();\n                if (!bool) {\n                  break;\n                }\n              }\n              refNode = walker.nextNode();\n            }\n            if (!bool) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'in-range': {\n          if (localName === 'input' &&\n              !(node.readonly || node.hasAttribute('readonly')) &&\n              !(node.disabled || node.hasAttribute('disabled')) &&\n              node.hasAttribute('type') &&\n              regTypeRange.test(node.getAttribute('type')) &&\n              !(node.validity.rangeUnderflow ||\n                node.validity.rangeOverflow) &&\n              (node.hasAttribute('min') || node.hasAttribute('max') ||\n               node.getAttribute('type') === 'range')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'out-of-range': {\n          if (localName === 'input' &&\n              !(node.readonly || node.hasAttribute('readonly')) &&\n              !(node.disabled || node.hasAttribute('disabled')) &&\n              node.hasAttribute('type') &&\n              regTypeRange.test(node.getAttribute('type')) &&\n              (node.validity.rangeUnderflow || node.validity.rangeOverflow)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'required': {\n          let targetNode;\n          if (/^(?:select|textarea)$/.test(localName)) {\n            targetNode = node;\n          } else if (localName === 'input') {\n            if (node.hasAttribute('type')) {\n              const inputType = node.getAttribute('type');\n              if (inputType === 'file' || regTypeCheck.test(inputType) ||\n                  regTypeDate.test(inputType) || regTypeText.test(inputType)) {\n                targetNode = node;\n              }\n            } else {\n              targetNode = node;\n            }\n          }\n          if (targetNode &&\n              (node.required || node.hasAttribute('required'))) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'optional': {\n          let targetNode;\n          if (/^(?:select|textarea)$/.test(localName)) {\n            targetNode = node;\n          } else if (localName === 'input') {\n            if (node.hasAttribute('type')) {\n              const inputType = node.getAttribute('type');\n              if (inputType === 'file' || regTypeCheck.test(inputType) ||\n                  regTypeDate.test(inputType) || regTypeText.test(inputType)) {\n                targetNode = node;\n              }\n            } else {\n              targetNode = node;\n            }\n          }\n          if (targetNode &&\n              !(node.required || node.hasAttribute('required'))) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'root': {\n          if (node === this.#content.documentElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'empty': {\n          if (node.hasChildNodes()) {\n            const walker = this.#document.createTreeWalker(node, SHOW_ALL);\n            let refNode = walker.firstChild();\n            let bool;\n            while (refNode) {\n              bool = refNode.nodeType !== ELEMENT_NODE &&\n                refNode.nodeType !== TEXT_NODE;\n              if (!bool) {\n                break;\n              }\n              refNode = walker.nextSibling();\n            }\n            if (bool) {\n              matched.add(node);\n            }\n          } else {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'first-child': {\n          if ((parentNode && node === parentNode.firstElementChild) ||\n              node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'last-child': {\n          if ((parentNode && node === parentNode.lastElementChild) ||\n              node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'only-child': {\n          if ((parentNode && node === parentNode.firstElementChild &&\n               node === parentNode.lastElementChild) || node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'first-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1\n            }, node);\n            if (node1) {\n              matched.add(node1);\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'last-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1,\n              reverse: true\n            }, node);\n            if (node1) {\n              matched.add(node1);\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'only-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1\n            }, node);\n            if (node1 === node) {\n              const [node2] = this._collectNthOfType({\n                a: 0,\n                b: 1,\n                reverse: true\n              }, node);\n              if (node2 === node) {\n                matched.add(node);\n              }\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'defined': {\n          const attr = node.getAttribute('is');\n          if (attr) {\n            if (isCustomElementName(attr) &&\n                this.#window.customElements.get(attr)) {\n              matched.add(node);\n            }\n          } else if (isCustomElementName(localName)) {\n            if (this.#window.customElements.get(localName)) {\n              matched.add(node);\n            }\n          // NOTE: MathMLElement not implemented in jsdom\n          } else if (node instanceof this.#window.HTMLElement ||\n                     node instanceof this.#window.SVGElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'host':\n        case 'host-context': {\n          // ignore\n          break;\n        }\n        // legacy pseudo-elements\n        case 'after':\n        case 'before':\n        case 'first-letter':\n        case 'first-line': {\n          if (warn) {\n            const msg = `Unsupported pseudo-element ::${astName}`;\n            throw new DOMException(msg, NOT_SUPPORTED_ERR);\n          }\n          break;\n        }\n        // not supported\n        case 'autofill':\n        case 'blank':\n        case 'buffering':\n        case 'current':\n        case 'fullscreen':\n        case 'future':\n        case 'modal':\n        case 'muted':\n        case 'past':\n        case 'paused':\n        case 'picture-in-picture':\n        case 'playing':\n        case 'seeking':\n        case 'stalled':\n        case 'user-invalid':\n        case 'user-valid':\n        case 'volume-locked':\n        case '-webkit-autofill': {\n          if (warn) {\n            const msg = `Unsupported pseudo-class :${astName}`;\n            throw new DOMException(msg, NOT_SUPPORTED_ERR);\n          }\n          break;\n        }\n        default: {\n          if (astName.startsWith('-webkit-')) {\n            if (warn) {\n              const msg = `Unsupported pseudo-class :${astName}`;\n              throw new DOMException(msg, NOT_SUPPORTED_ERR);\n            }\n          } else if (!forgive) {\n            const msg = `Unknown pseudo-class :${astName}`;\n            throw new DOMException(msg, SYNTAX_ERR);\n          }\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * match shadow host pseudo class\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - DocumentFragment node\n   * @returns {?object} - matched node\n   */\n  _matchShadowHostPseudoClass(ast, node) {\n    const { children: astChildren, name: astName } = ast;\n    let res;\n    if (Array.isArray(astChildren)) {\n      const [branch] = walkAST(astChildren[0]);\n      const [...leaves] = branch;\n      const { host } = node;\n      if (astName === 'host') {\n        let bool;\n        for (const leaf of leaves) {\n          const { type: leafType } = leaf;\n          if (leafType === COMBINATOR) {\n            const css = generateCSS(ast);\n            const msg = `Invalid selector ${css}`;\n            throw new DOMException(msg, SYNTAX_ERR);\n          }\n          bool = this._matchSelector(leaf, host).has(host);\n          if (!bool) {\n            break;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      } else if (astName === 'host-context') {\n        let parent = host;\n        let bool;\n        while (parent) {\n          for (const leaf of leaves) {\n            const { type: leafType } = leaf;\n            if (leafType === COMBINATOR) {\n              const css = generateCSS(ast);\n              const msg = `Invalid selector ${css}`;\n              throw new DOMException(msg, SYNTAX_ERR);\n            }\n            bool = this._matchSelector(leaf, parent).has(parent);\n            if (!bool) {\n              break;\n            }\n          }\n          if (bool) {\n            break;\n          } else {\n            parent = parent.parentNode;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      }\n    } else if (astName === 'host') {\n      res = node;\n    } else {\n      const msg = `Invalid selector :${astName}`;\n      throw new DOMException(msg, SYNTAX_ERR);\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match selector\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} [opt] - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchSelector(ast, node, opt) {\n    const { type: astType } = ast;\n    const matched = new Set();\n    if (ast.name === EMPTY) {\n      return matched;\n    }\n    const astName = unescapeSelector(ast.name);\n    if (typeof astName === 'string' && astName !== ast.name) {\n      ast.name = astName;\n    }\n    if (node.nodeType === ELEMENT_NODE) {\n      switch (astType) {\n        case SELECTOR_PSEUDO_ELEMENT: {\n          matcher.matchPseudoElementSelector(astName, opt);\n          break;\n        }\n        case SELECTOR_ID: {\n          if (node.id === astName) {\n            matched.add(node);\n          }\n          break;\n        }\n        case SELECTOR_CLASS: {\n          if (node.classList.contains(astName)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case SELECTOR_PSEUDO_CLASS: {\n          const nodes = this._matchPseudoClassSelector(ast, node, opt);\n          return nodes;\n        }\n        default: {\n          const res = matcher.matchSelector(ast, node, opt);\n          if (res) {\n            matched.add(res);\n          }\n        }\n      }\n    } else if (this.#shadow && astType === SELECTOR_PSEUDO_CLASS &&\n               node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      if (astName !== 'has' && REG_LOGICAL_PSEUDO.test(astName)) {\n        const nodes = this._matchPseudoClassSelector(ast, node, opt);\n        return nodes;\n      } else if (REG_SHADOW_HOST.test(astName)) {\n        const res = this._matchShadowHostPseudoClass(ast, node, opt);\n        if (res) {\n          matched.add(res);\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * match leaves\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} node - node\n   * @param {object} opt - options\n   * @returns {boolean} - result\n   */\n  _matchLeaves(leaves, node, opt) {\n    const { attributes, localName, nodeType } = node;\n    let result = this.#results.get(leaves);\n    let bool;\n    if (result && result.has(node)) {\n      const { attr, matched } = result.get(node);\n      if (attributes?.length === attr) {\n        bool = matched;\n      }\n    }\n    if (typeof bool !== 'boolean') {\n      const regForm = /^(?:(?:fieldse|inpu|selec)t|button|form|textarea)$/;\n      let save;\n      if (nodeType === ELEMENT_NODE && regForm.test(localName)) {\n        save = false;\n      } else {\n        save = true;\n      }\n      for (const leaf of leaves) {\n        const { name: leafName, type: leafType } = leaf;\n        if (leafType === SELECTOR_PSEUDO_CLASS && leafName === 'dir') {\n          save = false;\n        }\n        bool = this._matchSelector(leaf, node, opt).has(node);\n        if (!bool) {\n          break;\n        }\n      }\n      if (save) {\n        if (!result) {\n          result = new WeakMap();\n        }\n        result.set(node, {\n          attr: attributes?.length,\n          matched: bool\n        });\n        this.#results.set(leaves, result);\n      }\n    }\n    return !!bool;\n  }\n\n  /**\n   * match HTML collection\n   * @private\n   * @param {object} items - HTML collection\n   * @param {object} opt - options\n   * @returns {Set.<object>} - matched nodes\n   */\n  _matchHTMLCollection(items, opt = {}) {\n    const { compound, filterLeaves } = opt;\n    const nodes = new Set();\n    const l = items.length;\n    if (l) {\n      if (compound) {\n        for (let i = 0; i < l; i++) {\n          const item = items[i];\n          const bool = this._matchLeaves(filterLeaves, item, opt);\n          if (bool) {\n            nodes.add(item);\n          }\n        }\n      } else {\n        const arr = [].slice.call(items);\n        return new Set(arr);\n      }\n    }\n    return nodes;\n  }\n\n  /**\n   * find descendant nodes\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} baseNode - base Element node\n   * @param {object} opt - options\n   * @returns {object} - collection of nodes and pending state\n   */\n  _findDescendantNodes(leaves, baseNode, opt) {\n    const [leaf, ...filterLeaves] = leaves;\n    const compound = filterLeaves.length > 0;\n    const { type: leafType } = leaf;\n    const leafName = unescapeSelector(leaf.name);\n    if (typeof leafName === 'string' && leafName !== leaf.name) {\n      leaf.name = leafName;\n    }\n    let nodes = new Set();\n    let pending = false;\n    if (this.#shadow) {\n      pending = true;\n    } else {\n      switch (leafType) {\n        case SELECTOR_PSEUDO_ELEMENT: {\n          matcher.matchPseudoElementSelector(leafName, opt);\n          break;\n        }\n        case SELECTOR_ID: {\n          if (this.#root.nodeType === ELEMENT_NODE) {\n            pending = true;\n          } else {\n            const node = this.#root.getElementById(leafName);\n            if (node && node !== baseNode && baseNode.contains(node)) {\n              if (compound) {\n                const bool = this._matchLeaves(filterLeaves, node, opt);\n                if (bool) {\n                  nodes.add(node);\n                }\n              } else {\n                nodes.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case SELECTOR_CLASS: {\n          const items = baseNode.getElementsByClassName(leafName);\n          nodes = this._matchHTMLCollection(items, {\n            compound,\n            filterLeaves\n          });\n          break;\n        }\n        case SELECTOR_TYPE: {\n          if (this.#content.contentType === 'text/html' &&\n              !/[*|]/.test(leafName)) {\n            const items = baseNode.getElementsByTagName(leafName);\n            nodes = this._matchHTMLCollection(items, {\n              compound,\n              filterLeaves\n            });\n          } else {\n            pending = true;\n          }\n          break;\n        }\n        default: {\n          pending = true;\n        }\n      }\n    }\n    return {\n      nodes,\n      pending\n    };\n  }\n\n  /**\n   * match combinator\n   * @private\n   * @param {object} twig - twig\n   * @param {object} node - Element node\n   * @param {object} opt - option\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchCombinator(twig, node, opt = {}) {\n    const { combo, leaves } = twig;\n    const { name: comboName } = combo;\n    const { parentNode } = node;\n    const { dir } = opt;\n    const matched = new Set();\n    if (dir === DIR_NEXT) {\n      switch (comboName) {\n        case '+': {\n          const refNode = node.nextElementSibling;\n          if (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n          }\n          break;\n        }\n        case '~': {\n          if (parentNode) {\n            const walker = this._createTreeWalker(parentNode);\n            let refNode = this._traverse(node, walker);\n            refNode = walker.nextSibling();\n            while (refNode) {\n              const bool = this._matchLeaves(leaves, refNode, opt);\n              if (bool) {\n                matched.add(refNode);\n              }\n              refNode = walker.nextSibling();\n            }\n          }\n          break;\n        }\n        case '>': {\n          const walker = this._createTreeWalker(node);\n          let refNode = this._traverse(node, walker);\n          refNode = walker.firstChild();\n          while (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n            refNode = walker.nextSibling();\n          }\n          break;\n        }\n        case ' ':\n        default: {\n          const { nodes, pending } = this._findDescendantNodes(leaves, node);\n          if (nodes.size) {\n            return nodes;\n          }\n          if (pending) {\n            const walker = this._createTreeWalker(node);\n            let refNode = this._traverse(node, walker);\n            refNode = walker.nextNode();\n            while (refNode && node.contains(refNode)) {\n              const bool = this._matchLeaves(leaves, refNode, opt);\n              if (bool) {\n                matched.add(refNode);\n              }\n              refNode = walker.nextNode();\n            }\n          }\n        }\n      }\n    } else {\n      switch (comboName) {\n        case '+': {\n          const refNode = node.previousElementSibling;\n          if (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n          }\n          break;\n        }\n        case '~': {\n          if (parentNode) {\n            const walker = this._createTreeWalker(parentNode);\n            let refNode = this._traverse(parentNode, walker);\n            refNode = walker.firstChild();\n            while (refNode) {\n              if (refNode === node) {\n                break;\n              } else {\n                const bool = this._matchLeaves(leaves, refNode, opt);\n                if (bool) {\n                  matched.add(refNode);\n                }\n              }\n              refNode = walker.nextSibling();\n            }\n          }\n          break;\n        }\n        case '>': {\n          if (parentNode) {\n            const bool = this._matchLeaves(leaves, parentNode, opt);\n            if (bool) {\n              matched.add(parentNode);\n            }\n          }\n          break;\n        }\n        case ' ':\n        default: {\n          const arr = [];\n          let refNode = parentNode;\n          while (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              arr.push(refNode);\n            }\n            refNode = refNode.parentNode;\n          }\n          if (arr.length) {\n            return new Set(arr.reverse());\n          }\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * find matched node from #qswalker\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} [opt] - options\n   * @param {object} [opt.node] - node to start from\n   * @returns {?object} - matched node\n   */\n  _findNode(leaves, opt) {\n    const { node } = opt;\n    let refNode = this._traverse(node, this.#qswalker);\n    let matchedNode;\n    if (refNode) {\n      if (refNode.nodeType !== ELEMENT_NODE) {\n        refNode = this.#qswalker.nextNode();\n      } else if (refNode === node) {\n        if (refNode !== this.#root) {\n          refNode = this.#qswalker.nextNode();\n        }\n      }\n      while (refNode) {\n        const matched = this._matchLeaves(leaves, refNode, {\n          warn: this.#warn\n        });\n        if (matched) {\n          matchedNode = refNode;\n          break;\n        }\n        refNode = this.#qswalker.nextNode();\n      }\n    }\n    return matchedNode ?? null;\n  }\n\n  /**\n   * match self\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _matchSelf(leaves) {\n    const nodes = [];\n    const bool = this._matchLeaves(leaves, this.#node, {\n      warn: this.#warn\n    });\n    let filtered = false;\n    if (bool) {\n      nodes.push(this.#node);\n      filtered = true;\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find lineal\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @param {object} opt - options\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findLineal(leaves, opt = {}) {\n    const { complex } = opt;\n    const nodes = [];\n    let bool = this._matchLeaves(leaves, this.#node, {\n      warn: this.#warn\n    });\n    let filtered = false;\n    if (bool) {\n      nodes.push(this.#node);\n      filtered = true;\n    }\n    if (!bool || complex) {\n      let refNode = this.#node.parentNode;\n      while (refNode) {\n        bool = this._matchLeaves(leaves, refNode, {\n          warn: this.#warn\n        });\n        if (bool) {\n          nodes.push(refNode);\n          filtered = true;\n        }\n        if (refNode.parentNode) {\n          refNode = refNode.parentNode;\n        } else {\n          break;\n        }\n      }\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find first\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findFirst(leaves) {\n    const nodes = [];\n    const node = this._findNode(leaves, {\n      node: this.#node\n    });\n    let filtered = false;\n    if (node) {\n      nodes.push(node);\n      filtered = true;\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find from HTML collection\n   * @private\n   * @param {object} items - HTML collection\n   * @param {object} opt - options\n   * @param {boolean} [opt.compound] - compound selector\n   * @param {Array} [opt.filterLeaves] - filter leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findFromHTMLCollection(items, opt = {}) {\n    const { complex, compound, filterLeaves, targetType } = opt;\n    let nodes = [];\n    let filtered = false;\n    let collected = false;\n    const l = items.length;\n    if (l) {\n      if (this.#node.nodeType === ELEMENT_NODE) {\n        for (let i = 0; i < l; i++) {\n          const node = items[i];\n          if (node !== this.#node &&\n              (this.#node.contains(node) || node.contains(this.#node))) {\n            if (compound) {\n              const bool = this._matchLeaves(filterLeaves, node, {\n                warn: this.#warn\n              });\n              if (bool) {\n                nodes.push(node);\n                filtered = true;\n                if (targetType === TARGET_FIRST) {\n                  break;\n                }\n              }\n            } else {\n              nodes.push(node);\n              filtered = true;\n              if (targetType === TARGET_FIRST) {\n                break;\n              }\n            }\n          }\n        }\n      } else if (complex) {\n        if (compound) {\n          for (let i = 0; i < l; i++) {\n            const node = items[i];\n            const bool = this._matchLeaves(filterLeaves, node, {\n              warn: this.#warn\n            });\n            if (bool) {\n              nodes.push(node);\n              filtered = true;\n              if (targetType === TARGET_FIRST) {\n                break;\n              }\n            }\n          }\n        } else {\n          nodes = [].slice.call(items);\n          filtered = true;\n          collected = true;\n        }\n      } else if (compound) {\n        for (let i = 0; i < l; i++) {\n          const node = items[i];\n          const bool = this._matchLeaves(filterLeaves, node, {\n            warn: this.#warn\n          });\n          if (bool) {\n            nodes.push(node);\n            filtered = true;\n            if (targetType === TARGET_FIRST) {\n              break;\n            }\n          }\n        }\n      } else {\n        nodes = [].slice.call(items);\n        filtered = true;\n        collected = true;\n      }\n    }\n    return [nodes, filtered, collected];\n  }\n\n  /**\n   * find entry nodes\n   * @private\n   * @param {object} twig - twig\n   * @param {string} targetType - target type\n   * @param {boolean} complex - complex selector\n   * @returns {object} - collection of nodes etc.\n   */\n  _findEntryNodes(twig, targetType, complex) {\n    const { leaves } = twig;\n    const [leaf, ...filterLeaves] = leaves;\n    const compound = filterLeaves.length > 0;\n    const { name: leafName, type: leafType } = leaf;\n    let nodes = [];\n    let collected = false;\n    let filtered = false;\n    let pending = false;\n    switch (leafType) {\n      case SELECTOR_PSEUDO_ELEMENT: {\n        matcher.matchPseudoElementSelector(leafName, {\n          warn: this.#warn\n        });\n        break;\n      }\n      case SELECTOR_ID: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (targetType === TARGET_FIRST &&\n                   this.#root.nodeType !== ELEMENT_NODE) {\n          const node = this.#root.getElementById(leafName);\n          if (node) {\n            if (compound) {\n              const bool = this._matchLeaves(filterLeaves, node, {\n                warn: this.#warn\n              });\n              if (bool) {\n                nodes.push(node);\n                filtered = true;\n              }\n            } else {\n              nodes.push(node);\n              filtered = true;\n            }\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      case SELECTOR_CLASS: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (this.#root.nodeType === DOCUMENT_NODE) {\n          const items = this.#root.getElementsByClassName(leafName);\n          if (items.length) {\n            [nodes, filtered, collected] = this._findFromHTMLCollection(items, {\n              complex,\n              compound,\n              filterLeaves,\n              targetType\n            });\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      case SELECTOR_TYPE: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (this.#content.contentType === 'text/html' &&\n                   this.#root.nodeType === DOCUMENT_NODE &&\n                   !/[*|]/.test(leafName)) {\n          const items = this.#root.getElementsByTagName(leafName);\n          if (items.length) {\n            [nodes, filtered, collected] = this._findFromHTMLCollection(items, {\n              complex,\n              compound,\n              filterLeaves,\n              targetType\n            });\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      default: {\n        if (targetType !== TARGET_LINEAL && REG_SHADOW_HOST.test(leafName)) {\n          if (this.#shadow &&\n              this.#node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n            const node = this._matchShadowHostPseudoClass(leaf, this.#node);\n            if (node) {\n              nodes.push(node);\n              filtered = true;\n            }\n          }\n        } else if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n      }\n    }\n    return {\n      collected,\n      compound,\n      filtered,\n      nodes,\n      pending\n    };\n  }\n\n  /**\n   * collect nodes\n   * @private\n   * @param {string} targetType - target type\n   * @returns {Array.<Array.<object|undefined>>} - #ast and #nodes\n   */\n  _collectNodes(targetType) {\n    const ast = this.#ast.values();\n    if (targetType === TARGET_ALL || targetType === TARGET_FIRST) {\n      const pendingItems = new Set();\n      let i = 0;\n      for (const { branch } of ast) {\n        const branchLen = branch.length;\n        const complex = branchLen > 1;\n        const firstTwig = branch[0];\n        let dir;\n        let twig;\n        if (complex) {\n          const {\n            combo: firstCombo,\n            leaves: [{\n              name: firstName,\n              type: firstType\n            }]\n          } = firstTwig;\n          const lastTwig = branch[branchLen - 1];\n          const {\n            leaves: [{\n              name: lastName,\n              type: lastType\n            }]\n          } = lastTwig;\n          if (lastType === SELECTOR_PSEUDO_ELEMENT ||\n              lastType === SELECTOR_ID) {\n            dir = DIR_PREV;\n            twig = lastTwig;\n          } else if (firstType === SELECTOR_PSEUDO_ELEMENT ||\n                     firstType === SELECTOR_ID) {\n            dir = DIR_NEXT;\n            twig = firstTwig;\n          } else if (targetType === TARGET_ALL) {\n            if (firstName === '*' && firstType === SELECTOR_TYPE) {\n              dir = DIR_PREV;\n              twig = lastTwig;\n            } else if (lastName === '*' && lastType === SELECTOR_TYPE) {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            } else if (branchLen === 2) {\n              const { name: comboName } = firstCombo;\n              if (/^[+~]$/.test(comboName)) {\n                dir = DIR_PREV;\n                twig = lastTwig;\n              } else {\n                dir = DIR_NEXT;\n                twig = firstTwig;\n              }\n            } else {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            }\n          } else if (lastName === '*' && lastType === SELECTOR_TYPE) {\n            dir = DIR_NEXT;\n            twig = firstTwig;\n          } else if (firstName === '*' && firstType === SELECTOR_TYPE) {\n            dir = DIR_PREV;\n            twig = lastTwig;\n          } else {\n            let bool;\n            for (const { combo, leaves: [leaf] } of branch) {\n              const { name: leafName, type: leafType } = leaf;\n              if (leafType === SELECTOR_PSEUDO_CLASS && leafName === 'dir') {\n                bool = false;\n                break;\n              }\n              if (!bool && combo) {\n                const { name: comboName } = combo;\n                if (/^[+~]$/.test(comboName)) {\n                  bool = true;\n                }\n              }\n            }\n            if (bool) {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            } else {\n              dir = DIR_PREV;\n              twig = lastTwig;\n            }\n          }\n        } else {\n          dir = DIR_PREV;\n          twig = firstTwig;\n        }\n        const {\n          collected, compound, filtered, nodes, pending\n        } = this._findEntryNodes(twig, targetType, complex);\n        if (nodes.length) {\n          this.#ast[i].find = true;\n          this.#nodes[i] = nodes;\n        } else if (pending) {\n          pendingItems.add(new Map([\n            ['index', i],\n            ['twig', twig]\n          ]));\n        }\n        this.#ast[i].collected = collected;\n        this.#ast[i].dir = dir;\n        this.#ast[i].filtered = filtered || !compound;\n        i++;\n      }\n      if (pendingItems.size) {\n        let node;\n        let walker;\n        if (this.#node !== this.#root && this.#node.nodeType === ELEMENT_NODE) {\n          node = this.#node;\n          walker = this.#qswalker;\n        } else {\n          node = this.#root;\n          walker = this.#walker;\n        }\n        let nextNode = this._traverse(node, walker);\n        while (nextNode) {\n          let bool = false;\n          if (this.#node.nodeType === ELEMENT_NODE) {\n            if (nextNode === this.#node) {\n              bool = true;\n            } else {\n              bool = this.#node.contains(nextNode);\n            }\n          } else {\n            bool = true;\n          }\n          if (bool) {\n            for (const pendingItem of pendingItems) {\n              const { leaves } = pendingItem.get('twig');\n              const matched = this._matchLeaves(leaves, nextNode, {\n                warn: this.#warn\n              });\n              if (matched) {\n                const index = pendingItem.get('index');\n                this.#ast[index].filtered = true;\n                this.#ast[index].find = true;\n                this.#nodes[index].push(nextNode);\n              }\n            }\n          }\n          if (nextNode !== walker.currentNode) {\n            nextNode = this._traverse(nextNode, walker);\n          }\n          nextNode = walker.nextNode();\n        }\n      }\n    } else {\n      let i = 0;\n      for (const { branch } of ast) {\n        const twig = branch[branch.length - 1];\n        const complex = branch.length > 1;\n        const {\n          compound, filtered, nodes\n        } = this._findEntryNodes(twig, targetType, complex);\n        if (nodes.length) {\n          this.#ast[i].find = true;\n          this.#nodes[i] = nodes;\n        }\n        this.#ast[i].dir = DIR_PREV;\n        this.#ast[i].filtered = filtered || !compound;\n        i++;\n      }\n    }\n    return [\n      this.#ast,\n      this.#nodes\n    ];\n  }\n\n  /**\n   * get combined nodes\n   * @private\n   * @param {object} twig - twig\n   * @param {object} nodes - collection of nodes\n   * @param {string} dir - direction\n   * @returns {Array.<object>} - collection of matched nodes\n   */\n  _getCombinedNodes(twig, nodes, dir) {\n    const arr = [];\n    for (const node of nodes) {\n      const matched = this._matchCombinator(twig, node, {\n        dir,\n        warn: this.#warn\n      });\n      if (matched.size) {\n        arr.push(...matched);\n      }\n    }\n    if (arr.length) {\n      return new Set(arr);\n    }\n    return new Set();\n  }\n\n  /**\n   * match node to next direction\n   * @private\n   * @param {Array} branch - branch\n   * @param {Set.<object>} nodes - collection of Element node\n   * @param {object} opt - option\n   * @param {object} opt.combo - combo\n   * @returns {?object} - matched node\n   */\n  _matchNodeNext(branch, nodes, opt) {\n    const { combo, index } = opt;\n    const { combo: nextCombo, leaves } = branch[index];\n    const twig = {\n      combo,\n      leaves\n    };\n    const nextNodes = this._getCombinedNodes(twig, nodes, DIR_NEXT);\n    let res;\n    if (nextNodes.size) {\n      if (index === branch.length - 1) {\n        const [nextNode] = sortNodes(nextNodes);\n        res = nextNode;\n      } else {\n        res = this._matchNodeNext(branch, nextNodes, {\n          combo: nextCombo,\n          index: index + 1\n        });\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match node to previous direction\n   * @private\n   * @param {Array} branch - branch\n   * @param {object} node - Element node\n   * @param {object} opt - option\n   * @param {number} opt.index - index\n   * @returns {?object} - node\n   */\n  _matchNodePrev(branch, node, opt) {\n    const { index } = opt;\n    const twig = branch[index];\n    const nodes = new Set([node]);\n    const nextNodes = this._getCombinedNodes(twig, nodes, DIR_PREV);\n    let res;\n    if (nextNodes.size) {\n      if (index === 0) {\n        res = node;\n      } else {\n        for (const nextNode of nextNodes) {\n          const matched = this._matchNodePrev(branch, nextNode, {\n            index: index - 1\n          });\n          if (matched) {\n            return node;\n          }\n        }\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * find matched nodes\n   * @private\n   * @param {string} targetType - target type\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _find(targetType) {\n    if (targetType === TARGET_ALL || targetType === TARGET_FIRST) {\n      this._prepareQuerySelectorWalker();\n    }\n    const [[...branches], nodes] = this._collectNodes(targetType);\n    const l = branches.length;\n    let res = new Set();\n    for (let i = 0; i < l; i++) {\n      const { branch, collected, dir, find } = branches[i];\n      const branchLen = branch.length;\n      if (branchLen && find) {\n        const entryNodes = nodes[i];\n        const entryNodesLen = entryNodes.length;\n        const lastIndex = branchLen - 1;\n        if (lastIndex === 0) {\n          if ((targetType === TARGET_ALL || targetType === TARGET_FIRST) &&\n              this.#node.nodeType === ELEMENT_NODE) {\n            for (let j = 0; j < entryNodesLen; j++) {\n              const node = entryNodes[j];\n              if (node !== this.#node && this.#node.contains(node)) {\n                res.add(node);\n                if (targetType !== TARGET_ALL) {\n                  break;\n                }\n              }\n            }\n          } else if (targetType === TARGET_ALL) {\n            if (res.size) {\n              const n = [...res];\n              res = new Set([...n, ...entryNodes]);\n              this.#sort = true;\n            } else {\n              res = new Set(entryNodes);\n            }\n          } else {\n            const [node] = entryNodes;\n            res.add(node);\n          }\n        } else if (targetType === TARGET_ALL) {\n          if (dir === DIR_NEXT) {\n            let { combo } = branch[0];\n            for (const node of entryNodes) {\n              let nextNodes = new Set([node]);\n              for (let j = 1; j < branchLen; j++) {\n                const { combo: nextCombo, leaves } = branch[j];\n                const twig = {\n                  combo,\n                  leaves\n                };\n                nextNodes = this._getCombinedNodes(twig, nextNodes, dir);\n                if (nextNodes.size) {\n                  if (j === lastIndex) {\n                    if (res.size) {\n                      const n = [...res];\n                      res = new Set([...n, ...nextNodes]);\n                      this.#sort = true;\n                    } else {\n                      res = nextNodes;\n                    }\n                  } else {\n                    combo = nextCombo;\n                  }\n                } else {\n                  break;\n                }\n              }\n            }\n          } else {\n            for (const node of entryNodes) {\n              let nextNodes = new Set([node]);\n              for (let j = lastIndex - 1; j >= 0; j--) {\n                const twig = branch[j];\n                nextNodes = this._getCombinedNodes(twig, nextNodes, dir);\n                if (nextNodes.size) {\n                  if (j === 0) {\n                    res.add(node);\n                    if (branchLen > 1 && res.size > 1) {\n                      this.#sort = true;\n                    }\n                  }\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n        } else if (targetType === TARGET_FIRST && dir === DIR_NEXT) {\n          const { combo: entryCombo } = branch[0];\n          let matched;\n          for (const node of entryNodes) {\n            matched = this._matchNodeNext(branch, new Set([node]), {\n              combo: entryCombo,\n              index: 1\n            });\n            if (matched) {\n              res.add(matched);\n              break;\n            }\n          }\n          if (!matched && !collected) {\n            const { leaves: entryLeaves } = branch[0];\n            const [entryNode] = entryNodes;\n            let refNode = this._findNode(entryLeaves, {\n              node: entryNode\n            });\n            while (refNode) {\n              matched = this._matchNodeNext(branch, new Set([refNode]), {\n                combo: entryCombo,\n                index: 1\n              });\n              if (matched) {\n                res.add(matched);\n                break;\n              }\n              refNode = this._findNode(entryLeaves, {\n                node: refNode\n              });\n            }\n          }\n        } else {\n          let matched;\n          for (const node of entryNodes) {\n            matched = this._matchNodePrev(branch, node, {\n              index: lastIndex - 1\n            });\n            if (matched) {\n              res.add(node);\n              break;\n            }\n          }\n          if (!matched && !collected && targetType === TARGET_FIRST) {\n            const { leaves: entryLeaves } = branch[lastIndex];\n            const [entryNode] = entryNodes;\n            let refNode = this._findNode(entryLeaves, {\n              node: entryNode\n            });\n            while (refNode) {\n              matched = this._matchNodePrev(branch, refNode, {\n                index: lastIndex - 1\n              });\n              if (matched) {\n                res.add(refNode);\n                break;\n              }\n              refNode = this._findNode(entryLeaves, {\n                node: refNode\n              });\n            }\n          }\n        }\n      }\n    }\n    return res;\n  }\n\n  /**\n   * matches\n   * @param {string} selector - CSS selector\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {boolean} - `true` if matched `false` otherwise\n   */\n  matches(selector, node, opt) {\n    let res;\n    try {\n      if (node?.nodeType !== ELEMENT_NODE) {\n        const msg = `Unexpected node ${node?.nodeName}`;\n        throw new TypeError(msg);\n      }\n      if (filterSelector(selector)) {\n        res = this.#nwsapi.match(selector, node);\n      } else {\n        this._setup(selector, node, opt);\n        const nodes = this._find(TARGET_SELF);\n        res = nodes.size;\n      }\n    } catch (e) {\n      this._onError(e);\n    }\n    return !!res;\n  }\n\n  /**\n   * closest\n   * @param {string} selector - CSS selector\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {?object} - matched node\n   */\n  closest(selector, node, opt) {\n    let res;\n    try {\n      if (node?.nodeType !== ELEMENT_NODE) {\n        const msg = `Unexpected node ${node?.nodeName}`;\n        throw new TypeError(msg);\n      }\n      if (filterSelector(selector)) {\n        res = this.#nwsapi.closest(selector, node);\n      } else {\n        this._setup(selector, node, opt);\n        const nodes = this._find(TARGET_LINEAL);\n        if (nodes.size) {\n          let refNode = this.#node;\n          while (refNode) {\n            if (nodes.has(refNode)) {\n              res = refNode;\n              break;\n            }\n            refNode = refNode.parentNode;\n          }\n        }\n      }\n    } catch (e) {\n      this._onError(e);\n    }\n    return res ?? null;\n  }\n\n  /**\n   * query selector\n   * @param {string} selector - CSS selector\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} opt - options\n   * @returns {?object} - matched node\n   */\n  querySelector(selector, node, opt) {\n    let res;\n    try {\n      this._setup(selector, node, opt);\n      if (this.#document === this.#content && !this.#descendant &&\n          filterSelector(selector)) {\n        res = this.#nwsapi.first(selector, node);\n      } else {\n        const nodes = this._find(TARGET_FIRST);\n        nodes.delete(this.#node);\n        if (nodes.size) {\n          [res] = sortNodes(nodes);\n        }\n      }\n    } catch (e) {\n      this._onError(e);\n    }\n    return res ?? null;\n  }\n\n  /**\n   * query selector all\n   * NOTE: returns Array, not NodeList\n   * @param {string} selector - CSS selector\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} opt - options\n   * @returns {Array.<object|undefined>} - collection of matched nodes\n   */\n  querySelectorAll(selector, node, opt) {\n    let res;\n    try {\n      this._setup(selector, node, opt);\n      if (this.#document === this.#content && !this.#descendant &&\n          filterSelector(selector)) {\n        res = this.#nwsapi.select(selector, node);\n      } else {\n        const nodes = this._find(TARGET_ALL);\n        nodes.delete(this.#node);\n        if (nodes.size) {\n          if (this.#sort) {\n            res = sortNodes(nodes);\n          } else {\n            res = [...nodes];\n          }\n        }\n      }\n    } catch (e) {\n      this._onError(e);\n    }\n    return res ?? [];\n  }\n};\n"],
  "mappings": "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",
  "names": ["finder_exports", "__export", "Finder", "__toCommonJS", "import_is_potential_custom_element_name", "import_nwsapi", "import_dom_util", "import_matcher", "import_parser", "import_constant", "DIR_NEXT", "DIR_PREV", "TARGET_ALL", "TARGET_FIRST", "TARGET_LINEAL", "TARGET_SELF", "#ast", "#cache", "#content", "#descendant", "#document", "#event", "#node", "#nodes", "#noexcept", "#nwsapi", "#qswalker", "#results", "#root", "#shadow", "#sort", "#walker", "#walkers", "#warn", "#window", "window", "nwsapi", "e", "selector", "node", "opt", "event", "noexcept", "warn", "nodes", "ast", "cachedItem", "item", "i", "cssAst", "branches", "descendant", "items", "branch", "leaves", "nextItem", "msg", "itemName", "walker", "refNode", "current", "anb", "a", "b", "reverse", "parentNode", "matched", "selectorBranches", "l", "selectorNodes", "bool", "nth", "j", "m", "localName", "prefix", "itemLocalName", "itemPrefix", "nthName", "nthIdentName", "anbMap", "leaf", "leafType", "combo", "twigLeaves", "itemType", "twig", "nextNode", "astData", "astName", "twigBranches", "res", "forgive", "lastIndex", "nextNodes", "arr", "astChildren", "selectors", "css", "leavesSet", "regAnchor", "regFormCtrl", "regFormValidity", "regInteract", "regTypeCheck", "regTypeDate", "regTypeRange", "regTypeText", "href", "origin", "pathname", "attrURL", "target", "type", "buttons", "hash", "id", "focus", "display", "visibility", "active", "isCustomElementName", "parent", "targetNode", "nodeName", "checked", "regTypeReset", "regTypeSubmit", "form", "isMultiple", "defaultOpt", "inputType", "node1", "node2", "attr", "host", "astType", "attributes", "nodeType", "result", "regForm", "save", "leafName", "compound", "filterLeaves", "baseNode", "pending", "comboName", "dir", "matchedNode", "filtered", "complex", "targetType", "collected", "pendingItems", "branchLen", "firstTwig", "firstCombo", "firstName", "firstType", "lastTwig", "lastName", "lastType", "pendingItem", "index", "nextCombo", "find", "entryNodes", "entryNodesLen", "n", "entryCombo", "entryLeaves", "entryNode"]
}
