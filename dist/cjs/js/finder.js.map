{
  "version": 3,
  "sources": ["../../../src/js/finder.js"],
  "sourcesContent": ["/**\n * finder.js\n */\n\n/* import */\nimport { Matcher } from './matcher.js';\nimport {\n  generateCSS, parseSelector, sortAST, unescapeSelector, walkAST\n} from './parser.js';\nimport {\n  isContentEditable, isCustomElement, isFocusVisible, isFocusable,\n  isInShadowTree, isVisible, resolveContent, sortNodes, traverseNode\n} from './utility.js';\n\n/* constants */\nimport {\n  ATTR_SELECTOR, BIT_01, CLASS_SELECTOR, COMBINATOR, DOCUMENT_FRAGMENT_NODE,\n  DOCUMENT_NODE, ELEMENT_NODE, EMPTY, ID_SELECTOR, NOT_SUPPORTED_ERR,\n  PS_CLASS_SELECTOR, PS_ELEMENT_SELECTOR, REG_INPUT_TYPE, REG_LOGICAL,\n  SHOW_ALL, SYNTAX_ERR, TARGET_ALL, TARGET_FIRST, TARGET_LINEAL, TARGET_SELF,\n  TEXT_NODE, TYPE_SELECTOR, WALKER_FILTER\n} from './constant.js';\nconst DIR_NEXT = 'next';\nconst DIR_PREV = 'prev';\nconst KEY_TAB = 'Tab';\nconst REG_ANCHOR = /^a(?:rea)?$/;\nconst REG_FORM_CTRL =\n  /^(?:button|fieldset|input|optgroup|option|select|textarea)$/;\nconst REG_FORM_VALID = /^(?:button|form|input|select|textarea)$/;\nconst REG_INTERACT = /^(?:details|dialog)$/;\nconst REG_SHADOW_HOST = /^host(?:-context)?$/;\nconst REG_TYPE_CHECK = /^(?:checkbox|radio)$/;\nconst REG_TYPE_RANGE = /^(?:date(?:time-local)?|month|number|range|time|week)$/;\nconst REG_TYPE_RESET = /^(?:button|reset)$/;\nconst REG_TYPE_SUBMIT = /^(?:image|submit)$/;\nconst REG_TYPE_TEXT = /^(?:email|number|password|search|tel|text|url)$/;\n\n/**\n * Finder\n * NOTE: #ast[i] corresponds to #nodes[i]\n * #ast: Array<Ast | undefined>\n * #nodes: Array<Nodes>\n * Ast: {\n *   branch: Array<Branch | undefined>,\n *   collected: boolean,\n *   dir: string | null,\n *   filtered: boolean,\n *   find: boolean\n * }\n * Branch: Array<Twig>\n * Twig: {\n *   combo: Leaf | null,\n *   leaves: Array<Leaf>\n * }\n * Leaf: {\n *   children: Array<Leaf | undefined> | null,\n *   loc: null,\n *   type: string\n * }\n * Nodes: Array<HTMLElement | undefined>\n */\nexport class Finder {\n  /* private fields */\n  #ast;\n  #astCache;\n  #descendant;\n  #document;\n  #documentCache;\n  #event;\n  #focus;\n  #invalidate;\n  #invalidateResults;\n  #matcher;\n  #node;\n  #nodes;\n  #noexcept;\n  #qswalker;\n  #results;\n  #root;\n  #shadow;\n  #walker;\n  #walkers;\n  #warn;\n  #window;\n\n  /**\n   * construct\n   * @param {object} window - window\n   */\n  constructor(window) {\n    this.#window = window;\n    this.#matcher = new Matcher();\n    this.#astCache = new WeakMap();\n    this.#documentCache = new WeakMap();\n    this.#invalidateResults = new WeakMap();\n    this.#results = new WeakMap();\n    this.#event = null;\n    this.#focus = null;\n    this._registerEventListeners();\n  }\n\n  /**\n   * handle error\n   * @param {Error} e - Error\n   * @param {object} opt - options\n   * @throws Error\n   * @returns {void}\n   */\n  onError(e, opt = {}) {\n    const noexcept = opt.noexcept ?? this.#noexcept;\n    if (!noexcept) {\n      if (e instanceof DOMException ||\n          e instanceof this.#window.DOMException) {\n        if (e.name === NOT_SUPPORTED_ERR) {\n          if (this.#warn) {\n            console.warn(e.message);\n          }\n        } else {\n          throw new this.#window.DOMException(e.message, e.name);\n        }\n      } else if (e.name in this.#window) {\n        throw new this.#window[e.name](e.message);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * setup finder\n   * @param {string} selector - CSS selector\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} opt - options\n   * @param {object} [opt.event] - MouseEvent, KeyboardEvent\n   * @param {boolean} [opt.noexcept] - no exception\n   * @param {boolean} [opt.warn] - console warn\n   * @returns {object} - node\n   */\n  setup(selector, node, opt = {}) {\n    const { event, noexcept, warn } = opt;\n    this.#noexcept = !!noexcept;\n    this.#warn = !!warn;\n    this.#node = node;\n    [this.#document, this.#root, this.#walker] = resolveContent(node);\n    this.#shadow = isInShadowTree(node);\n    [this.#ast, this.#nodes] = this._correspond(selector);\n    this.#invalidateResults = new WeakMap();\n    this.#walkers = new WeakMap();\n    this._setEvent(event);\n    return node;\n  }\n\n  /**\n   * register event listeners\n   * @private\n   * @returns {Array.<void>} - results\n   */\n  _registerEventListeners() {\n    const opt = {\n      capture: true,\n      passive: true\n    };\n    const func = [];\n    const mouseKeys = ['mouseover', 'mousedown', 'mouseup', 'mouseout'];\n    for (const key of mouseKeys) {\n      func.push(this.#window.addEventListener(key, evt => {\n        this.#event = evt;\n      }, opt));\n    }\n    const keyboardKeys = ['keydown', 'keyup'];\n    for (const key of keyboardKeys) {\n      func.push(this.#window.addEventListener(key, evt => {\n        if (evt.key === KEY_TAB) {\n          this.#event = evt;\n        }\n      }, opt));\n    }\n    func.push(this.#window.addEventListener('focusin', evt => {\n      this.#focus = evt;\n    }, opt));\n    return func;\n  }\n\n  /**\n   * set event\n   * @private\n   * @param {object} event - instance of KeyboardEvent, MouseEvent\n   * @returns {object} - event\n   */\n  _setEvent(event) {\n    // NOTE: PointerEvent not implemented in jsdom\n    if (event instanceof this.#window.KeyboardEvent ||\n        event instanceof this.#window.MouseEvent) {\n      this.#event = event;\n    }\n    return this.#event;\n  }\n\n  /**\n   * correspond ast and nodes\n   * @private\n   * @param {string} selector - CSS selector\n   * @returns {Array.<Array.<object|undefined>>} - array of ast and nodes\n   */\n  _correspond(selector) {\n    const nodes = [];\n    this.#descendant = false;\n    this.#invalidate = false;\n    let ast;\n    if (this.#documentCache.has(this.#document)) {\n      const cachedItem = this.#documentCache.get(this.#document);\n      if (cachedItem && cachedItem.has(`${selector}`)) {\n        const item = cachedItem.get(`${selector}`);\n        ast = item.ast;\n        this.#descendant = item.descendant;\n        this.#invalidate = item.invalidate;\n      }\n    }\n    if (ast) {\n      const l = ast.length;\n      for (let i = 0; i < l; i++) {\n        ast[i].collected = false;\n        ast[i].dir = null;\n        ast[i].filtered = false;\n        ast[i].find = false;\n        nodes[i] = [];\n      }\n    } else {\n      let cssAst;\n      try {\n        cssAst = parseSelector(selector);\n      } catch (e) {\n        this.onError(e);\n      }\n      const {\n        branches, info: { hasHasPseudoFunc, hasNthChildOfSelector }\n      } = walkAST(cssAst);\n      let invalidate = !!(hasHasPseudoFunc || hasNthChildOfSelector);\n      let descendant = false;\n      let i = 0;\n      ast = [];\n      for (const [...items] of branches) {\n        const branch = [];\n        let item = items.shift();\n        if (item && item.type !== COMBINATOR) {\n          const leaves = new Set();\n          while (item) {\n            if (item.type === COMBINATOR) {\n              const [nextItem] = items;\n              if (nextItem.type === COMBINATOR) {\n                throw new DOMException(`Invalid selector ${selector}`,\n                  SYNTAX_ERR);\n              }\n              const itemName = item.name;\n              if (/^[\\s>]$/.test(itemName)) {\n                descendant = true;\n              } else {\n                invalidate = true;\n              }\n              branch.push({\n                combo: item,\n                leaves: sortAST(leaves)\n              });\n              leaves.clear();\n            } else if (item) {\n              let { name: itemName } = item;\n              if (itemName && typeof itemName === 'string') {\n                itemName = unescapeSelector(itemName);\n                if (typeof itemName === 'string' && itemName !== item.name) {\n                  item.name = itemName;\n                }\n                if (/[|:]/.test(itemName)) {\n                  item.namespace = true;\n                }\n              }\n              leaves.add(item);\n            }\n            if (items.length) {\n              item = items.shift();\n            } else {\n              branch.push({\n                combo: null,\n                leaves: sortAST(leaves)\n              });\n              leaves.clear();\n              break;\n            }\n          }\n        }\n        ast.push({\n          branch,\n          collected: false,\n          dir: null,\n          filtered: false,\n          find: false\n        });\n        nodes[i] = [];\n        i++;\n      }\n      let cachedItem;\n      if (this.#documentCache.has(this.#document)) {\n        cachedItem = this.#documentCache.get(this.#document);\n      } else {\n        cachedItem = new Map();\n      }\n      cachedItem.set(`${selector}`, {\n        ast,\n        descendant,\n        invalidate\n      });\n      this.#documentCache.set(this.#document, cachedItem);\n      this.#descendant = descendant;\n      this.#invalidate = invalidate;\n    }\n    return [\n      ast,\n      nodes\n    ];\n  }\n\n  /**\n   * create tree walker\n   * @private\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @returns {object} - tree walker\n   */\n  _createTreeWalker(node) {\n    let walker;\n    if (this.#walkers.has(node)) {\n      walker = this.#walkers.get(node);\n    } else {\n      walker = this.#document.createTreeWalker(node, WALKER_FILTER);\n      this.#walkers.set(node, walker);\n    }\n    return walker;\n  }\n\n  /**\n   * prepare querySelector walker\n   * @private\n   * @returns {object} - tree walker\n   */\n  _prepareQuerySelectorWalker() {\n    this.#qswalker = this._createTreeWalker(this.#node);\n    return this.#qswalker;\n  }\n\n  /**\n   * collect nth child\n   * @private\n   * @param {object} anb - An+B options\n   * @param {number} anb.a - a\n   * @param {number} anb.b - b\n   * @param {boolean} [anb.reverse] - reverse order\n   * @param {object} [anb.selector] - AST\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _collectNthChild(anb, node, opt) {\n    const { a, b, reverse, selector } = anb;\n    const { parentNode } = node;\n    const matched = new Set();\n    let selectorBranches;\n    if (selector) {\n      if (this.#astCache.has(selector)) {\n        selectorBranches = this.#astCache.get(selector);\n      } else {\n        const { branches } = walkAST(selector);\n        selectorBranches = branches;\n        this.#astCache.set(selector, selectorBranches);\n      }\n    }\n    if (parentNode) {\n      const walker = this.#walker;\n      let refNode = traverseNode(parentNode, walker);\n      refNode = walker.firstChild();\n      let l = 0;\n      while (refNode) {\n        l++;\n        refNode = walker.nextSibling();\n      }\n      const selectorNodes = new Set();\n      if (selectorBranches) {\n        refNode = traverseNode(parentNode, walker);\n        refNode = walker.firstChild();\n        while (refNode) {\n          if (isVisible(refNode)) {\n            let bool;\n            for (const leaves of selectorBranches) {\n              bool = this._matchLeaves(leaves, refNode, opt);\n              if (!bool) {\n                break;\n              }\n            }\n            if (bool) {\n              selectorNodes.add(refNode);\n            }\n          }\n          refNode = walker.nextSibling();\n        }\n      }\n      // :first-child, :last-child, :nth-child(b of S), :nth-last-child(b of S)\n      if (a === 0) {\n        if (b > 0 && b <= l) {\n          if (selectorNodes.size) {\n            refNode = traverseNode(parentNode, walker);\n            if (reverse) {\n              refNode = walker.lastChild();\n            } else {\n              refNode = walker.firstChild();\n            }\n            let i = 0;\n            while (refNode) {\n              if (selectorNodes.has(refNode)) {\n                if (i === b - 1) {\n                  matched.add(refNode);\n                  break;\n                }\n                i++;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n            }\n          } else if (!selector) {\n            refNode = traverseNode(parentNode, walker);\n            if (reverse) {\n              refNode = walker.lastChild();\n            } else {\n              refNode = walker.firstChild();\n            }\n            let i = 0;\n            while (refNode) {\n              if (i === b - 1) {\n                matched.add(refNode);\n                break;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n              i++;\n            }\n          }\n        }\n      // :nth-child()\n      } else {\n        let nth = b - 1;\n        if (a > 0) {\n          while (nth < 0) {\n            nth += a;\n          }\n        }\n        if (nth >= 0 && nth < l) {\n          refNode = traverseNode(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let i = 0;\n          let j = a > 0 ? 0 : b - 1;\n          while (refNode) {\n            if (refNode && nth >= 0 && nth < l) {\n              if (selectorNodes.size) {\n                if (selectorNodes.has(refNode)) {\n                  if (j === nth) {\n                    matched.add(refNode);\n                    nth += a;\n                  }\n                  if (a > 0) {\n                    j++;\n                  } else {\n                    j--;\n                  }\n                }\n              } else if (i === nth) {\n                if (!selector) {\n                  matched.add(refNode);\n                }\n                nth += a;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n              i++;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n      if (reverse && matched.size > 1) {\n        const m = [...matched];\n        return new Set(m.reverse());\n      }\n    } else if (node === this.#root && (a + b) === 1) {\n      if (selectorBranches) {\n        let bool;\n        for (const leaves of selectorBranches) {\n          bool = this._matchLeaves(leaves, node, opt);\n          if (bool) {\n            break;\n          }\n        }\n        if (bool) {\n          matched.add(node);\n        }\n      } else {\n        matched.add(node);\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * collect nth of type\n   * @private\n   * @param {object} anb - An+B options\n   * @param {number} anb.a - a\n   * @param {number} anb.b - b\n   * @param {boolean} [anb.reverse] - reverse order\n   * @param {object} node - Element node\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _collectNthOfType(anb, node) {\n    const { a, b, reverse } = anb;\n    const { localName, namespaceURI, parentNode, prefix } = node;\n    const matched = new Set();\n    if (parentNode) {\n      const walker = this.#walker;\n      let refNode = traverseNode(parentNode, walker);\n      refNode = walker.firstChild();\n      let l = 0;\n      while (refNode) {\n        l++;\n        refNode = walker.nextSibling();\n      }\n      // :first-of-type, :last-of-type\n      if (a === 0) {\n        if (b > 0 && b <= l) {\n          refNode = traverseNode(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let j = 0;\n          while (refNode) {\n            const {\n              localName: itemLocalName, namespaceURI: itemNamespaceURI,\n              prefix: itemPrefix\n            } = refNode;\n            if (itemLocalName === localName && itemPrefix === prefix &&\n                itemNamespaceURI === namespaceURI) {\n              if (j === b - 1) {\n                matched.add(refNode);\n                break;\n              }\n              j++;\n            }\n            if (reverse) {\n              refNode = walker.previousSibling();\n            } else {\n              refNode = walker.nextSibling();\n            }\n          }\n        }\n      // :nth-of-type()\n      } else {\n        let nth = b - 1;\n        if (a > 0) {\n          while (nth < 0) {\n            nth += a;\n          }\n        }\n        if (nth >= 0 && nth < l) {\n          refNode = traverseNode(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let j = a > 0 ? 0 : b - 1;\n          while (refNode) {\n            const {\n              localName: itemLocalName, namespaceURI: itemNamespaceURI,\n              prefix: itemPrefix\n            } = refNode;\n            if (itemLocalName === localName && itemPrefix === prefix &&\n                itemNamespaceURI === namespaceURI) {\n              if (j === nth) {\n                matched.add(refNode);\n                nth += a;\n              }\n              if (nth < 0 || nth >= l) {\n                break;\n              } else if (a > 0) {\n                j++;\n              } else {\n                j--;\n              }\n            }\n            if (reverse) {\n              refNode = walker.previousSibling();\n            } else {\n              refNode = walker.nextSibling();\n            }\n          }\n        }\n      }\n      if (reverse && matched.size > 1) {\n        const m = [...matched];\n        return new Set(m.reverse());\n      }\n    } else if (node === this.#root && (a + b) === 1) {\n      matched.add(node);\n    }\n    return matched;\n  }\n\n  /**\n   * match An+B\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - Element node\n   * @param {string} nthName - nth pseudo-class name\n   * @param {object} opt - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchAnPlusB(ast, node, nthName, opt) {\n    const {\n      nth: {\n        a,\n        b,\n        name: nthIdentName\n      },\n      selector\n    } = ast;\n    const anbMap = new Map();\n    if (nthIdentName) {\n      if (nthIdentName === 'even') {\n        anbMap.set('a', 2);\n        anbMap.set('b', 0);\n      } else if (nthIdentName === 'odd') {\n        anbMap.set('a', 2);\n        anbMap.set('b', 1);\n      }\n      if (nthName.indexOf('last') > -1) {\n        anbMap.set('reverse', true);\n      }\n    } else {\n      if (typeof a === 'string' && /-?\\d+/.test(a)) {\n        anbMap.set('a', a * 1);\n      } else {\n        anbMap.set('a', 0);\n      }\n      if (typeof b === 'string' && /-?\\d+/.test(b)) {\n        anbMap.set('b', b * 1);\n      } else {\n        anbMap.set('b', 0);\n      }\n      if (nthName.indexOf('last') > -1) {\n        anbMap.set('reverse', true);\n      }\n    }\n    if (/^nth-(?:last-)?child$/.test(nthName)) {\n      if (selector) {\n        anbMap.set('selector', selector);\n      }\n      const anb = Object.fromEntries(anbMap);\n      const nodes = this._collectNthChild(anb, node, opt);\n      return nodes;\n    } else if (/^nth-(?:last-)?of-type$/.test(nthName)) {\n      const anb = Object.fromEntries(anbMap);\n      const nodes = this._collectNthOfType(anb, node);\n      return nodes;\n    }\n    return new Set();\n  }\n\n  /**\n   * match :has() pseudo-class function\n   * @private\n   * @param {Array.<object>} astLeaves - AST leaves\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {boolean} - result\n   */\n  _matchHasPseudoFunc(astLeaves, node, opt = {}) {\n    let bool;\n    if (Array.isArray(astLeaves) && astLeaves.length) {\n      const leaves = astLeaves.map(i => i);\n      const [leaf] = leaves;\n      const { type: leafType } = leaf;\n      let combo;\n      if (leafType === COMBINATOR) {\n        combo = leaves.shift();\n      } else {\n        combo = {\n          name: ' ',\n          type: COMBINATOR\n        };\n      }\n      const twigLeaves = [];\n      while (leaves.length) {\n        const [item] = leaves;\n        const { type: itemType } = item;\n        if (itemType === COMBINATOR) {\n          break;\n        } else {\n          twigLeaves.push(leaves.shift());\n        }\n      }\n      const twig = {\n        combo,\n        leaves: twigLeaves\n      };\n      opt.dir = DIR_NEXT;\n      const nodes = this._matchCombinator(twig, node, opt);\n      if (nodes.size) {\n        if (leaves.length) {\n          for (const nextNode of nodes) {\n            bool = this._matchHasPseudoFunc(leaves, nextNode, opt);\n            if (bool) {\n              break;\n            }\n          }\n        } else {\n          bool = true;\n        }\n      }\n    }\n    return !!bool;\n  }\n\n  /**\n   * match logical pseudo-class functions - :has(), :is(), :not(), :where()\n   * @private\n   * @param {object} astData - AST data\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {?object} - matched node\n   */\n  _matchLogicalPseudoFunc(astData, node, opt = {}) {\n    const {\n      astName = '', branches = [], selector = '', twigBranches = []\n    } = astData;\n    let res;\n    if (astName === 'has') {\n      if (selector.includes(':has(')) {\n        res = null;\n      } else {\n        let bool;\n        for (const leaves of branches) {\n          bool = this._matchHasPseudoFunc(leaves, node, opt);\n          if (bool) {\n            break;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      }\n    } else {\n      const forgive = /^(?:is|where)$/.test(astName);\n      opt.forgive = forgive;\n      const l = twigBranches.length;\n      let bool;\n      for (let i = 0; i < l; i++) {\n        const branch = twigBranches[i];\n        const lastIndex = branch.length - 1;\n        const { leaves } = branch[lastIndex];\n        bool = this._matchLeaves(leaves, node, opt);\n        if (bool && lastIndex > 0) {\n          let nextNodes = new Set([node]);\n          for (let j = lastIndex - 1; j >= 0; j--) {\n            const twig = branch[j];\n            const arr = [];\n            opt.dir = DIR_PREV;\n            for (const nextNode of nextNodes) {\n              const m = this._matchCombinator(twig, nextNode, opt);\n              if (m.size) {\n                arr.push(...m);\n              }\n            }\n            if (arr.length) {\n              if (j === 0) {\n                bool = true;\n              } else {\n                nextNodes = new Set(arr);\n              }\n            } else {\n              bool = false;\n              break;\n            }\n          }\n        }\n        if (bool) {\n          break;\n        }\n      }\n      if (astName === 'not') {\n        if (!bool) {\n          res = node;\n        }\n      } else if (bool) {\n        res = node;\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match pseudo-class selector\n   * @private\n   * @see https://html.spec.whatwg.org/#pseudo-classes\n   * @param {object} ast - AST\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @param {boolean} [opt.forgive] - forgive unknown pseudo-class\n   * @param {boolean} [opt.warn] - warn unsupported pseudo-class\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchPseudoClassSelector(ast, node, opt = {}) {\n    const { children: astChildren, name: astName } = ast;\n    const { localName, parentNode } = node;\n    const {\n      forgive,\n      warn = this.#warn\n    } = opt;\n    const matched = new Set();\n    // :has(), :is(), :not(), :where()\n    if (REG_LOGICAL.test(astName)) {\n      let astData;\n      if (this.#astCache.has(ast)) {\n        astData = this.#astCache.get(ast);\n      } else {\n        const { branches } = walkAST(ast);\n        const selectors = [];\n        const twigBranches = [];\n        for (const [...leaves] of branches) {\n          for (const leaf of leaves) {\n            const css = generateCSS(leaf);\n            selectors.push(css);\n          }\n          const branch = [];\n          const leavesSet = new Set();\n          let item = leaves.shift();\n          while (item) {\n            if (item.type === COMBINATOR) {\n              branch.push({\n                combo: item,\n                leaves: [...leavesSet]\n              });\n              leavesSet.clear();\n            } else if (item) {\n              leavesSet.add(item);\n            }\n            if (leaves.length) {\n              item = leaves.shift();\n            } else {\n              branch.push({\n                combo: null,\n                leaves: [...leavesSet]\n              });\n              leavesSet.clear();\n              break;\n            }\n          }\n          twigBranches.push(branch);\n        }\n        astData = {\n          astName,\n          branches,\n          twigBranches,\n          selector: selectors.join(',')\n        };\n        this.#astCache.set(ast, astData);\n      }\n      const res = this._matchLogicalPseudoFunc(astData, node, opt);\n      if (res) {\n        matched.add(res);\n      }\n    } else if (Array.isArray(astChildren)) {\n      // :nth-child(), :nth-last-child(), nth-of-type(), :nth-last-of-type()\n      if (/^nth-(?:last-)?(?:child|of-type)$/.test(astName)) {\n        const [branch] = astChildren;\n        const nodes = this._matchAnPlusB(branch, node, astName, opt);\n        return nodes;\n      } else {\n        switch (astName) {\n          // :dir(), :lang()\n          case 'dir':\n          case 'lang': {\n            const res = this.#matcher.matchSelector(ast, node, opt, true);\n            if (res) {\n              matched.add(res);\n            }\n            break;\n          }\n          // :state()\n          case 'state': {\n            if (isCustomElement(node)) {\n              const [{ value: stateValue }] = astChildren;\n              if (stateValue) {\n                if (node[stateValue]) {\n                  matched.add(node);\n                } else {\n                  for (const i in node) {\n                    const prop = node[i];\n                    if (prop instanceof this.#window.ElementInternals) {\n                      if (prop?.states?.has(stateValue)) {\n                        matched.add(node);\n                      }\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n            break;\n          }\n          case 'current':\n          case 'nth-col':\n          case 'nth-last-col': {\n            if (warn) {\n              throw new DOMException(`Unsupported pseudo-class :${astName}()`,\n                NOT_SUPPORTED_ERR);\n            }\n            break;\n          }\n          case 'host':\n          case 'host-context': {\n            // ignore\n            break;\n          }\n          // dropped from CSS Selectors 3\n          case 'contains': {\n            if (warn) {\n              throw new DOMException(`Unknown pseudo-class :${astName}()`,\n                NOT_SUPPORTED_ERR);\n            }\n            break;\n          }\n          default: {\n            if (!forgive) {\n              throw new DOMException(`Unknown pseudo-class :${astName}()`,\n                SYNTAX_ERR);\n            }\n          }\n        }\n      }\n    } else {\n      switch (astName) {\n        case 'any-link':\n        case 'link': {\n          if (REG_ANCHOR.test(localName) && node.hasAttribute('href')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'local-link': {\n          if (REG_ANCHOR.test(localName) && node.hasAttribute('href')) {\n            const { href, origin, pathname } = new URL(this.#document.URL);\n            const attrURL = new URL(node.getAttribute('href'), href);\n            if (attrURL.origin === origin && attrURL.pathname === pathname) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'visited': {\n          // prevent fingerprinting\n          break;\n        }\n        case 'hover': {\n          const { target, type } = this.#event ?? {};\n          if (/^(?:mouse|pointer)(?:down|over|up)$/.test(type) &&\n              node.contains(target)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'active': {\n          const { buttons, target, type } = this.#event ?? {};\n          if (/(?:mouse|pointer)down/.test(type) && buttons & BIT_01 &&\n              node.contains(target)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'target': {\n          const { hash } = new URL(this.#document.URL);\n          if (node.id && hash === `#${node.id}` &&\n              this.#document.contains(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'target-within': {\n          const { hash } = new URL(this.#document.URL);\n          if (hash) {\n            const id = hash.replace(/^#/, '');\n            let current = this.#document.getElementById(id);\n            while (current) {\n              if (current === node) {\n                matched.add(node);\n                break;\n              }\n              current = current.parentNode;\n            }\n          }\n          break;\n        }\n        case 'scope': {\n          if (this.#node.nodeType === ELEMENT_NODE) {\n            if (!this.#shadow && node === this.#node) {\n              matched.add(node);\n            }\n          } else if (node === this.#document.documentElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'focus': {\n          if (node === this.#document.activeElement && node.tabIndex >= 0 &&\n              isFocusable(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'focus-visible': {\n          if (node === this.#document.activeElement && node.tabIndex >= 0) {\n            let bool;\n            if (isFocusVisible(node)) {\n              bool = true;\n            } else {\n              const { target: eventTarget, type } = this.#event ?? {};\n              const { target: focusTarget, relatedTarget } = this.#focus ?? {};\n              if (/^key(?:down|up)$/.test(type) && node.contains(eventTarget)) {\n                bool = true;\n              } else if (relatedTarget && isFocusVisible(relatedTarget) &&\n                         node.contains(focusTarget)) {\n                bool = true;\n              }\n            }\n            if (bool && isFocusable(node)) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'focus-within': {\n          let bool;\n          let current = this.#document.activeElement;\n          if (current.tabIndex >= 0) {\n            while (current) {\n              if (current === node) {\n                bool = true;\n                break;\n              }\n              current = current.parentNode;\n            }\n          }\n          if (bool && isFocusable(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'open': {\n          if (REG_INTERACT.test(localName) && node.hasAttribute('open')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'closed': {\n          if (REG_INTERACT.test(localName) && !node.hasAttribute('open')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'disabled': {\n          if (REG_FORM_CTRL.test(localName) ||\n              isCustomElement(node, { formAssociated: true })) {\n            if (node.disabled || node.hasAttribute('disabled')) {\n              matched.add(node);\n            } else if (node.localName === 'option') {\n              if (parentNode.localName === 'optgroup' &&\n                  (parentNode.disabled ||\n                   parentNode.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n            } else if (node.localName !== 'optgroup') {\n              let bool;\n              let parent = parentNode;\n              while (parent) {\n                if (parent.localName === 'fieldset' &&\n                    (parent.disabled || parent.hasAttribute('disabled'))) {\n                  const walker = this.#walker;\n                  let refNode = traverseNode(parent, walker);\n                  refNode = walker.firstChild();\n                  while (refNode) {\n                    if (refNode.localName === 'legend') {\n                      break;\n                    }\n                    refNode = walker.nextSibling();\n                  }\n                  if (refNode) {\n                    if (!refNode.contains(node)) {\n                      bool = true;\n                    }\n                  } else {\n                    bool = true;\n                  }\n                  break;\n                } else if (parent.localName === 'form') {\n                  break;\n                } else if (parent.parentNode?.nodeType === ELEMENT_NODE) {\n                  if (parent.parentNode.localName === 'form') {\n                    break;\n                  } else {\n                    parent = parent.parentNode;\n                  }\n                } else {\n                  break;\n                }\n              }\n              if (bool) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'enabled': {\n          if ((REG_FORM_CTRL.test(localName) ||\n               isCustomElement(node, { formAssociated: true })) &&\n              !(node.disabled && node.hasAttribute('disabled'))) {\n            if (node.localName === 'optgroup') {\n              matched.add(node);\n            } else if (node.localName === 'option') {\n              if (parentNode.localName !== 'optgroup' ||\n                  !(parentNode.disabled ||\n                    parentNode.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n            } else {\n              let bool;\n              let parent = parentNode;\n              while (parent) {\n                if (parent.localName === 'fieldset' &&\n                    (parent.disabled || parent.hasAttribute('disabled'))) {\n                  const walker = this.#walker;\n                  let refNode = traverseNode(parent, walker);\n                  refNode = walker.firstChild();\n                  while (refNode) {\n                    if (refNode.localName === 'legend') {\n                      break;\n                    }\n                    refNode = walker.nextSibling();\n                  }\n                  if (refNode) {\n                    if (!refNode.contains(node)) {\n                      bool = true;\n                    }\n                  } else {\n                    bool = true;\n                  }\n                  break;\n                } else if (parent.localName === 'form') {\n                  break;\n                } else if (parent.parentNode?.nodeType === ELEMENT_NODE) {\n                  if (parent.parentNode.localName === 'form') {\n                    break;\n                  } else {\n                    parent = parent.parentNode;\n                  }\n                } else {\n                  break;\n                }\n              }\n              if (!bool) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'read-only': {\n          switch (localName) {\n            case 'textarea': {\n              if (node.readonly || node.hasAttribute('readonly') ||\n                  node.disabled || node.hasAttribute('disabled')) {\n                matched.add(node);\n              }\n              break;\n            }\n            case 'input': {\n              if ((!node.type || REG_INPUT_TYPE.test(node.type)) &&\n                  (node.readonly || node.hasAttribute('readonly') ||\n                   node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            default: {\n              if (!isContentEditable(node)) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'read-write': {\n          switch (localName) {\n            case 'textarea': {\n              if (!(node.readonly || node.hasAttribute('readonly') ||\n                    node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            case 'input': {\n              if ((!node.type || REG_INPUT_TYPE.test(node.type)) &&\n                  !(node.readonly || node.hasAttribute('readonly') ||\n                    node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            default: {\n              if (isContentEditable(node)) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'placeholder-shown': {\n          let placeholder;\n          if (node.placeholder) {\n            placeholder = node.placeholder;\n          } else if (node.hasAttribute('placeholder')) {\n            placeholder = node.getAttribute('placeholder');\n          }\n          if (typeof placeholder === 'string' && !/[\\r\\n]/.test(placeholder)) {\n            let targetNode;\n            if (localName === 'textarea') {\n              targetNode = node;\n            } else if (localName === 'input') {\n              if (node.hasAttribute('type')) {\n                if (REG_TYPE_TEXT.test(node.getAttribute('type'))) {\n                  targetNode = node;\n                }\n              } else {\n                targetNode = node;\n              }\n            }\n            if (targetNode && node.value === '') {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'checked': {\n          if ((node.checked && localName === 'input' &&\n               node.hasAttribute('type') &&\n               REG_TYPE_CHECK.test(node.getAttribute('type'))) ||\n              (node.selected && localName === 'option')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'indeterminate': {\n          if ((node.indeterminate && localName === 'input' &&\n               node.type === 'checkbox') ||\n              (localName === 'progress' && !node.hasAttribute('value'))) {\n            matched.add(node);\n          } else if (localName === 'input' && node.type === 'radio' &&\n                     !node.hasAttribute('checked')) {\n            const nodeName = node.name;\n            let parent = node.parentNode;\n            while (parent) {\n              if (parent.localName === 'form') {\n                break;\n              }\n              parent = parent.parentNode;\n            }\n            if (!parent) {\n              parent = this.#document.documentElement;\n            }\n            const items = parent.getElementsByTagName('input');\n            const l = items.length;\n            let checked;\n            for (let i = 0; i < l; i++) {\n              const item = items[i];\n              if (item.getAttribute('type') === 'radio') {\n                if (nodeName) {\n                  if (item.getAttribute('name') === nodeName) {\n                    checked = !!item.checked;\n                  }\n                } else if (!item.hasAttribute('name')) {\n                  checked = !!item.checked;\n                }\n                if (checked) {\n                  break;\n                }\n              }\n            }\n            if (!checked) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'default': {\n          // button[type=\"submit\"], input[type=\"submit\"], input[type=\"image\"]\n          if ((localName === 'button' &&\n               !(node.hasAttribute('type') &&\n                 REG_TYPE_RESET.test(node.getAttribute('type')))) ||\n              (localName === 'input' && node.hasAttribute('type') &&\n               REG_TYPE_SUBMIT.test(node.getAttribute('type')))) {\n            let form = node.parentNode;\n            while (form) {\n              if (form.localName === 'form') {\n                break;\n              }\n              form = form.parentNode;\n            }\n            if (form) {\n              const walker = this.#walker;\n              let nextNode = traverseNode(form, walker);\n              nextNode = walker.firstChild();\n              while (nextNode && form.contains(nextNode)) {\n                const nodeName = nextNode.localName;\n                let m;\n                if (nodeName === 'button') {\n                  m = !(nextNode.hasAttribute('type') &&\n                    REG_TYPE_RESET.test(nextNode.getAttribute('type')));\n                } else if (nodeName === 'input') {\n                  m = nextNode.hasAttribute('type') &&\n                    REG_TYPE_SUBMIT.test(nextNode.getAttribute('type'));\n                }\n                if (m) {\n                  if (nextNode === node) {\n                    matched.add(node);\n                  }\n                  break;\n                }\n                nextNode = walker.nextNode();\n              }\n            }\n          // input[type=\"checkbox\"], input[type=\"radio\"]\n          } else if (localName === 'input' && node.hasAttribute('type') &&\n                     REG_TYPE_CHECK.test(node.getAttribute('type')) &&\n                     node.hasAttribute('checked')) {\n            matched.add(node);\n          // option\n          } else if (localName === 'option' && node.hasAttribute('selected')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'valid': {\n          if (REG_FORM_VALID.test(localName)) {\n            if (node.checkValidity()) {\n              if (node.maxLength >= 0) {\n                if (node.maxLength >= node.value.length) {\n                  matched.add(node);\n                }\n              } else {\n                matched.add(node);\n              }\n            }\n          } else if (localName === 'fieldset') {\n            const walker = this.#walker;\n            let refNode = traverseNode(node, walker);\n            refNode = walker.firstChild();\n            let bool;\n            if (!refNode) {\n              bool = true;\n            } else {\n              while (refNode && node.contains(refNode)) {\n                if (REG_FORM_VALID.test(refNode.localName)) {\n                  if (refNode.checkValidity()) {\n                    if (refNode.maxLength >= 0) {\n                      bool = refNode.maxLength >= refNode.value.length;\n                    } else {\n                      bool = true;\n                    }\n                  } else {\n                    bool = false;\n                  }\n                  if (!bool) {\n                    break;\n                  }\n                }\n                refNode = walker.nextNode();\n              }\n            }\n            if (bool) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'invalid': {\n          if (REG_FORM_VALID.test(localName)) {\n            if (node.checkValidity()) {\n              if (node.maxLength >= 0 && node.maxLength < node.value.length) {\n                matched.add(node);\n              }\n            } else {\n              matched.add(node);\n            }\n          } else if (localName === 'fieldset') {\n            const walker = this.#walker;\n            let refNode = traverseNode(node, walker);\n            refNode = walker.firstChild();\n            let bool;\n            if (!refNode) {\n              bool = true;\n            } else {\n              while (refNode && node.contains(refNode)) {\n                if (REG_FORM_VALID.test(refNode.localName)) {\n                  if (refNode.checkValidity()) {\n                    if (refNode.maxLength >= 0) {\n                      bool = refNode.maxLength >= refNode.value.length;\n                    } else {\n                      bool = true;\n                    }\n                  } else {\n                    bool = false;\n                  }\n                  if (!bool) {\n                    break;\n                  }\n                }\n                refNode = walker.nextNode();\n              }\n            }\n            if (!bool) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'in-range': {\n          if (localName === 'input' &&\n              !(node.readonly || node.hasAttribute('readonly')) &&\n              !(node.disabled || node.hasAttribute('disabled')) &&\n              node.hasAttribute('type') &&\n              REG_TYPE_RANGE.test(node.getAttribute('type')) &&\n              !(node.validity.rangeUnderflow ||\n                node.validity.rangeOverflow) &&\n              (node.hasAttribute('min') || node.hasAttribute('max') ||\n               node.getAttribute('type') === 'range')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'out-of-range': {\n          if (localName === 'input' &&\n              !(node.readonly || node.hasAttribute('readonly')) &&\n              !(node.disabled || node.hasAttribute('disabled')) &&\n              node.hasAttribute('type') &&\n              REG_TYPE_RANGE.test(node.getAttribute('type')) &&\n              (node.validity.rangeUnderflow || node.validity.rangeOverflow)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'required': {\n          let targetNode;\n          if (/^(?:select|textarea)$/.test(localName)) {\n            targetNode = node;\n          } else if (localName === 'input') {\n            if (node.hasAttribute('type')) {\n              const inputType = node.getAttribute('type');\n              if (inputType === 'file' || REG_TYPE_CHECK.test(inputType) ||\n                  REG_INPUT_TYPE.test(inputType)) {\n                targetNode = node;\n              }\n            } else {\n              targetNode = node;\n            }\n          }\n          if (targetNode &&\n              (node.required || node.hasAttribute('required'))) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'optional': {\n          let targetNode;\n          if (/^(?:select|textarea)$/.test(localName)) {\n            targetNode = node;\n          } else if (localName === 'input') {\n            if (node.hasAttribute('type')) {\n              const inputType = node.getAttribute('type');\n              if (inputType === 'file' || REG_TYPE_CHECK.test(inputType) ||\n                  REG_INPUT_TYPE.test(inputType)) {\n                targetNode = node;\n              }\n            } else {\n              targetNode = node;\n            }\n          }\n          if (targetNode &&\n              !(node.required || node.hasAttribute('required'))) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'root': {\n          if (node === this.#document.documentElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'empty': {\n          if (node.hasChildNodes()) {\n            const walker = this.#document.createTreeWalker(node, SHOW_ALL);\n            let refNode = walker.firstChild();\n            let bool;\n            while (refNode) {\n              bool = refNode.nodeType !== ELEMENT_NODE &&\n                refNode.nodeType !== TEXT_NODE;\n              if (!bool) {\n                break;\n              }\n              refNode = walker.nextSibling();\n            }\n            if (bool) {\n              matched.add(node);\n            }\n          } else {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'first-child': {\n          if ((parentNode && node === parentNode.firstElementChild) ||\n              node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'last-child': {\n          if ((parentNode && node === parentNode.lastElementChild) ||\n              node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'only-child': {\n          if ((parentNode && node === parentNode.firstElementChild &&\n               node === parentNode.lastElementChild) || node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'first-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1\n            }, node);\n            if (node1) {\n              matched.add(node1);\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'last-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1,\n              reverse: true\n            }, node);\n            if (node1) {\n              matched.add(node1);\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'only-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1\n            }, node);\n            if (node1 === node) {\n              const [node2] = this._collectNthOfType({\n                a: 0,\n                b: 1,\n                reverse: true\n              }, node);\n              if (node2 === node) {\n                matched.add(node);\n              }\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'defined': {\n          if (node.hasAttribute('is') || localName.includes('-')) {\n            if (isCustomElement(node)) {\n              matched.add(node);\n            }\n          // NOTE: MathMLElement not implemented in jsdom\n          } else if (node instanceof this.#window.HTMLElement ||\n                     node instanceof this.#window.SVGElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'popover-open': {\n          if (node.popover && isVisible(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'host':\n        case 'host-context': {\n          // ignore\n          break;\n        }\n        // legacy pseudo-elements\n        case 'after':\n        case 'before':\n        case 'first-letter':\n        case 'first-line': {\n          if (warn) {\n            throw new DOMException(`Unsupported pseudo-element ::${astName}`,\n              NOT_SUPPORTED_ERR);\n          }\n          break;\n        }\n        // not supported\n        case 'autofill':\n        case 'blank':\n        case 'buffering':\n        case 'current':\n        case 'fullscreen':\n        case 'future':\n        case 'modal':\n        case 'muted':\n        case 'past':\n        case 'paused':\n        case 'picture-in-picture':\n        case 'playing':\n        case 'seeking':\n        case 'stalled':\n        case 'user-invalid':\n        case 'user-valid':\n        case 'volume-locked':\n        case '-webkit-autofill': {\n          if (warn) {\n            throw new DOMException(`Unsupported pseudo-class :${astName}`,\n              NOT_SUPPORTED_ERR);\n          }\n          break;\n        }\n        default: {\n          if (astName.startsWith('-webkit-')) {\n            if (warn) {\n              throw new DOMException(`Unsupported pseudo-class :${astName}`,\n                NOT_SUPPORTED_ERR);\n            }\n          } else if (!forgive) {\n            throw new DOMException(`Unknown pseudo-class :${astName}`,\n              SYNTAX_ERR);\n          }\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * match shadow host pseudo class\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - DocumentFragment node\n   * @returns {?object} - matched node\n   */\n  _matchShadowHostPseudoClass(ast, node) {\n    const { children: astChildren, name: astName } = ast;\n    let res;\n    if (Array.isArray(astChildren)) {\n      const { branches } = walkAST(astChildren[0]);\n      const [branch] = branches;\n      const [...leaves] = branch;\n      const { host } = node;\n      if (astName === 'host') {\n        let bool;\n        for (const leaf of leaves) {\n          const { type: leafType } = leaf;\n          if (leafType === COMBINATOR) {\n            const css = generateCSS(ast);\n            throw new DOMException(`Invalid selector ${css}`, SYNTAX_ERR);\n          }\n          bool = this._matchSelector(leaf, host).has(host);\n          if (!bool) {\n            break;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      } else if (astName === 'host-context') {\n        let parent = host;\n        let bool;\n        while (parent) {\n          for (const leaf of leaves) {\n            const { type: leafType } = leaf;\n            if (leafType === COMBINATOR) {\n              const css = generateCSS(ast);\n              throw new DOMException(`Invalid selector ${css}`, SYNTAX_ERR);\n            }\n            bool = this._matchSelector(leaf, parent).has(parent);\n            if (!bool) {\n              break;\n            }\n          }\n          if (bool) {\n            break;\n          } else {\n            parent = parent.parentNode;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      }\n    } else if (astName === 'host') {\n      res = node;\n    } else {\n      throw new DOMException(`Invalid selector :${astName}`, SYNTAX_ERR);\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match selector\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} [opt] - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchSelector(ast, node, opt) {\n    const { type: astType } = ast;\n    const matched = new Set();\n    if (ast.name === EMPTY) {\n      return matched;\n    }\n    const astName = unescapeSelector(ast.name);\n    if (typeof astName === 'string' && astName !== ast.name) {\n      ast.name = astName;\n    }\n    if (node.nodeType === ELEMENT_NODE) {\n      switch (astType) {\n        case PS_ELEMENT_SELECTOR: {\n          this.#matcher.matchPseudoElementSelector(astName, opt);\n          break;\n        }\n        case ID_SELECTOR: {\n          if (node.id === astName) {\n            matched.add(node);\n          }\n          break;\n        }\n        case CLASS_SELECTOR: {\n          if (node.classList.contains(astName)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case PS_CLASS_SELECTOR: {\n          const nodes = this._matchPseudoClassSelector(ast, node, opt);\n          return nodes;\n        }\n        default: {\n          const res = this.#matcher.matchSelector(ast, node, opt, true);\n          if (res) {\n            matched.add(res);\n          }\n        }\n      }\n    } else if (this.#shadow && astType === PS_CLASS_SELECTOR &&\n               node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      if (astName !== 'has' && REG_LOGICAL.test(astName)) {\n        const nodes = this._matchPseudoClassSelector(ast, node, opt);\n        return nodes;\n      } else if (REG_SHADOW_HOST.test(astName)) {\n        const res = this._matchShadowHostPseudoClass(ast, node, opt);\n        if (res) {\n          matched.add(res);\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * match leaves\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} node - node\n   * @param {object} opt - options\n   * @returns {boolean} - result\n   */\n  _matchLeaves(leaves, node, opt) {\n    let bool;\n    let result;\n    if (this.#invalidate) {\n      result = this.#invalidateResults.get(leaves);\n    } else {\n      result = this.#results.get(leaves);\n    }\n    if (result && result.has(node)) {\n      const { matched } = result.get(node);\n      bool = matched;\n    }\n    if (typeof bool !== 'boolean') {\n      let cacheable = true;\n      if (node.nodeType === ELEMENT_NODE &&\n          /^(?:button|fieldset|form|input|select|textarea)$/.test(node.localName)) {\n        cacheable = false;\n      }\n      for (const leaf of leaves) {\n        switch (leaf.type) {\n          case ATTR_SELECTOR:\n          case ID_SELECTOR: {\n            cacheable = false;\n            break;\n          }\n          case PS_CLASS_SELECTOR: {\n            if (/^(?:(?:any-)?link|defined|dir)$/.test(leaf.name)) {\n              cacheable = false;\n            }\n            break;\n          }\n          default:\n        }\n        bool = this._matchSelector(leaf, node, opt).has(node);\n        if (!bool) {\n          break;\n        }\n      }\n      if (cacheable) {\n        if (!result) {\n          result = new WeakMap();\n        }\n        result.set(node, {\n          matched: bool\n        });\n        if (this.#invalidate) {\n          this.#invalidateResults.set(leaves, result);\n        } else {\n          this.#results.set(leaves, result);\n        }\n      }\n    }\n    return !!bool;\n  }\n\n  /**\n   * match HTML collection\n   * @private\n   * @param {object} items - HTML collection\n   * @param {object} opt - options\n   * @returns {Set.<object>} - matched nodes\n   */\n  _matchHTMLCollection(items, opt = {}) {\n    const { compound, filterLeaves } = opt;\n    const nodes = new Set();\n    const l = items.length;\n    if (l) {\n      if (compound) {\n        for (let i = 0; i < l; i++) {\n          const item = items[i];\n          const bool = this._matchLeaves(filterLeaves, item, opt);\n          if (bool) {\n            nodes.add(item);\n          }\n        }\n      } else {\n        const arr = [].slice.call(items);\n        return new Set(arr);\n      }\n    }\n    return nodes;\n  }\n\n  /**\n   * find descendant nodes\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} baseNode - base Element node\n   * @param {object} opt - options\n   * @returns {object} - collection of nodes and pending state\n   */\n  _findDescendantNodes(leaves, baseNode, opt) {\n    const [leaf, ...filterLeaves] = leaves;\n    const compound = filterLeaves.length > 0;\n    const { type: leafType } = leaf;\n    const leafName = unescapeSelector(leaf.name);\n    if (typeof leafName === 'string' && leafName !== leaf.name) {\n      leaf.name = leafName;\n    }\n    let nodes = new Set();\n    let pending = false;\n    if (this.#shadow) {\n      pending = true;\n    } else {\n      switch (leafType) {\n        case PS_ELEMENT_SELECTOR: {\n          this.#matcher.matchPseudoElementSelector(leafName, opt);\n          break;\n        }\n        case ID_SELECTOR: {\n          if (this.#root.nodeType === ELEMENT_NODE) {\n            pending = true;\n          } else {\n            const node = this.#root.getElementById(leafName);\n            if (node && node !== baseNode && baseNode.contains(node)) {\n              if (compound) {\n                const bool = this._matchLeaves(filterLeaves, node, opt);\n                if (bool) {\n                  nodes.add(node);\n                }\n              } else {\n                nodes.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case CLASS_SELECTOR: {\n          const items = baseNode.getElementsByClassName(leafName);\n          nodes = this._matchHTMLCollection(items, {\n            compound,\n            filterLeaves\n          });\n          break;\n        }\n        case TYPE_SELECTOR: {\n          if (this.#document.contentType === 'text/html' &&\n              !/[*|]/.test(leafName)) {\n            const items = baseNode.getElementsByTagName(leafName);\n            nodes = this._matchHTMLCollection(items, {\n              compound,\n              filterLeaves\n            });\n          } else {\n            pending = true;\n          }\n          break;\n        }\n        default: {\n          pending = true;\n        }\n      }\n    }\n    return {\n      nodes,\n      pending\n    };\n  }\n\n  /**\n   * match combinator\n   * @private\n   * @param {object} twig - twig\n   * @param {object} node - Element node\n   * @param {object} opt - option\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchCombinator(twig, node, opt = {}) {\n    const { combo, leaves } = twig;\n    const { name: comboName } = combo;\n    const { parentNode } = node;\n    const { dir } = opt;\n    const matched = new Set();\n    if (dir === DIR_NEXT) {\n      switch (comboName) {\n        case '+': {\n          const refNode = node.nextElementSibling;\n          if (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n          }\n          break;\n        }\n        case '~': {\n          if (parentNode) {\n            const walker = this._createTreeWalker(parentNode);\n            let refNode = traverseNode(node, walker);\n            refNode = walker.nextSibling();\n            while (refNode) {\n              const bool = this._matchLeaves(leaves, refNode, opt);\n              if (bool) {\n                matched.add(refNode);\n              }\n              refNode = walker.nextSibling();\n            }\n          }\n          break;\n        }\n        case '>': {\n          const walker = this._createTreeWalker(node);\n          let refNode = traverseNode(node, walker);\n          refNode = walker.firstChild();\n          while (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n            refNode = walker.nextSibling();\n          }\n          break;\n        }\n        case ' ':\n        default: {\n          const { nodes, pending } = this._findDescendantNodes(leaves, node);\n          if (nodes.size) {\n            return nodes;\n          }\n          if (pending) {\n            const walker = this._createTreeWalker(node);\n            let refNode = traverseNode(node, walker);\n            refNode = walker.nextNode();\n            while (refNode && node.contains(refNode)) {\n              const bool = this._matchLeaves(leaves, refNode, opt);\n              if (bool) {\n                matched.add(refNode);\n              }\n              refNode = walker.nextNode();\n            }\n          }\n        }\n      }\n    } else {\n      switch (comboName) {\n        case '+': {\n          const refNode = node.previousElementSibling;\n          if (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n          }\n          break;\n        }\n        case '~': {\n          if (parentNode) {\n            const walker = this._createTreeWalker(parentNode);\n            let refNode = traverseNode(parentNode, walker);\n            refNode = walker.firstChild();\n            while (refNode) {\n              if (refNode === node) {\n                break;\n              } else {\n                const bool = this._matchLeaves(leaves, refNode, opt);\n                if (bool) {\n                  matched.add(refNode);\n                }\n              }\n              refNode = walker.nextSibling();\n            }\n          }\n          break;\n        }\n        case '>': {\n          if (parentNode) {\n            const bool = this._matchLeaves(leaves, parentNode, opt);\n            if (bool) {\n              matched.add(parentNode);\n            }\n          }\n          break;\n        }\n        case ' ':\n        default: {\n          const arr = [];\n          let refNode = parentNode;\n          while (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              arr.push(refNode);\n            }\n            refNode = refNode.parentNode;\n          }\n          if (arr.length) {\n            return new Set(arr.reverse());\n          }\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * find matched node from #qswalker\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} [opt] - options\n   * @param {object} [opt.node] - node to start from\n   * @returns {?object} - matched node\n   */\n  _findNode(leaves, opt) {\n    const { node } = opt;\n    const walker = this.#qswalker;\n    let refNode = traverseNode(node, walker);\n    let matchedNode;\n    if (refNode) {\n      if (refNode.nodeType !== ELEMENT_NODE) {\n        refNode = walker.nextNode();\n      } else if (refNode === node) {\n        if (refNode !== this.#root) {\n          refNode = walker.nextNode();\n        }\n      }\n      while (refNode) {\n        const matched = this._matchLeaves(leaves, refNode, {\n          warn: this.#warn\n        });\n        if (matched) {\n          matchedNode = refNode;\n          break;\n        }\n        refNode = walker.nextNode();\n      }\n    }\n    return matchedNode ?? null;\n  }\n\n  /**\n   * match self\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _matchSelf(leaves) {\n    const nodes = [];\n    const bool = this._matchLeaves(leaves, this.#node, {\n      warn: this.#warn\n    });\n    let filtered = false;\n    if (bool) {\n      nodes.push(this.#node);\n      filtered = true;\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find lineal\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @param {object} opt - options\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findLineal(leaves, opt = {}) {\n    const { complex } = opt;\n    const nodes = [];\n    let bool = this._matchLeaves(leaves, this.#node, {\n      warn: this.#warn\n    });\n    let filtered = false;\n    if (bool) {\n      nodes.push(this.#node);\n      filtered = true;\n    }\n    if (!bool || complex) {\n      let refNode = this.#node.parentNode;\n      while (refNode) {\n        bool = this._matchLeaves(leaves, refNode, {\n          warn: this.#warn\n        });\n        if (bool) {\n          nodes.push(refNode);\n          filtered = true;\n        }\n        if (refNode.parentNode) {\n          refNode = refNode.parentNode;\n        } else {\n          break;\n        }\n      }\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find first\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findFirst(leaves) {\n    const nodes = [];\n    const node = this._findNode(leaves, {\n      node: this.#node\n    });\n    let filtered = false;\n    if (node) {\n      nodes.push(node);\n      filtered = true;\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find from HTML collection\n   * @private\n   * @param {object} items - HTML collection\n   * @param {object} opt - options\n   * @param {boolean} [opt.compound] - compound selector\n   * @param {Array} [opt.filterLeaves] - filter leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findFromHTMLCollection(items, opt = {}) {\n    const { complex, compound, filterLeaves, targetType } = opt;\n    let nodes = [];\n    let filtered = false;\n    let collected = false;\n    const l = items.length;\n    if (l) {\n      if (this.#node.nodeType === ELEMENT_NODE) {\n        for (let i = 0; i < l; i++) {\n          const node = items[i];\n          if (node !== this.#node &&\n              (this.#node.contains(node) || node.contains(this.#node))) {\n            if (compound) {\n              const bool = this._matchLeaves(filterLeaves, node, {\n                warn: this.#warn\n              });\n              if (bool) {\n                nodes.push(node);\n                filtered = true;\n                if (targetType === TARGET_FIRST) {\n                  break;\n                }\n              }\n            } else {\n              nodes.push(node);\n              filtered = true;\n              if (targetType === TARGET_FIRST) {\n                break;\n              }\n            }\n          }\n        }\n      } else if (complex) {\n        if (compound) {\n          for (let i = 0; i < l; i++) {\n            const node = items[i];\n            const bool = this._matchLeaves(filterLeaves, node, {\n              warn: this.#warn\n            });\n            if (bool) {\n              nodes.push(node);\n              filtered = true;\n              if (targetType === TARGET_FIRST) {\n                break;\n              }\n            }\n          }\n        } else {\n          nodes = [].slice.call(items);\n          filtered = true;\n          collected = true;\n        }\n      } else if (compound) {\n        for (let i = 0; i < l; i++) {\n          const node = items[i];\n          const bool = this._matchLeaves(filterLeaves, node, {\n            warn: this.#warn\n          });\n          if (bool) {\n            nodes.push(node);\n            filtered = true;\n            if (targetType === TARGET_FIRST) {\n              break;\n            }\n          }\n        }\n      } else {\n        nodes = [].slice.call(items);\n        filtered = true;\n        collected = true;\n      }\n    }\n    return [nodes, filtered, collected];\n  }\n\n  /**\n   * find entry nodes\n   * @private\n   * @param {object} twig - twig\n   * @param {string} targetType - target type\n   * @param {boolean} complex - complex selector\n   * @returns {object} - collection of nodes etc.\n   */\n  _findEntryNodes(twig, targetType, complex) {\n    const { leaves } = twig;\n    const [leaf, ...filterLeaves] = leaves;\n    const compound = filterLeaves.length > 0;\n    const { name: leafName, type: leafType } = leaf;\n    let nodes = [];\n    let collected = false;\n    let filtered = false;\n    let pending = false;\n    switch (leafType) {\n      case PS_ELEMENT_SELECTOR: {\n        this.#matcher.matchPseudoElementSelector(leafName, {\n          warn: this.#warn\n        });\n        break;\n      }\n      case ID_SELECTOR: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (targetType === TARGET_FIRST &&\n                   this.#root.nodeType !== ELEMENT_NODE) {\n          const node = this.#root.getElementById(leafName);\n          if (node) {\n            if (compound) {\n              const bool = this._matchLeaves(filterLeaves, node, {\n                warn: this.#warn\n              });\n              if (bool) {\n                nodes.push(node);\n                filtered = true;\n              }\n            } else {\n              nodes.push(node);\n              filtered = true;\n            }\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      case CLASS_SELECTOR: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (this.#root.nodeType === DOCUMENT_NODE) {\n          const items = this.#root.getElementsByClassName(leafName);\n          if (items.length) {\n            [nodes, filtered, collected] = this._findFromHTMLCollection(items, {\n              complex,\n              compound,\n              filterLeaves,\n              targetType\n            });\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      case TYPE_SELECTOR: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (this.#document.contentType === 'text/html' &&\n                   this.#root.nodeType === DOCUMENT_NODE &&\n                   !/[*|]/.test(leafName)) {\n          const items = this.#root.getElementsByTagName(leafName);\n          if (items.length) {\n            [nodes, filtered, collected] = this._findFromHTMLCollection(items, {\n              complex,\n              compound,\n              filterLeaves,\n              targetType\n            });\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      default: {\n        if (targetType !== TARGET_LINEAL && REG_SHADOW_HOST.test(leafName)) {\n          if (this.#shadow &&\n              this.#node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n            const node = this._matchShadowHostPseudoClass(leaf, this.#node);\n            if (node) {\n              nodes.push(node);\n              filtered = true;\n            }\n          }\n        } else if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n      }\n    }\n    return {\n      collected,\n      compound,\n      filtered,\n      nodes,\n      pending\n    };\n  }\n\n  /**\n   * collect nodes\n   * @private\n   * @param {string} targetType - target type\n   * @returns {Array.<Array.<object|undefined>>} - #ast and #nodes\n   */\n  _collectNodes(targetType) {\n    const ast = this.#ast.values();\n    if (targetType === TARGET_ALL || targetType === TARGET_FIRST) {\n      const pendingItems = new Set();\n      let i = 0;\n      for (const { branch } of ast) {\n        const branchLen = branch.length;\n        const complex = branchLen > 1;\n        const firstTwig = branch[0];\n        let dir;\n        let twig;\n        if (complex) {\n          const {\n            combo: firstCombo,\n            leaves: [{\n              name: firstName,\n              type: firstType\n            }]\n          } = firstTwig;\n          const lastTwig = branch[branchLen - 1];\n          const {\n            leaves: [{\n              name: lastName,\n              type: lastType\n            }]\n          } = lastTwig;\n          if (lastType === PS_ELEMENT_SELECTOR ||\n              lastType === ID_SELECTOR) {\n            dir = DIR_PREV;\n            twig = lastTwig;\n          } else if (firstType === PS_ELEMENT_SELECTOR ||\n                     firstType === ID_SELECTOR) {\n            dir = DIR_NEXT;\n            twig = firstTwig;\n          } else if (targetType === TARGET_ALL) {\n            if (firstName === '*' && firstType === TYPE_SELECTOR) {\n              dir = DIR_PREV;\n              twig = lastTwig;\n            } else if (lastName === '*' && lastType === TYPE_SELECTOR) {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            } else if (branchLen === 2) {\n              const { name: comboName } = firstCombo;\n              if (/^[+~]$/.test(comboName)) {\n                dir = DIR_PREV;\n                twig = lastTwig;\n              } else {\n                dir = DIR_NEXT;\n                twig = firstTwig;\n              }\n            } else {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            }\n          } else if (lastName === '*' && lastType === TYPE_SELECTOR) {\n            dir = DIR_NEXT;\n            twig = firstTwig;\n          } else if (firstName === '*' && firstType === TYPE_SELECTOR) {\n            dir = DIR_PREV;\n            twig = lastTwig;\n          } else {\n            let bool;\n            for (const { combo, leaves: [leaf] } of branch) {\n              const { name: leafName, type: leafType } = leaf;\n              if (leafType === PS_CLASS_SELECTOR && leafName === 'dir') {\n                bool = false;\n                break;\n              }\n              if (!bool && combo) {\n                const { name: comboName } = combo;\n                if (/^[+~]$/.test(comboName)) {\n                  bool = true;\n                }\n              }\n            }\n            if (bool) {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            } else {\n              dir = DIR_PREV;\n              twig = lastTwig;\n            }\n          }\n        } else {\n          dir = DIR_PREV;\n          twig = firstTwig;\n        }\n        const {\n          collected, compound, filtered, nodes, pending\n        } = this._findEntryNodes(twig, targetType, complex);\n        if (nodes.length) {\n          this.#ast[i].find = true;\n          this.#nodes[i] = nodes;\n        } else if (pending) {\n          pendingItems.add(new Map([\n            ['index', i],\n            ['twig', twig]\n          ]));\n        }\n        this.#ast[i].collected = collected;\n        this.#ast[i].dir = dir;\n        this.#ast[i].filtered = filtered || !compound;\n        i++;\n      }\n      if (pendingItems.size) {\n        let node;\n        let walker;\n        if (this.#node !== this.#root && this.#node.nodeType === ELEMENT_NODE) {\n          node = this.#node;\n          walker = this.#qswalker;\n        } else {\n          node = this.#root;\n          walker = this.#walker;\n        }\n        let nextNode = traverseNode(node, walker);\n        while (nextNode) {\n          let bool = false;\n          if (this.#node.nodeType === ELEMENT_NODE) {\n            if (nextNode === this.#node) {\n              bool = true;\n            } else {\n              bool = this.#node.contains(nextNode);\n            }\n          } else {\n            bool = true;\n          }\n          if (bool) {\n            for (const pendingItem of pendingItems) {\n              const { leaves } = pendingItem.get('twig');\n              const matched = this._matchLeaves(leaves, nextNode, {\n                warn: this.#warn\n              });\n              if (matched) {\n                const index = pendingItem.get('index');\n                this.#ast[index].filtered = true;\n                this.#ast[index].find = true;\n                this.#nodes[index].push(nextNode);\n              }\n            }\n          }\n          if (nextNode !== walker.currentNode) {\n            nextNode = traverseNode(nextNode, walker);\n          }\n          nextNode = walker.nextNode();\n        }\n      }\n    } else {\n      let i = 0;\n      for (const { branch } of ast) {\n        const twig = branch[branch.length - 1];\n        const complex = branch.length > 1;\n        const {\n          compound, filtered, nodes\n        } = this._findEntryNodes(twig, targetType, complex);\n        if (nodes.length) {\n          this.#ast[i].find = true;\n          this.#nodes[i] = nodes;\n        }\n        this.#ast[i].dir = DIR_PREV;\n        this.#ast[i].filtered = filtered || !compound;\n        i++;\n      }\n    }\n    return [\n      this.#ast,\n      this.#nodes\n    ];\n  }\n\n  /**\n   * get combined nodes\n   * @private\n   * @param {object} twig - twig\n   * @param {object} nodes - collection of nodes\n   * @param {string} dir - direction\n   * @returns {Array.<object>} - collection of matched nodes\n   */\n  _getCombinedNodes(twig, nodes, dir) {\n    const arr = [];\n    for (const node of nodes) {\n      const matched = this._matchCombinator(twig, node, {\n        dir,\n        warn: this.#warn\n      });\n      if (matched.size) {\n        arr.push(...matched);\n      }\n    }\n    if (arr.length) {\n      return new Set(arr);\n    }\n    return new Set();\n  }\n\n  /**\n   * match node to next direction\n   * @private\n   * @param {Array} branch - branch\n   * @param {Set.<object>} nodes - collection of Element node\n   * @param {object} opt - option\n   * @param {object} opt.combo - combo\n   * @returns {?object} - matched node\n   */\n  _matchNodeNext(branch, nodes, opt) {\n    const { combo, index } = opt;\n    const { combo: nextCombo, leaves } = branch[index];\n    const twig = {\n      combo,\n      leaves\n    };\n    const nextNodes = this._getCombinedNodes(twig, nodes, DIR_NEXT);\n    let res;\n    if (nextNodes.size) {\n      if (index === branch.length - 1) {\n        const [nextNode] = sortNodes(nextNodes);\n        res = nextNode;\n      } else {\n        res = this._matchNodeNext(branch, nextNodes, {\n          combo: nextCombo,\n          index: index + 1\n        });\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match node to previous direction\n   * @private\n   * @param {Array} branch - branch\n   * @param {object} node - Element node\n   * @param {object} opt - option\n   * @param {number} opt.index - index\n   * @returns {?object} - node\n   */\n  _matchNodePrev(branch, node, opt) {\n    const { index } = opt;\n    const twig = branch[index];\n    const nodes = new Set([node]);\n    const nextNodes = this._getCombinedNodes(twig, nodes, DIR_PREV);\n    let res;\n    if (nextNodes.size) {\n      if (index === 0) {\n        res = node;\n      } else {\n        for (const nextNode of nextNodes) {\n          const matched = this._matchNodePrev(branch, nextNode, {\n            index: index - 1\n          });\n          if (matched) {\n            return node;\n          }\n        }\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * find matched nodes\n   * @param {string} targetType - target type\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  find(targetType) {\n    if (targetType === TARGET_ALL || targetType === TARGET_FIRST) {\n      this._prepareQuerySelectorWalker();\n    }\n    const [[...branches], collectedNodes] = this._collectNodes(targetType);\n    const l = branches.length;\n    let sort;\n    let nodes = new Set();\n    for (let i = 0; i < l; i++) {\n      const { branch, collected, dir, find } = branches[i];\n      const branchLen = branch.length;\n      if (branchLen && find) {\n        const entryNodes = collectedNodes[i];\n        const entryNodesLen = entryNodes.length;\n        const lastIndex = branchLen - 1;\n        if (lastIndex === 0) {\n          if ((targetType === TARGET_ALL || targetType === TARGET_FIRST) &&\n              this.#node.nodeType === ELEMENT_NODE) {\n            for (let j = 0; j < entryNodesLen; j++) {\n              const node = entryNodes[j];\n              if (node !== this.#node && this.#node.contains(node)) {\n                nodes.add(node);\n                if (targetType !== TARGET_ALL) {\n                  break;\n                }\n              }\n            }\n          } else if (targetType === TARGET_ALL) {\n            if (nodes.size) {\n              const n = [...nodes];\n              nodes = new Set([...n, ...entryNodes]);\n              sort = true;\n            } else {\n              nodes = new Set(entryNodes);\n            }\n          } else {\n            const [node] = entryNodes;\n            nodes.add(node);\n          }\n        } else if (targetType === TARGET_ALL) {\n          if (dir === DIR_NEXT) {\n            let { combo } = branch[0];\n            for (const node of entryNodes) {\n              let nextNodes = new Set([node]);\n              for (let j = 1; j < branchLen; j++) {\n                const { combo: nextCombo, leaves } = branch[j];\n                const twig = {\n                  combo,\n                  leaves\n                };\n                nextNodes = this._getCombinedNodes(twig, nextNodes, dir);\n                if (nextNodes.size) {\n                  if (j === lastIndex) {\n                    if (nodes.size) {\n                      const n = [...nodes];\n                      nodes = new Set([...n, ...nextNodes]);\n                      sort = true;\n                    } else {\n                      nodes = nextNodes;\n                    }\n                  } else {\n                    combo = nextCombo;\n                  }\n                } else {\n                  break;\n                }\n              }\n            }\n          } else {\n            for (const node of entryNodes) {\n              let nextNodes = new Set([node]);\n              for (let j = lastIndex - 1; j >= 0; j--) {\n                const twig = branch[j];\n                nextNodes = this._getCombinedNodes(twig, nextNodes, dir);\n                if (nextNodes.size) {\n                  if (j === 0) {\n                    nodes.add(node);\n                    if (branchLen > 1 && nodes.size > 1) {\n                      sort = true;\n                    }\n                  }\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n        } else if (targetType === TARGET_FIRST && dir === DIR_NEXT) {\n          const { combo: entryCombo } = branch[0];\n          let matched;\n          for (const node of entryNodes) {\n            matched = this._matchNodeNext(branch, new Set([node]), {\n              combo: entryCombo,\n              index: 1\n            });\n            if (matched) {\n              nodes.add(matched);\n              break;\n            }\n          }\n          if (!matched && !collected) {\n            const { leaves: entryLeaves } = branch[0];\n            const [entryNode] = entryNodes;\n            let refNode = this._findNode(entryLeaves, {\n              node: entryNode\n            });\n            while (refNode) {\n              matched = this._matchNodeNext(branch, new Set([refNode]), {\n                combo: entryCombo,\n                index: 1\n              });\n              if (matched) {\n                nodes.add(matched);\n                break;\n              }\n              refNode = this._findNode(entryLeaves, {\n                node: refNode\n              });\n            }\n          }\n        } else {\n          let matched;\n          for (const node of entryNodes) {\n            matched = this._matchNodePrev(branch, node, {\n              index: lastIndex - 1\n            });\n            if (matched) {\n              nodes.add(node);\n              break;\n            }\n          }\n          if (!matched && !collected && targetType === TARGET_FIRST) {\n            const { leaves: entryLeaves } = branch[lastIndex];\n            const [entryNode] = entryNodes;\n            let refNode = this._findNode(entryLeaves, {\n              node: entryNode\n            });\n            while (refNode) {\n              matched = this._matchNodePrev(branch, refNode, {\n                index: lastIndex - 1\n              });\n              if (matched) {\n                nodes.add(refNode);\n                break;\n              }\n              refNode = this._findNode(entryLeaves, {\n                node: refNode\n              });\n            }\n          }\n        }\n      }\n    }\n    if (targetType === TARGET_FIRST) {\n      nodes.delete(this.#node);\n      if (nodes.size > 1) {\n        nodes = new Set(sortNodes(nodes));\n      }\n    } else if (targetType === TARGET_ALL) {\n      nodes.delete(this.#node);\n      if (sort && nodes.size > 1) {\n        nodes = new Set(sortNodes(nodes));\n      }\n    }\n    if (this.#invalidate) {\n      this.#invalidateResults = new WeakMap();\n    }\n    return nodes;\n  }\n};\n"],
  "mappings": "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",
  "names": ["finder_exports", "__export", "Finder", "__toCommonJS", "import_matcher", "import_parser", "import_utility", "import_constant", "DIR_NEXT", "DIR_PREV", "KEY_TAB", "REG_ANCHOR", "REG_FORM_CTRL", "REG_FORM_VALID", "REG_INTERACT", "REG_SHADOW_HOST", "REG_TYPE_CHECK", "REG_TYPE_RANGE", "REG_TYPE_RESET", "REG_TYPE_SUBMIT", "REG_TYPE_TEXT", "#ast", "#astCache", "#descendant", "#document", "#documentCache", "#event", "#focus", "#invalidate", "#invalidateResults", "#matcher", "#node", "#nodes", "#noexcept", "#qswalker", "#results", "#root", "#shadow", "#walker", "#walkers", "#warn", "#window", "window", "e", "opt", "selector", "node", "event", "noexcept", "warn", "func", "mouseKeys", "key", "evt", "keyboardKeys", "nodes", "ast", "cachedItem", "item", "l", "i", "cssAst", "branches", "hasHasPseudoFunc", "hasNthChildOfSelector", "invalidate", "descendant", "items", "branch", "leaves", "nextItem", "itemName", "walker", "anb", "a", "b", "reverse", "parentNode", "matched", "selectorBranches", "refNode", "selectorNodes", "bool", "nth", "j", "localName", "namespaceURI", "prefix", "itemLocalName", "itemNamespaceURI", "itemPrefix", "m", "nthName", "nthIdentName", "anbMap", "astLeaves", "leaf", "leafType", "combo", "twigLeaves", "itemType", "twig", "nextNode", "astData", "astName", "twigBranches", "res", "forgive", "lastIndex", "nextNodes", "arr", "astChildren", "selectors", "css", "leavesSet", "stateValue", "prop", "href", "origin", "pathname", "attrURL", "target", "type", "buttons", "hash", "id", "current", "eventTarget", "focusTarget", "relatedTarget", "parent", "placeholder", "targetNode", "nodeName", "checked", "form", "inputType", "node1", "node2", "host", "astType", "result", "cacheable", "compound", "filterLeaves", "baseNode", "leafName", "pending", "comboName", "dir", "matchedNode", "filtered", "complex", "targetType", "collected", "pendingItems", "branchLen", "firstTwig", "firstCombo", "firstName", "firstType", "lastTwig", "lastName", "lastType", "pendingItem", "index", "nextCombo", "collectedNodes", "sort", "find", "entryNodes", "entryNodesLen", "n", "entryCombo", "entryLeaves", "entryNode"]
}
