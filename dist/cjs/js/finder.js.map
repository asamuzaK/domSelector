{
  "version": 3,
  "sources": ["../../../src/js/finder.js"],
  "sourcesContent": ["/**\n * finder.js\n */\n\n/* import */\nimport { Matcher } from './matcher.js';\nimport {\n  findAST, generateCSS, parseSelector, sortAST, unescapeSelector, walkAST\n} from './parser.js';\nimport {\n  isContentEditable, isCustomElement, isFocusVisible, isFocusable,\n  isInShadowTree, isVisible, resolveContent, sortNodes, traverseNode\n} from './utility.js';\n\n/* constants */\nimport {\n  ATTR_SELECTOR, BIT_01, CLASS_SELECTOR, COMBINATOR, DOCUMENT_FRAGMENT_NODE,\n  DOCUMENT_NODE, ELEMENT_NODE, EMPTY, ID_SELECTOR, NOT_SUPPORTED_ERR,\n  PS_CLASS_SELECTOR, PS_ELEMENT_SELECTOR, REG_INPUT_TYPE, REG_LOGICAL,\n  SHOW_ALL, SYNTAX_ERR, TARGET_ALL, TARGET_FIRST, TARGET_LINEAL, TARGET_SELF,\n  TEXT_NODE, TYPE_SELECTOR, WALKER_FILTER\n} from './constant.js';\nconst DIR_NEXT = 'next';\nconst DIR_PREV = 'prev';\nconst KEY_TAB = 'Tab';\nconst REG_ANCHOR = /^a(?:rea)?$/;\nconst REG_FORM_CTRL =\n  /^(?:button|fieldset|input|optgroup|option|select|textarea)$/;\nconst REG_FORM_VALID = /^(?:button|form|input|select|textarea)$/;\nconst REG_INTERACT = /^(?:details|dialog)$/;\nconst REG_SHADOW_HOST = /^host(?:-context)?$/;\nconst REG_TYPE_CHECK = /^(?:checkbox|radio)$/;\nconst REG_TYPE_RANGE = /^(?:date(?:time-local)?|month|number|range|time|week)$/;\nconst REG_TYPE_RESET = /^(?:button|reset)$/;\nconst REG_TYPE_SUBMIT = /^(?:image|submit)$/;\nconst REG_TYPE_TEXT = /^(?:email|number|password|search|tel|text|url)$/;\n\n/**\n * Finder\n * NOTE: #ast[i] corresponds to #nodes[i]\n * #ast: Array<Ast | undefined>\n * #nodes: Array<Nodes>\n * Ast: {\n *   branch: Array<Branch | undefined>,\n *   collected: boolean,\n *   dir: string | null,\n *   filtered: boolean,\n *   find: boolean\n * }\n * Branch: Array<Twig>\n * Twig: {\n *   combo: Leaf | null,\n *   leaves: Array<Leaf>\n * }\n * Leaf: {\n *   children: Array<Leaf | undefined> | null,\n *   loc: null,\n *   type: string\n * }\n * Nodes: Array<HTMLElement | undefined>\n */\nexport class Finder {\n  /* private fields */\n  #ast;\n  #astCache;\n  #descendant;\n  #document;\n  #documentCache;\n  #event;\n  #focus;\n  #invalidate;\n  #invalidateResults;\n  #matcher;\n  #node;\n  #nodes;\n  #noexcept;\n  #qswalker;\n  #results;\n  #root;\n  #shadow;\n  #verifyShadowHost;\n  #walker;\n  #walkers;\n  #warn;\n  #window;\n\n  /**\n   * construct\n   * @param {object} window - window\n   */\n  constructor(window) {\n    this.#window = window;\n    this.#matcher = new Matcher();\n    this.#astCache = new WeakMap();\n    this.#documentCache = new WeakMap();\n    this.#invalidateResults = new WeakMap();\n    this.#results = new WeakMap();\n    this.#event = null;\n    this.#focus = null;\n    this._registerEventListeners();\n  }\n\n  /**\n   * handle error\n   * @param {Error} e - Error\n   * @param {object} opt - options\n   * @throws Error\n   * @returns {void}\n   */\n  onError(e, opt = {}) {\n    const noexcept = opt.noexcept ?? this.#noexcept;\n    if (!noexcept) {\n      if (e instanceof DOMException ||\n          e instanceof this.#window.DOMException) {\n        if (e.name === NOT_SUPPORTED_ERR) {\n          if (this.#warn) {\n            console.warn(e.message);\n          }\n        } else {\n          throw new this.#window.DOMException(e.message, e.name);\n        }\n      } else if (e.name in this.#window) {\n        throw new this.#window[e.name](e.message);\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /**\n   * setup finder\n   * @param {string} selector - CSS selector\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} opt - options\n   * @param {object} [opt.event] - MouseEvent, KeyboardEvent\n   * @param {boolean} [opt.noexcept] - no exception\n   * @param {boolean} [opt.warn] - console warn\n   * @returns {object} - node\n   */\n  setup(selector, node, opt = {}) {\n    const { event, noexcept, warn } = opt;\n    this.#noexcept = !!noexcept;\n    this.#warn = !!warn;\n    this.#node = node;\n    [this.#document, this.#root, this.#walker] = resolveContent(node);\n    this.#shadow = isInShadowTree(node);\n    [this.#ast, this.#nodes] = this._correspond(selector);\n    this.#invalidateResults = new WeakMap();\n    this.#walkers = new WeakMap();\n    this.#verifyShadowHost = null;\n    this._setEvent(event);\n    return node;\n  }\n\n  /**\n   * register event listeners\n   * @private\n   * @returns {Array.<void>} - results\n   */\n  _registerEventListeners() {\n    const opt = {\n      capture: true,\n      passive: true\n    };\n    const func = [];\n    const mouseKeys = ['mouseover', 'mousedown', 'mouseup', 'mouseout'];\n    for (const key of mouseKeys) {\n      func.push(this.#window.addEventListener(key, evt => {\n        this.#event = evt;\n      }, opt));\n    }\n    const keyboardKeys = ['keydown', 'keyup'];\n    for (const key of keyboardKeys) {\n      func.push(this.#window.addEventListener(key, evt => {\n        if (evt.key === KEY_TAB) {\n          this.#event = evt;\n        }\n      }, opt));\n    }\n    func.push(this.#window.addEventListener('focusin', evt => {\n      this.#focus = evt;\n    }, opt));\n    return func;\n  }\n\n  /**\n   * set event\n   * @private\n   * @param {object} event - instance of KeyboardEvent, MouseEvent\n   * @returns {object} - event\n   */\n  _setEvent(event) {\n    // NOTE: PointerEvent not implemented in jsdom\n    if (event instanceof this.#window.KeyboardEvent ||\n        event instanceof this.#window.MouseEvent) {\n      this.#event = event;\n    }\n    return this.#event;\n  }\n\n  /**\n   * correspond ast and nodes\n   * @private\n   * @param {string} selector - CSS selector\n   * @returns {Array.<Array.<object|undefined>>} - array of ast and nodes\n   */\n  _correspond(selector) {\n    const nodes = [];\n    this.#descendant = false;\n    this.#invalidate = false;\n    let ast;\n    if (this.#documentCache.has(this.#document)) {\n      const cachedItem = this.#documentCache.get(this.#document);\n      if (cachedItem && cachedItem.has(`${selector}`)) {\n        const item = cachedItem.get(`${selector}`);\n        ast = item.ast;\n        this.#descendant = item.descendant;\n        this.#invalidate = item.invalidate;\n      }\n    }\n    if (ast) {\n      const l = ast.length;\n      for (let i = 0; i < l; i++) {\n        ast[i].collected = false;\n        ast[i].dir = null;\n        ast[i].filtered = false;\n        ast[i].find = false;\n        nodes[i] = [];\n      }\n    } else {\n      let cssAst;\n      try {\n        cssAst = parseSelector(selector);\n      } catch (e) {\n        this.onError(e);\n      }\n      const { branches, info } = walkAST(cssAst);\n      const {\n        hasHasPseudoFunc, hasLogicalPseudoFunc, hasNthChildOfSelector\n      } = info;\n      let invalidate =\n        hasHasPseudoFunc || !!(hasLogicalPseudoFunc && hasNthChildOfSelector);\n      let descendant = false;\n      let i = 0;\n      ast = [];\n      for (const [...items] of branches) {\n        const branch = [];\n        let item = items.shift();\n        if (item && item.type !== COMBINATOR) {\n          const leaves = new Set();\n          while (item) {\n            if (item.type === COMBINATOR) {\n              const [nextItem] = items;\n              if (nextItem.type === COMBINATOR) {\n                throw new DOMException(`Invalid selector ${selector}`,\n                  SYNTAX_ERR);\n              }\n              const itemName = item.name;\n              if (/^[\\s>]$/.test(itemName)) {\n                descendant = true;\n              } else {\n                invalidate = true;\n              }\n              branch.push({\n                combo: item,\n                leaves: sortAST(leaves)\n              });\n              leaves.clear();\n            } else if (item) {\n              let { name: itemName } = item;\n              if (itemName && typeof itemName === 'string') {\n                itemName = unescapeSelector(itemName);\n                if (typeof itemName === 'string' && itemName !== item.name) {\n                  item.name = itemName;\n                }\n                if (/[|:]/.test(itemName)) {\n                  item.namespace = true;\n                }\n              }\n              leaves.add(item);\n            }\n            if (items.length) {\n              item = items.shift();\n            } else {\n              branch.push({\n                combo: null,\n                leaves: sortAST(leaves)\n              });\n              leaves.clear();\n              break;\n            }\n          }\n        }\n        ast.push({\n          branch,\n          collected: false,\n          dir: null,\n          filtered: false,\n          find: false\n        });\n        nodes[i] = [];\n        i++;\n      }\n      let cachedItem;\n      if (this.#documentCache.has(this.#document)) {\n        cachedItem = this.#documentCache.get(this.#document);\n      } else {\n        cachedItem = new Map();\n      }\n      cachedItem.set(`${selector}`, {\n        ast,\n        descendant,\n        invalidate\n      });\n      this.#documentCache.set(this.#document, cachedItem);\n      this.#descendant = descendant;\n      this.#invalidate = invalidate;\n    }\n    return [\n      ast,\n      nodes\n    ];\n  }\n\n  /**\n   * create tree walker\n   * @private\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @returns {object} - tree walker\n   */\n  _createTreeWalker(node) {\n    let walker;\n    if (this.#walkers.has(node)) {\n      walker = this.#walkers.get(node);\n    } else {\n      walker = this.#document.createTreeWalker(node, WALKER_FILTER);\n      this.#walkers.set(node, walker);\n    }\n    return walker;\n  }\n\n  /**\n   * prepare querySelector walker\n   * @private\n   * @returns {object} - tree walker\n   */\n  _prepareQuerySelectorWalker() {\n    this.#qswalker = this._createTreeWalker(this.#node);\n    return this.#qswalker;\n  }\n\n  /**\n   * collect nth child\n   * @private\n   * @param {object} anb - An+B options\n   * @param {number} anb.a - a\n   * @param {number} anb.b - b\n   * @param {boolean} [anb.reverse] - reverse order\n   * @param {object} [anb.selector] - AST\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _collectNthChild(anb, node, opt) {\n    const { a, b, reverse, selector } = anb;\n    const { parentNode } = node;\n    const matched = new Set();\n    let selectorBranches;\n    if (selector) {\n      if (this.#astCache.has(selector)) {\n        selectorBranches = this.#astCache.get(selector);\n      } else {\n        const { branches } = walkAST(selector);\n        selectorBranches = branches;\n        if (!this.#invalidate) {\n          this.#astCache.set(selector, selectorBranches);\n        }\n      }\n      const { branches } = walkAST(selector);\n      selectorBranches = branches;\n    }\n    if (parentNode) {\n      const walker = this.#walker;\n      let refNode = traverseNode(parentNode, walker);\n      refNode = walker.firstChild();\n      let l = 0;\n      while (refNode) {\n        l++;\n        refNode = walker.nextSibling();\n      }\n      const selectorNodes = new Set();\n      if (selectorBranches) {\n        refNode = traverseNode(parentNode, walker);\n        refNode = walker.firstChild();\n        while (refNode) {\n          if (isVisible(refNode)) {\n            let bool;\n            for (const leaves of selectorBranches) {\n              bool = this._matchLeaves(leaves, refNode, opt);\n              if (!bool) {\n                break;\n              }\n            }\n            if (bool) {\n              selectorNodes.add(refNode);\n            }\n          }\n          refNode = walker.nextSibling();\n        }\n      }\n      // :first-child, :last-child, :nth-child(b of S), :nth-last-child(b of S)\n      if (a === 0) {\n        if (b > 0 && b <= l) {\n          if (selectorNodes.size) {\n            refNode = traverseNode(parentNode, walker);\n            if (reverse) {\n              refNode = walker.lastChild();\n            } else {\n              refNode = walker.firstChild();\n            }\n            let i = 0;\n            while (refNode) {\n              if (selectorNodes.has(refNode)) {\n                if (i === b - 1) {\n                  matched.add(refNode);\n                  break;\n                }\n                i++;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n            }\n          } else if (!selector) {\n            refNode = traverseNode(parentNode, walker);\n            if (reverse) {\n              refNode = walker.lastChild();\n            } else {\n              refNode = walker.firstChild();\n            }\n            let i = 0;\n            while (refNode) {\n              if (i === b - 1) {\n                matched.add(refNode);\n                break;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n              i++;\n            }\n          }\n        }\n      // :nth-child()\n      } else {\n        let nth = b - 1;\n        if (a > 0) {\n          while (nth < 0) {\n            nth += a;\n          }\n        }\n        if (nth >= 0 && nth < l) {\n          refNode = traverseNode(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let i = 0;\n          let j = a > 0 ? 0 : b - 1;\n          while (refNode) {\n            if (refNode && nth >= 0 && nth < l) {\n              if (selectorNodes.size) {\n                if (selectorNodes.has(refNode)) {\n                  if (j === nth) {\n                    matched.add(refNode);\n                    nth += a;\n                  }\n                  if (a > 0) {\n                    j++;\n                  } else {\n                    j--;\n                  }\n                }\n              } else if (i === nth) {\n                if (!selector) {\n                  matched.add(refNode);\n                }\n                nth += a;\n              }\n              if (reverse) {\n                refNode = walker.previousSibling();\n              } else {\n                refNode = walker.nextSibling();\n              }\n              i++;\n            } else {\n              break;\n            }\n          }\n        }\n      }\n      if (reverse && matched.size > 1) {\n        const m = [...matched];\n        return new Set(m.reverse());\n      }\n    } else if (node === this.#root && (a + b) === 1) {\n      if (selectorBranches) {\n        let bool;\n        for (const leaves of selectorBranches) {\n          bool = this._matchLeaves(leaves, node, opt);\n          if (bool) {\n            break;\n          }\n        }\n        if (bool) {\n          matched.add(node);\n        }\n      } else {\n        matched.add(node);\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * collect nth of type\n   * @private\n   * @param {object} anb - An+B options\n   * @param {number} anb.a - a\n   * @param {number} anb.b - b\n   * @param {boolean} [anb.reverse] - reverse order\n   * @param {object} node - Element node\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _collectNthOfType(anb, node) {\n    const { a, b, reverse } = anb;\n    const { localName, namespaceURI, parentNode, prefix } = node;\n    const matched = new Set();\n    if (parentNode) {\n      const walker = this.#walker;\n      let refNode = traverseNode(parentNode, walker);\n      refNode = walker.firstChild();\n      let l = 0;\n      while (refNode) {\n        l++;\n        refNode = walker.nextSibling();\n      }\n      // :first-of-type, :last-of-type\n      if (a === 0) {\n        if (b > 0 && b <= l) {\n          refNode = traverseNode(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let j = 0;\n          while (refNode) {\n            const {\n              localName: itemLocalName, namespaceURI: itemNamespaceURI,\n              prefix: itemPrefix\n            } = refNode;\n            if (itemLocalName === localName && itemPrefix === prefix &&\n                itemNamespaceURI === namespaceURI) {\n              if (j === b - 1) {\n                matched.add(refNode);\n                break;\n              }\n              j++;\n            }\n            if (reverse) {\n              refNode = walker.previousSibling();\n            } else {\n              refNode = walker.nextSibling();\n            }\n          }\n        }\n      // :nth-of-type()\n      } else {\n        let nth = b - 1;\n        if (a > 0) {\n          while (nth < 0) {\n            nth += a;\n          }\n        }\n        if (nth >= 0 && nth < l) {\n          refNode = traverseNode(parentNode, walker);\n          if (reverse) {\n            refNode = walker.lastChild();\n          } else {\n            refNode = walker.firstChild();\n          }\n          let j = a > 0 ? 0 : b - 1;\n          while (refNode) {\n            const {\n              localName: itemLocalName, namespaceURI: itemNamespaceURI,\n              prefix: itemPrefix\n            } = refNode;\n            if (itemLocalName === localName && itemPrefix === prefix &&\n                itemNamespaceURI === namespaceURI) {\n              if (j === nth) {\n                matched.add(refNode);\n                nth += a;\n              }\n              if (nth < 0 || nth >= l) {\n                break;\n              } else if (a > 0) {\n                j++;\n              } else {\n                j--;\n              }\n            }\n            if (reverse) {\n              refNode = walker.previousSibling();\n            } else {\n              refNode = walker.nextSibling();\n            }\n          }\n        }\n      }\n      if (reverse && matched.size > 1) {\n        const m = [...matched];\n        return new Set(m.reverse());\n      }\n    } else if (node === this.#root && (a + b) === 1) {\n      matched.add(node);\n    }\n    return matched;\n  }\n\n  /**\n   * match An+B\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - Element node\n   * @param {string} nthName - nth pseudo-class name\n   * @param {object} opt - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchAnPlusB(ast, node, nthName, opt) {\n    const {\n      nth: {\n        a,\n        b,\n        name: nthIdentName\n      },\n      selector\n    } = ast;\n    const anbMap = new Map();\n    if (nthIdentName) {\n      if (nthIdentName === 'even') {\n        anbMap.set('a', 2);\n        anbMap.set('b', 0);\n      } else if (nthIdentName === 'odd') {\n        anbMap.set('a', 2);\n        anbMap.set('b', 1);\n      }\n      if (nthName.indexOf('last') > -1) {\n        anbMap.set('reverse', true);\n      }\n    } else {\n      if (typeof a === 'string' && /-?\\d+/.test(a)) {\n        anbMap.set('a', a * 1);\n      } else {\n        anbMap.set('a', 0);\n      }\n      if (typeof b === 'string' && /-?\\d+/.test(b)) {\n        anbMap.set('b', b * 1);\n      } else {\n        anbMap.set('b', 0);\n      }\n      if (nthName.indexOf('last') > -1) {\n        anbMap.set('reverse', true);\n      }\n    }\n    if (/^nth-(?:last-)?child$/.test(nthName)) {\n      if (selector) {\n        anbMap.set('selector', selector);\n      }\n      const anb = Object.fromEntries(anbMap);\n      const nodes = this._collectNthChild(anb, node, opt);\n      return nodes;\n    } else if (/^nth-(?:last-)?of-type$/.test(nthName)) {\n      const anb = Object.fromEntries(anbMap);\n      const nodes = this._collectNthOfType(anb, node);\n      return nodes;\n    }\n    return new Set();\n  }\n\n  /**\n   * match :has() pseudo-class function\n   * @private\n   * @param {Array.<object>} astLeaves - AST leaves\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {boolean} - result\n   */\n  _matchHasPseudoFunc(astLeaves, node, opt = {}) {\n    let bool;\n    if (Array.isArray(astLeaves) && astLeaves.length) {\n      const leaves = astLeaves.map(i => i);\n      const [leaf] = leaves;\n      const { type: leafType } = leaf;\n      let combo;\n      if (leafType === COMBINATOR) {\n        combo = leaves.shift();\n      } else {\n        combo = {\n          name: ' ',\n          type: COMBINATOR\n        };\n      }\n      const twigLeaves = [];\n      while (leaves.length) {\n        const [item] = leaves;\n        const { type: itemType } = item;\n        if (itemType === COMBINATOR) {\n          break;\n        } else {\n          twigLeaves.push(leaves.shift());\n        }\n      }\n      const twig = {\n        combo,\n        leaves: twigLeaves\n      };\n      opt.dir = DIR_NEXT;\n      const nodes = this._matchCombinator(twig, node, opt);\n      if (nodes.size) {\n        if (leaves.length) {\n          for (const nextNode of nodes) {\n            bool = this._matchHasPseudoFunc(leaves, nextNode, opt);\n            if (bool) {\n              break;\n            }\n          }\n        } else {\n          bool = true;\n        }\n      }\n    }\n    return !!bool;\n  }\n\n  /**\n   * match logical pseudo-class functions - :has(), :is(), :not(), :where()\n   * @private\n   * @param {object} astData - AST data\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @returns {?object} - matched node\n   */\n  _matchLogicalPseudoFunc(astData, node, opt = {}) {\n    const { astName, branches, twigBranches } = astData;\n    const { isShadowRoot } = opt;\n    let res;\n    if (astName === 'has') {\n      let bool;\n      for (const leaves of branches) {\n        bool = this._matchHasPseudoFunc(leaves, node, opt);\n        if (bool) {\n          break;\n        }\n      }\n      if (bool) {\n        if (isShadowRoot) {\n          if (this.#verifyShadowHost) {\n            res = node;\n          }\n        } else {\n          res = node;\n        }\n      }\n    } else {\n      if (isShadowRoot) {\n        for (const branch of branches) {\n          if (branch.length > 1) {\n            return null;\n          }\n        }\n      }\n      const forgive = /^(?:is|where)$/.test(astName);\n      opt.forgive = forgive;\n      const l = twigBranches.length;\n      let bool;\n      for (let i = 0; i < l; i++) {\n        const branch = twigBranches[i];\n        const lastIndex = branch.length - 1;\n        const { leaves } = branch[lastIndex];\n        bool = this._matchLeaves(leaves, node, opt);\n        if (bool && lastIndex > 0) {\n          let nextNodes = new Set([node]);\n          for (let j = lastIndex - 1; j >= 0; j--) {\n            const twig = branch[j];\n            const arr = [];\n            opt.dir = DIR_PREV;\n            for (const nextNode of nextNodes) {\n              const m = this._matchCombinator(twig, nextNode, opt);\n              if (m.size) {\n                arr.push(...m);\n              }\n            }\n            if (arr.length) {\n              if (j === 0) {\n                bool = true;\n              } else {\n                nextNodes = new Set(arr);\n              }\n            } else {\n              bool = false;\n              break;\n            }\n          }\n        }\n        if (bool) {\n          break;\n        }\n      }\n      if (astName === 'not') {\n        if (!bool) {\n          res = node;\n        }\n      } else if (bool) {\n        res = node;\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match pseudo-class selector\n   * @private\n   * @see https://html.spec.whatwg.org/#pseudo-classes\n   * @param {object} ast - AST\n   * @param {object} node - Element node\n   * @param {object} opt - options\n   * @param {boolean} [opt.forgive] - forgive unknown pseudo-class\n   * @param {boolean} [opt.warn] - warn unsupported pseudo-class\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchPseudoClassSelector(ast, node, opt = {}) {\n    const { children: astChildren, name: astName } = ast;\n    const { localName, parentNode } = node;\n    const {\n      forgive,\n      warn = this.#warn\n    } = opt;\n    const matched = new Set();\n    // :has(), :is(), :not(), :where()\n    if (REG_LOGICAL.test(astName)) {\n      let astData;\n      if (this.#astCache.has(ast)) {\n        astData = this.#astCache.get(ast);\n      } else {\n        const { branches } = walkAST(ast);\n        if (astName === 'has') {\n          for (const child of astChildren) {\n            const item = findAST(child, leaf => {\n              if (REG_LOGICAL.test(leaf.name) &&\n                  findAST(leaf, nestedLeaf => nestedLeaf.name === 'has')) {\n                return leaf;\n              }\n              return null;\n            });\n            if (item) {\n              if (/^(?:is|where)$/.test(item.name)) {\n                return matched;\n              } else {\n                const css = generateCSS(ast);\n                throw new DOMException(`Invalid selector ${css}`, SYNTAX_ERR);\n              }\n            }\n          }\n          astData = {\n            astName,\n            branches\n          };\n        } else {\n          const twigBranches = [];\n          for (const [...leaves] of branches) {\n            const branch = [];\n            const leavesSet = new Set();\n            let item = leaves.shift();\n            while (item) {\n              if (item.type === COMBINATOR) {\n                branch.push({\n                  combo: item,\n                  leaves: [...leavesSet]\n                });\n                leavesSet.clear();\n              } else if (item) {\n                leavesSet.add(item);\n              }\n              if (leaves.length) {\n                item = leaves.shift();\n              } else {\n                branch.push({\n                  combo: null,\n                  leaves: [...leavesSet]\n                });\n                leavesSet.clear();\n                break;\n              }\n            }\n            twigBranches.push(branch);\n          }\n          astData = {\n            astName,\n            branches,\n            twigBranches\n          };\n          if (!this.#invalidate) {\n            this.#astCache.set(ast, astData);\n          }\n        }\n      }\n      const res = this._matchLogicalPseudoFunc(astData, node, opt);\n      if (res) {\n        matched.add(res);\n      }\n    } else if (Array.isArray(astChildren)) {\n      // :nth-child(), :nth-last-child(), nth-of-type(), :nth-last-of-type()\n      if (/^nth-(?:last-)?(?:child|of-type)$/.test(astName)) {\n        const [branch] = astChildren;\n        const nodes = this._matchAnPlusB(branch, node, astName, opt);\n        return nodes;\n      } else {\n        switch (astName) {\n          // :dir(), :lang()\n          case 'dir':\n          case 'lang': {\n            const res = this.#matcher.matchSelector(ast, node, opt, true);\n            if (res) {\n              matched.add(res);\n            }\n            break;\n          }\n          // :state()\n          case 'state': {\n            if (isCustomElement(node)) {\n              const [{ value: stateValue }] = astChildren;\n              if (stateValue) {\n                if (node[stateValue]) {\n                  matched.add(node);\n                } else {\n                  for (const i in node) {\n                    const prop = node[i];\n                    if (prop instanceof this.#window.ElementInternals) {\n                      if (prop?.states?.has(stateValue)) {\n                        matched.add(node);\n                      }\n                      break;\n                    }\n                  }\n                }\n              }\n            }\n            break;\n          }\n          case 'current':\n          case 'nth-col':\n          case 'nth-last-col': {\n            if (warn) {\n              throw new DOMException(`Unsupported pseudo-class :${astName}()`,\n                NOT_SUPPORTED_ERR);\n            }\n            break;\n          }\n          case 'host':\n          case 'host-context': {\n            // ignore\n            break;\n          }\n          // dropped from CSS Selectors 3\n          case 'contains': {\n            if (warn) {\n              throw new DOMException(`Unknown pseudo-class :${astName}()`,\n                NOT_SUPPORTED_ERR);\n            }\n            break;\n          }\n          default: {\n            if (!forgive) {\n              throw new DOMException(`Unknown pseudo-class :${astName}()`,\n                SYNTAX_ERR);\n            }\n          }\n        }\n      }\n    } else {\n      switch (astName) {\n        case 'any-link':\n        case 'link': {\n          if (REG_ANCHOR.test(localName) && node.hasAttribute('href')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'local-link': {\n          if (REG_ANCHOR.test(localName) && node.hasAttribute('href')) {\n            const { href, origin, pathname } = new URL(this.#document.URL);\n            const attrURL = new URL(node.getAttribute('href'), href);\n            if (attrURL.origin === origin && attrURL.pathname === pathname) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'visited': {\n          // prevent fingerprinting\n          break;\n        }\n        case 'hover': {\n          const { target, type } = this.#event ?? {};\n          if (/^(?:mouse|pointer)(?:down|over|up)$/.test(type) &&\n              node.contains(target)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'active': {\n          const { buttons, target, type } = this.#event ?? {};\n          if (/(?:mouse|pointer)down/.test(type) && buttons & BIT_01 &&\n              node.contains(target)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'target': {\n          const { hash } = new URL(this.#document.URL);\n          if (node.id && hash === `#${node.id}` &&\n              this.#document.contains(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'target-within': {\n          const { hash } = new URL(this.#document.URL);\n          if (hash) {\n            const id = hash.replace(/^#/, '');\n            let current = this.#document.getElementById(id);\n            while (current) {\n              if (current === node) {\n                matched.add(node);\n                break;\n              }\n              current = current.parentNode;\n            }\n          }\n          break;\n        }\n        case 'scope': {\n          if (this.#node.nodeType === ELEMENT_NODE) {\n            if (!this.#shadow && node === this.#node) {\n              matched.add(node);\n            }\n          } else if (node === this.#document.documentElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'focus': {\n          if (node === this.#document.activeElement && node.tabIndex >= 0 &&\n              isFocusable(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'focus-visible': {\n          if (node === this.#document.activeElement && node.tabIndex >= 0) {\n            let bool;\n            if (isFocusVisible(node)) {\n              bool = true;\n            } else {\n              const { target: eventTarget, type } = this.#event ?? {};\n              const { target: focusTarget, relatedTarget } = this.#focus ?? {};\n              if (/^key(?:down|up)$/.test(type) && node.contains(eventTarget)) {\n                bool = true;\n              } else if (relatedTarget && isFocusVisible(relatedTarget) &&\n                         node.contains(focusTarget)) {\n                bool = true;\n              }\n            }\n            if (bool && isFocusable(node)) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'focus-within': {\n          let bool;\n          let current = this.#document.activeElement;\n          if (current.tabIndex >= 0) {\n            while (current) {\n              if (current === node) {\n                bool = true;\n                break;\n              }\n              current = current.parentNode;\n            }\n          }\n          if (bool && isFocusable(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'open': {\n          if (REG_INTERACT.test(localName) && node.hasAttribute('open')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'closed': {\n          if (REG_INTERACT.test(localName) && !node.hasAttribute('open')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'disabled': {\n          if (REG_FORM_CTRL.test(localName) ||\n              isCustomElement(node, { formAssociated: true })) {\n            if (node.disabled || node.hasAttribute('disabled')) {\n              matched.add(node);\n            } else if (node.localName === 'option') {\n              if (parentNode.localName === 'optgroup' &&\n                  (parentNode.disabled ||\n                   parentNode.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n            } else if (node.localName !== 'optgroup') {\n              let bool;\n              let parent = parentNode;\n              while (parent) {\n                if (parent.localName === 'fieldset' &&\n                    (parent.disabled || parent.hasAttribute('disabled'))) {\n                  const walker = this.#walker;\n                  let refNode = traverseNode(parent, walker);\n                  refNode = walker.firstChild();\n                  while (refNode) {\n                    if (refNode.localName === 'legend') {\n                      break;\n                    }\n                    refNode = walker.nextSibling();\n                  }\n                  if (refNode) {\n                    if (!refNode.contains(node)) {\n                      bool = true;\n                    }\n                  } else {\n                    bool = true;\n                  }\n                  break;\n                } else if (parent.localName === 'form') {\n                  break;\n                } else if (parent.parentNode?.nodeType === ELEMENT_NODE) {\n                  if (parent.parentNode.localName === 'form') {\n                    break;\n                  } else {\n                    parent = parent.parentNode;\n                  }\n                } else {\n                  break;\n                }\n              }\n              if (bool) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'enabled': {\n          if ((REG_FORM_CTRL.test(localName) ||\n               isCustomElement(node, { formAssociated: true })) &&\n              !(node.disabled && node.hasAttribute('disabled'))) {\n            if (node.localName === 'optgroup') {\n              matched.add(node);\n            } else if (node.localName === 'option') {\n              if (parentNode.localName !== 'optgroup' ||\n                  !(parentNode.disabled ||\n                    parentNode.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n            } else {\n              let bool;\n              let parent = parentNode;\n              while (parent) {\n                if (parent.localName === 'fieldset' &&\n                    (parent.disabled || parent.hasAttribute('disabled'))) {\n                  const walker = this.#walker;\n                  let refNode = traverseNode(parent, walker);\n                  refNode = walker.firstChild();\n                  while (refNode) {\n                    if (refNode.localName === 'legend') {\n                      break;\n                    }\n                    refNode = walker.nextSibling();\n                  }\n                  if (refNode) {\n                    if (!refNode.contains(node)) {\n                      bool = true;\n                    }\n                  } else {\n                    bool = true;\n                  }\n                  break;\n                } else if (parent.localName === 'form') {\n                  break;\n                } else if (parent.parentNode?.nodeType === ELEMENT_NODE) {\n                  if (parent.parentNode.localName === 'form') {\n                    break;\n                  } else {\n                    parent = parent.parentNode;\n                  }\n                } else {\n                  break;\n                }\n              }\n              if (!bool) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'read-only': {\n          switch (localName) {\n            case 'textarea': {\n              if (node.readonly || node.hasAttribute('readonly') ||\n                  node.disabled || node.hasAttribute('disabled')) {\n                matched.add(node);\n              }\n              break;\n            }\n            case 'input': {\n              if ((!node.type || REG_INPUT_TYPE.test(node.type)) &&\n                  (node.readonly || node.hasAttribute('readonly') ||\n                   node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            default: {\n              if (!isContentEditable(node)) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'read-write': {\n          switch (localName) {\n            case 'textarea': {\n              if (!(node.readonly || node.hasAttribute('readonly') ||\n                    node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            case 'input': {\n              if ((!node.type || REG_INPUT_TYPE.test(node.type)) &&\n                  !(node.readonly || node.hasAttribute('readonly') ||\n                    node.disabled || node.hasAttribute('disabled'))) {\n                matched.add(node);\n              }\n              break;\n            }\n            default: {\n              if (isContentEditable(node)) {\n                matched.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case 'placeholder-shown': {\n          let placeholder;\n          if (node.placeholder) {\n            placeholder = node.placeholder;\n          } else if (node.hasAttribute('placeholder')) {\n            placeholder = node.getAttribute('placeholder');\n          }\n          if (typeof placeholder === 'string' && !/[\\r\\n]/.test(placeholder)) {\n            let targetNode;\n            if (localName === 'textarea') {\n              targetNode = node;\n            } else if (localName === 'input') {\n              if (node.hasAttribute('type')) {\n                if (REG_TYPE_TEXT.test(node.getAttribute('type'))) {\n                  targetNode = node;\n                }\n              } else {\n                targetNode = node;\n              }\n            }\n            if (targetNode && node.value === '') {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'checked': {\n          if ((node.checked && localName === 'input' &&\n               node.hasAttribute('type') &&\n               REG_TYPE_CHECK.test(node.getAttribute('type'))) ||\n              (node.selected && localName === 'option')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'indeterminate': {\n          if ((node.indeterminate && localName === 'input' &&\n               node.type === 'checkbox') ||\n              (localName === 'progress' && !node.hasAttribute('value'))) {\n            matched.add(node);\n          } else if (localName === 'input' && node.type === 'radio' &&\n                     !node.hasAttribute('checked')) {\n            const nodeName = node.name;\n            let parent = node.parentNode;\n            while (parent) {\n              if (parent.localName === 'form') {\n                break;\n              }\n              parent = parent.parentNode;\n            }\n            if (!parent) {\n              parent = this.#document.documentElement;\n            }\n            const items = parent.getElementsByTagName('input');\n            const l = items.length;\n            let checked;\n            for (let i = 0; i < l; i++) {\n              const item = items[i];\n              if (item.getAttribute('type') === 'radio') {\n                if (nodeName) {\n                  if (item.getAttribute('name') === nodeName) {\n                    checked = !!item.checked;\n                  }\n                } else if (!item.hasAttribute('name')) {\n                  checked = !!item.checked;\n                }\n                if (checked) {\n                  break;\n                }\n              }\n            }\n            if (!checked) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'default': {\n          // button[type=\"submit\"], input[type=\"submit\"], input[type=\"image\"]\n          if ((localName === 'button' &&\n               !(node.hasAttribute('type') &&\n                 REG_TYPE_RESET.test(node.getAttribute('type')))) ||\n              (localName === 'input' && node.hasAttribute('type') &&\n               REG_TYPE_SUBMIT.test(node.getAttribute('type')))) {\n            let form = node.parentNode;\n            while (form) {\n              if (form.localName === 'form') {\n                break;\n              }\n              form = form.parentNode;\n            }\n            if (form) {\n              const walker = this.#walker;\n              let nextNode = traverseNode(form, walker);\n              nextNode = walker.firstChild();\n              while (nextNode && form.contains(nextNode)) {\n                const nodeName = nextNode.localName;\n                let m;\n                if (nodeName === 'button') {\n                  m = !(nextNode.hasAttribute('type') &&\n                    REG_TYPE_RESET.test(nextNode.getAttribute('type')));\n                } else if (nodeName === 'input') {\n                  m = nextNode.hasAttribute('type') &&\n                    REG_TYPE_SUBMIT.test(nextNode.getAttribute('type'));\n                }\n                if (m) {\n                  if (nextNode === node) {\n                    matched.add(node);\n                  }\n                  break;\n                }\n                nextNode = walker.nextNode();\n              }\n            }\n          // input[type=\"checkbox\"], input[type=\"radio\"]\n          } else if (localName === 'input' && node.hasAttribute('type') &&\n                     REG_TYPE_CHECK.test(node.getAttribute('type')) &&\n                     node.hasAttribute('checked')) {\n            matched.add(node);\n          // option\n          } else if (localName === 'option' && node.hasAttribute('selected')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'valid': {\n          if (REG_FORM_VALID.test(localName)) {\n            if (node.checkValidity()) {\n              if (node.maxLength >= 0) {\n                if (node.maxLength >= node.value.length) {\n                  matched.add(node);\n                }\n              } else {\n                matched.add(node);\n              }\n            }\n          } else if (localName === 'fieldset') {\n            const walker = this.#walker;\n            let refNode = traverseNode(node, walker);\n            refNode = walker.firstChild();\n            let bool;\n            if (!refNode) {\n              bool = true;\n            } else {\n              while (refNode && node.contains(refNode)) {\n                if (REG_FORM_VALID.test(refNode.localName)) {\n                  if (refNode.checkValidity()) {\n                    if (refNode.maxLength >= 0) {\n                      bool = refNode.maxLength >= refNode.value.length;\n                    } else {\n                      bool = true;\n                    }\n                  } else {\n                    bool = false;\n                  }\n                  if (!bool) {\n                    break;\n                  }\n                }\n                refNode = walker.nextNode();\n              }\n            }\n            if (bool) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'invalid': {\n          if (REG_FORM_VALID.test(localName)) {\n            if (node.checkValidity()) {\n              if (node.maxLength >= 0 && node.maxLength < node.value.length) {\n                matched.add(node);\n              }\n            } else {\n              matched.add(node);\n            }\n          } else if (localName === 'fieldset') {\n            const walker = this.#walker;\n            let refNode = traverseNode(node, walker);\n            refNode = walker.firstChild();\n            let bool;\n            if (!refNode) {\n              bool = true;\n            } else {\n              while (refNode && node.contains(refNode)) {\n                if (REG_FORM_VALID.test(refNode.localName)) {\n                  if (refNode.checkValidity()) {\n                    if (refNode.maxLength >= 0) {\n                      bool = refNode.maxLength >= refNode.value.length;\n                    } else {\n                      bool = true;\n                    }\n                  } else {\n                    bool = false;\n                  }\n                  if (!bool) {\n                    break;\n                  }\n                }\n                refNode = walker.nextNode();\n              }\n            }\n            if (!bool) {\n              matched.add(node);\n            }\n          }\n          break;\n        }\n        case 'in-range': {\n          if (localName === 'input' &&\n              !(node.readonly || node.hasAttribute('readonly')) &&\n              !(node.disabled || node.hasAttribute('disabled')) &&\n              node.hasAttribute('type') &&\n              REG_TYPE_RANGE.test(node.getAttribute('type')) &&\n              !(node.validity.rangeUnderflow ||\n                node.validity.rangeOverflow) &&\n              (node.hasAttribute('min') || node.hasAttribute('max') ||\n               node.getAttribute('type') === 'range')) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'out-of-range': {\n          if (localName === 'input' &&\n              !(node.readonly || node.hasAttribute('readonly')) &&\n              !(node.disabled || node.hasAttribute('disabled')) &&\n              node.hasAttribute('type') &&\n              REG_TYPE_RANGE.test(node.getAttribute('type')) &&\n              (node.validity.rangeUnderflow || node.validity.rangeOverflow)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'required': {\n          let targetNode;\n          if (/^(?:select|textarea)$/.test(localName)) {\n            targetNode = node;\n          } else if (localName === 'input') {\n            if (node.hasAttribute('type')) {\n              const inputType = node.getAttribute('type');\n              if (inputType === 'file' || REG_TYPE_CHECK.test(inputType) ||\n                  REG_INPUT_TYPE.test(inputType)) {\n                targetNode = node;\n              }\n            } else {\n              targetNode = node;\n            }\n          }\n          if (targetNode &&\n              (node.required || node.hasAttribute('required'))) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'optional': {\n          let targetNode;\n          if (/^(?:select|textarea)$/.test(localName)) {\n            targetNode = node;\n          } else if (localName === 'input') {\n            if (node.hasAttribute('type')) {\n              const inputType = node.getAttribute('type');\n              if (inputType === 'file' || REG_TYPE_CHECK.test(inputType) ||\n                  REG_INPUT_TYPE.test(inputType)) {\n                targetNode = node;\n              }\n            } else {\n              targetNode = node;\n            }\n          }\n          if (targetNode &&\n              !(node.required || node.hasAttribute('required'))) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'root': {\n          if (node === this.#document.documentElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'empty': {\n          if (node.hasChildNodes()) {\n            const walker = this.#document.createTreeWalker(node, SHOW_ALL);\n            let refNode = walker.firstChild();\n            let bool;\n            while (refNode) {\n              bool = refNode.nodeType !== ELEMENT_NODE &&\n                refNode.nodeType !== TEXT_NODE;\n              if (!bool) {\n                break;\n              }\n              refNode = walker.nextSibling();\n            }\n            if (bool) {\n              matched.add(node);\n            }\n          } else {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'first-child': {\n          if ((parentNode && node === parentNode.firstElementChild) ||\n              node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'last-child': {\n          if ((parentNode && node === parentNode.lastElementChild) ||\n              node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'only-child': {\n          if ((parentNode && node === parentNode.firstElementChild &&\n               node === parentNode.lastElementChild) || node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'first-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1\n            }, node);\n            if (node1) {\n              matched.add(node1);\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'last-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1,\n              reverse: true\n            }, node);\n            if (node1) {\n              matched.add(node1);\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'only-of-type': {\n          if (parentNode) {\n            const [node1] = this._collectNthOfType({\n              a: 0,\n              b: 1\n            }, node);\n            if (node1 === node) {\n              const [node2] = this._collectNthOfType({\n                a: 0,\n                b: 1,\n                reverse: true\n              }, node);\n              if (node2 === node) {\n                matched.add(node);\n              }\n            }\n          } else if (node === this.#root) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'defined': {\n          if (node.hasAttribute('is') || localName.includes('-')) {\n            if (isCustomElement(node)) {\n              matched.add(node);\n            }\n          // NOTE: MathMLElement not implemented in jsdom\n          } else if (node instanceof this.#window.HTMLElement ||\n                     node instanceof this.#window.SVGElement) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'popover-open': {\n          if (node.popover && isVisible(node)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case 'host':\n        case 'host-context': {\n          // ignore\n          break;\n        }\n        // legacy pseudo-elements\n        case 'after':\n        case 'before':\n        case 'first-letter':\n        case 'first-line': {\n          if (warn) {\n            throw new DOMException(`Unsupported pseudo-element ::${astName}`,\n              NOT_SUPPORTED_ERR);\n          }\n          break;\n        }\n        // not supported\n        case 'autofill':\n        case 'blank':\n        case 'buffering':\n        case 'current':\n        case 'fullscreen':\n        case 'future':\n        case 'modal':\n        case 'muted':\n        case 'past':\n        case 'paused':\n        case 'picture-in-picture':\n        case 'playing':\n        case 'seeking':\n        case 'stalled':\n        case 'user-invalid':\n        case 'user-valid':\n        case 'volume-locked':\n        case '-webkit-autofill': {\n          if (warn) {\n            throw new DOMException(`Unsupported pseudo-class :${astName}`,\n              NOT_SUPPORTED_ERR);\n          }\n          break;\n        }\n        default: {\n          if (astName.startsWith('-webkit-')) {\n            if (warn) {\n              throw new DOMException(`Unsupported pseudo-class :${astName}`,\n                NOT_SUPPORTED_ERR);\n            }\n          } else if (!forgive) {\n            throw new DOMException(`Unknown pseudo-class :${astName}`,\n              SYNTAX_ERR);\n          }\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * match shadow host pseudo class\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - DocumentFragment node\n   * @returns {?object} - matched node\n   */\n  _matchShadowHostPseudoClass(ast, node) {\n    const { children: astChildren, name: astName } = ast;\n    let res;\n    if (Array.isArray(astChildren)) {\n      const { branches } = walkAST(astChildren[0]);\n      const [branch] = branches;\n      const [...leaves] = branch;\n      const { host } = node;\n      if (astName === 'host') {\n        let bool;\n        for (const leaf of leaves) {\n          const { type: leafType } = leaf;\n          if (leafType === COMBINATOR) {\n            const css = generateCSS(ast);\n            throw new DOMException(`Invalid selector ${css}`, SYNTAX_ERR);\n          }\n          bool = this._matchSelector(leaf, host).has(host);\n          if (!bool) {\n            break;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      } else if (astName === 'host-context') {\n        let parent = host;\n        let bool;\n        while (parent) {\n          for (const leaf of leaves) {\n            const { type: leafType } = leaf;\n            if (leafType === COMBINATOR) {\n              const css = generateCSS(ast);\n              throw new DOMException(`Invalid selector ${css}`, SYNTAX_ERR);\n            }\n            bool = this._matchSelector(leaf, parent).has(parent);\n            if (!bool) {\n              break;\n            }\n          }\n          if (bool) {\n            break;\n          } else {\n            parent = parent.parentNode;\n          }\n        }\n        if (bool) {\n          res = node;\n        }\n      }\n    } else if (astName === 'host') {\n      res = node;\n    } else {\n      throw new DOMException(`Invalid selector :${astName}`, SYNTAX_ERR);\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match selector\n   * @private\n   * @param {object} ast - AST\n   * @param {object} node - Document, DocumentFragment, Element node\n   * @param {object} [opt] - options\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchSelector(ast, node, opt = {}) {\n    const { type: astType } = ast;\n    const matched = new Set();\n    if (ast.name === EMPTY) {\n      return matched;\n    }\n    const astName = unescapeSelector(ast.name);\n    if (typeof astName === 'string' && astName !== ast.name) {\n      ast.name = astName;\n    }\n    if (node.nodeType === ELEMENT_NODE) {\n      switch (astType) {\n        case PS_ELEMENT_SELECTOR: {\n          this.#matcher.matchPseudoElementSelector(astName, opt);\n          break;\n        }\n        case ID_SELECTOR: {\n          if (node.id === astName) {\n            matched.add(node);\n          }\n          break;\n        }\n        case CLASS_SELECTOR: {\n          if (node.classList.contains(astName)) {\n            matched.add(node);\n          }\n          break;\n        }\n        case PS_CLASS_SELECTOR: {\n          const nodes = this._matchPseudoClassSelector(ast, node, opt);\n          return nodes;\n        }\n        default: {\n          const res = this.#matcher.matchSelector(ast, node, opt, true);\n          if (res) {\n            matched.add(res);\n          }\n        }\n      }\n    } else if (this.#shadow && astType === PS_CLASS_SELECTOR &&\n               node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n      if (REG_LOGICAL.test(astName)) {\n        opt.isShadowRoot = true;\n        const nodes = this._matchPseudoClassSelector(ast, node, opt);\n        return nodes;\n      } else if (REG_SHADOW_HOST.test(astName)) {\n        const res = this._matchShadowHostPseudoClass(ast, node, opt);\n        if (res) {\n          this.#verifyShadowHost = true;\n          matched.add(res);\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * match leaves\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} node - node\n   * @param {object} opt - options\n   * @returns {boolean} - result\n   */\n  _matchLeaves(leaves, node, opt) {\n    let bool;\n    let result;\n    if (this.#invalidate) {\n      result = this.#invalidateResults.get(leaves);\n    } else {\n      result = this.#results.get(leaves);\n    }\n    if (result && result.has(node)) {\n      const { matched } = result.get(node);\n      bool = matched;\n    }\n    if (typeof bool !== 'boolean') {\n      let cacheable = true;\n      if (node.nodeType === ELEMENT_NODE &&\n          /^(?:button|fieldset|form|input|select|textarea)$/.test(node.localName)) {\n        cacheable = false;\n      }\n      for (const leaf of leaves) {\n        switch (leaf.type) {\n          case ATTR_SELECTOR:\n          case ID_SELECTOR: {\n            cacheable = false;\n            break;\n          }\n          case PS_CLASS_SELECTOR: {\n            if (/^(?:(?:any-)?link|defined|dir)$/.test(leaf.name)) {\n              cacheable = false;\n            }\n            break;\n          }\n          default:\n        }\n        bool = this._matchSelector(leaf, node, opt).has(node);\n        if (!bool) {\n          break;\n        }\n      }\n      if (cacheable) {\n        if (!result) {\n          result = new WeakMap();\n        }\n        result.set(node, {\n          matched: bool\n        });\n        if (this.#invalidate) {\n          this.#invalidateResults.set(leaves, result);\n        } else {\n          this.#results.set(leaves, result);\n        }\n      }\n    }\n    return !!bool;\n  }\n\n  /**\n   * match HTML collection\n   * @private\n   * @param {object} items - HTML collection\n   * @param {object} opt - options\n   * @returns {Set.<object>} - matched nodes\n   */\n  _matchHTMLCollection(items, opt = {}) {\n    const { compound, filterLeaves } = opt;\n    const nodes = new Set();\n    const l = items.length;\n    if (l) {\n      if (compound) {\n        for (let i = 0; i < l; i++) {\n          const item = items[i];\n          const bool = this._matchLeaves(filterLeaves, item, opt);\n          if (bool) {\n            nodes.add(item);\n          }\n        }\n      } else {\n        const arr = [].slice.call(items);\n        return new Set(arr);\n      }\n    }\n    return nodes;\n  }\n\n  /**\n   * find descendant nodes\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} baseNode - base Element node\n   * @param {object} opt - options\n   * @returns {object} - collection of nodes and pending state\n   */\n  _findDescendantNodes(leaves, baseNode, opt) {\n    const [leaf, ...filterLeaves] = leaves;\n    const compound = filterLeaves.length > 0;\n    const { type: leafType } = leaf;\n    const leafName = unescapeSelector(leaf.name);\n    if (typeof leafName === 'string' && leafName !== leaf.name) {\n      leaf.name = leafName;\n    }\n    let nodes = new Set();\n    let pending = false;\n    if (this.#shadow) {\n      pending = true;\n    } else {\n      switch (leafType) {\n        case PS_ELEMENT_SELECTOR: {\n          this.#matcher.matchPseudoElementSelector(leafName, opt);\n          break;\n        }\n        case ID_SELECTOR: {\n          if (this.#root.nodeType === ELEMENT_NODE) {\n            pending = true;\n          } else {\n            const node = this.#root.getElementById(leafName);\n            if (node && node !== baseNode && baseNode.contains(node)) {\n              if (compound) {\n                const bool = this._matchLeaves(filterLeaves, node, opt);\n                if (bool) {\n                  nodes.add(node);\n                }\n              } else {\n                nodes.add(node);\n              }\n            }\n          }\n          break;\n        }\n        case CLASS_SELECTOR: {\n          const items = baseNode.getElementsByClassName(leafName);\n          nodes = this._matchHTMLCollection(items, {\n            compound,\n            filterLeaves\n          });\n          break;\n        }\n        case TYPE_SELECTOR: {\n          if (this.#document.contentType === 'text/html' &&\n              !/[*|]/.test(leafName)) {\n            const items = baseNode.getElementsByTagName(leafName);\n            nodes = this._matchHTMLCollection(items, {\n              compound,\n              filterLeaves\n            });\n          } else {\n            pending = true;\n          }\n          break;\n        }\n        default: {\n          pending = true;\n        }\n      }\n    }\n    return {\n      nodes,\n      pending\n    };\n  }\n\n  /**\n   * match combinator\n   * @private\n   * @param {object} twig - twig\n   * @param {object} node - Element node\n   * @param {object} opt - option\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  _matchCombinator(twig, node, opt = {}) {\n    const { combo, leaves } = twig;\n    const { name: comboName } = combo;\n    const { parentNode } = node;\n    const { dir } = opt;\n    const matched = new Set();\n    if (dir === DIR_NEXT) {\n      switch (comboName) {\n        case '+': {\n          const refNode = node.nextElementSibling;\n          if (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n          }\n          break;\n        }\n        case '~': {\n          if (parentNode) {\n            const walker = this._createTreeWalker(parentNode);\n            let refNode = traverseNode(node, walker);\n            refNode = walker.nextSibling();\n            while (refNode) {\n              const bool = this._matchLeaves(leaves, refNode, opt);\n              if (bool) {\n                matched.add(refNode);\n              }\n              refNode = walker.nextSibling();\n            }\n          }\n          break;\n        }\n        case '>': {\n          const walker = this._createTreeWalker(node);\n          let refNode = traverseNode(node, walker);\n          refNode = walker.firstChild();\n          while (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n            refNode = walker.nextSibling();\n          }\n          break;\n        }\n        case ' ':\n        default: {\n          const { nodes, pending } = this._findDescendantNodes(leaves, node);\n          if (nodes.size) {\n            return nodes;\n          }\n          if (pending) {\n            const walker = this._createTreeWalker(node);\n            let refNode = traverseNode(node, walker);\n            refNode = walker.nextNode();\n            while (refNode && node.contains(refNode)) {\n              const bool = this._matchLeaves(leaves, refNode, opt);\n              if (bool) {\n                matched.add(refNode);\n              }\n              refNode = walker.nextNode();\n            }\n          }\n        }\n      }\n    } else {\n      switch (comboName) {\n        case '+': {\n          const refNode = node.previousElementSibling;\n          if (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              matched.add(refNode);\n            }\n          }\n          break;\n        }\n        case '~': {\n          if (parentNode) {\n            const walker = this._createTreeWalker(parentNode);\n            let refNode = traverseNode(parentNode, walker);\n            refNode = walker.firstChild();\n            while (refNode) {\n              if (refNode === node) {\n                break;\n              } else {\n                const bool = this._matchLeaves(leaves, refNode, opt);\n                if (bool) {\n                  matched.add(refNode);\n                }\n              }\n              refNode = walker.nextSibling();\n            }\n          }\n          break;\n        }\n        case '>': {\n          if (parentNode) {\n            const bool = this._matchLeaves(leaves, parentNode, opt);\n            if (bool) {\n              matched.add(parentNode);\n            }\n          }\n          break;\n        }\n        case ' ':\n        default: {\n          const arr = [];\n          let refNode = parentNode;\n          while (refNode) {\n            const bool = this._matchLeaves(leaves, refNode, opt);\n            if (bool) {\n              arr.push(refNode);\n            }\n            refNode = refNode.parentNode;\n          }\n          if (arr.length) {\n            return new Set(arr.reverse());\n          }\n        }\n      }\n    }\n    return matched;\n  }\n\n  /**\n   * find matched node from #qswalker\n   * @private\n   * @param {Array.<object>} leaves - AST leaves\n   * @param {object} [opt] - options\n   * @param {object} [opt.node] - node to start from\n   * @returns {?object} - matched node\n   */\n  _findNode(leaves, opt) {\n    const { node } = opt;\n    const walker = this.#qswalker;\n    let refNode = traverseNode(node, walker);\n    let matchedNode;\n    if (refNode) {\n      if (refNode.nodeType !== ELEMENT_NODE) {\n        refNode = walker.nextNode();\n      } else if (refNode === node) {\n        if (refNode !== this.#root) {\n          refNode = walker.nextNode();\n        }\n      }\n      while (refNode) {\n        const matched = this._matchLeaves(leaves, refNode, {\n          warn: this.#warn\n        });\n        if (matched) {\n          matchedNode = refNode;\n          break;\n        }\n        refNode = walker.nextNode();\n      }\n    }\n    return matchedNode ?? null;\n  }\n\n  /**\n   * match self\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _matchSelf(leaves) {\n    const nodes = [];\n    const bool = this._matchLeaves(leaves, this.#node, {\n      warn: this.#warn\n    });\n    let filtered = false;\n    if (bool) {\n      nodes.push(this.#node);\n      filtered = true;\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find lineal\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @param {object} opt - options\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findLineal(leaves, opt = {}) {\n    const { complex } = opt;\n    const nodes = [];\n    let bool = this._matchLeaves(leaves, this.#node, {\n      warn: this.#warn\n    });\n    let filtered = false;\n    if (bool) {\n      nodes.push(this.#node);\n      filtered = true;\n    }\n    if (!bool || complex) {\n      let refNode = this.#node.parentNode;\n      while (refNode) {\n        bool = this._matchLeaves(leaves, refNode, {\n          warn: this.#warn\n        });\n        if (bool) {\n          nodes.push(refNode);\n          filtered = true;\n        }\n        if (refNode.parentNode) {\n          refNode = refNode.parentNode;\n        } else {\n          break;\n        }\n      }\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find first\n   * @private\n   * @param {Array} leaves - AST leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findFirst(leaves) {\n    const nodes = [];\n    const node = this._findNode(leaves, {\n      node: this.#node\n    });\n    let filtered = false;\n    if (node) {\n      nodes.push(node);\n      filtered = true;\n    }\n    return [nodes, filtered];\n  }\n\n  /**\n   * find from HTML collection\n   * @private\n   * @param {object} items - HTML collection\n   * @param {object} opt - options\n   * @param {boolean} [opt.compound] - compound selector\n   * @param {Array} [opt.filterLeaves] - filter leaves\n   * @returns {Array} - [nodes, filtered]\n   */\n  _findFromHTMLCollection(items, opt = {}) {\n    const { complex, compound, filterLeaves, targetType } = opt;\n    let nodes = [];\n    let filtered = false;\n    let collected = false;\n    const l = items.length;\n    if (l) {\n      if (this.#node.nodeType === ELEMENT_NODE) {\n        for (let i = 0; i < l; i++) {\n          const node = items[i];\n          if (node !== this.#node &&\n              (this.#node.contains(node) || node.contains(this.#node))) {\n            if (compound) {\n              const bool = this._matchLeaves(filterLeaves, node, {\n                warn: this.#warn\n              });\n              if (bool) {\n                nodes.push(node);\n                filtered = true;\n                if (targetType === TARGET_FIRST) {\n                  break;\n                }\n              }\n            } else {\n              nodes.push(node);\n              filtered = true;\n              if (targetType === TARGET_FIRST) {\n                break;\n              }\n            }\n          }\n        }\n      } else if (complex) {\n        if (compound) {\n          for (let i = 0; i < l; i++) {\n            const node = items[i];\n            const bool = this._matchLeaves(filterLeaves, node, {\n              warn: this.#warn\n            });\n            if (bool) {\n              nodes.push(node);\n              filtered = true;\n              if (targetType === TARGET_FIRST) {\n                break;\n              }\n            }\n          }\n        } else {\n          nodes = [].slice.call(items);\n          filtered = true;\n          collected = true;\n        }\n      } else if (compound) {\n        for (let i = 0; i < l; i++) {\n          const node = items[i];\n          const bool = this._matchLeaves(filterLeaves, node, {\n            warn: this.#warn\n          });\n          if (bool) {\n            nodes.push(node);\n            filtered = true;\n            if (targetType === TARGET_FIRST) {\n              break;\n            }\n          }\n        }\n      } else {\n        nodes = [].slice.call(items);\n        filtered = true;\n        collected = true;\n      }\n    }\n    return [nodes, filtered, collected];\n  }\n\n  /**\n   * find entry nodes\n   * @private\n   * @param {object} twig - twig\n   * @param {string} targetType - target type\n   * @param {boolean} complex - complex selector\n   * @returns {object} - collection of nodes etc.\n   */\n  _findEntryNodes(twig, targetType, complex) {\n    const { leaves } = twig;\n    const [leaf, ...filterLeaves] = leaves;\n    const compound = filterLeaves.length > 0;\n    const { name: leafName, type: leafType } = leaf;\n    let nodes = [];\n    let collected = false;\n    let filtered = false;\n    let pending = false;\n    switch (leafType) {\n      case PS_ELEMENT_SELECTOR: {\n        this.#matcher.matchPseudoElementSelector(leafName, {\n          warn: this.#warn\n        });\n        break;\n      }\n      case ID_SELECTOR: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (targetType === TARGET_FIRST &&\n                   this.#root.nodeType !== ELEMENT_NODE) {\n          const node = this.#root.getElementById(leafName);\n          if (node) {\n            if (compound) {\n              const bool = this._matchLeaves(filterLeaves, node, {\n                warn: this.#warn\n              });\n              if (bool) {\n                nodes.push(node);\n                filtered = true;\n              }\n            } else {\n              nodes.push(node);\n              filtered = true;\n            }\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      case CLASS_SELECTOR: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (this.#root.nodeType === DOCUMENT_NODE) {\n          const items = this.#root.getElementsByClassName(leafName);\n          if (items.length) {\n            [nodes, filtered, collected] = this._findFromHTMLCollection(items, {\n              complex,\n              compound,\n              filterLeaves,\n              targetType\n            });\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      case TYPE_SELECTOR: {\n        if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (this.#document.contentType === 'text/html' &&\n                   this.#root.nodeType === DOCUMENT_NODE &&\n                   !/[*|]/.test(leafName)) {\n          const items = this.#root.getElementsByTagName(leafName);\n          if (items.length) {\n            [nodes, filtered, collected] = this._findFromHTMLCollection(items, {\n              complex,\n              compound,\n              filterLeaves,\n              targetType\n            });\n          }\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n        break;\n      }\n      default: {\n        if (targetType !== TARGET_LINEAL && REG_SHADOW_HOST.test(leafName)) {\n          if (this.#shadow &&\n              this.#node.nodeType === DOCUMENT_FRAGMENT_NODE) {\n            const node = this._matchShadowHostPseudoClass(leaf, this.#node);\n            if (node) {\n              nodes.push(node);\n              filtered = true;\n            }\n          }\n        } else if (targetType === TARGET_SELF) {\n          [nodes, filtered] = this._matchSelf(leaves);\n        } else if (targetType === TARGET_LINEAL) {\n          [nodes, filtered] = this._findLineal(leaves, {\n            complex\n          });\n        } else if (targetType === TARGET_FIRST) {\n          [nodes, filtered] = this._findFirst(leaves);\n        } else {\n          pending = true;\n        }\n      }\n    }\n    return {\n      collected,\n      compound,\n      filtered,\n      nodes,\n      pending\n    };\n  }\n\n  /**\n   * collect nodes\n   * @private\n   * @param {string} targetType - target type\n   * @returns {Array.<Array.<object|undefined>>} - #ast and #nodes\n   */\n  _collectNodes(targetType) {\n    const ast = this.#ast.values();\n    if (targetType === TARGET_ALL || targetType === TARGET_FIRST) {\n      const pendingItems = new Set();\n      let i = 0;\n      for (const { branch } of ast) {\n        const branchLen = branch.length;\n        const complex = branchLen > 1;\n        const firstTwig = branch[0];\n        let dir;\n        let twig;\n        if (complex) {\n          const {\n            combo: firstCombo,\n            leaves: [{\n              name: firstName,\n              type: firstType\n            }]\n          } = firstTwig;\n          const lastTwig = branch[branchLen - 1];\n          const {\n            leaves: [{\n              name: lastName,\n              type: lastType\n            }]\n          } = lastTwig;\n          if (lastType === PS_ELEMENT_SELECTOR ||\n              lastType === ID_SELECTOR) {\n            dir = DIR_PREV;\n            twig = lastTwig;\n          } else if (firstType === PS_ELEMENT_SELECTOR ||\n                     firstType === ID_SELECTOR) {\n            dir = DIR_NEXT;\n            twig = firstTwig;\n          } else if (targetType === TARGET_ALL) {\n            if (firstName === '*' && firstType === TYPE_SELECTOR) {\n              dir = DIR_PREV;\n              twig = lastTwig;\n            } else if (lastName === '*' && lastType === TYPE_SELECTOR) {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            } else if (branchLen === 2) {\n              const { name: comboName } = firstCombo;\n              if (/^[+~]$/.test(comboName)) {\n                dir = DIR_PREV;\n                twig = lastTwig;\n              } else {\n                dir = DIR_NEXT;\n                twig = firstTwig;\n              }\n            } else {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            }\n          } else if (lastName === '*' && lastType === TYPE_SELECTOR) {\n            dir = DIR_NEXT;\n            twig = firstTwig;\n          } else if (firstName === '*' && firstType === TYPE_SELECTOR) {\n            dir = DIR_PREV;\n            twig = lastTwig;\n          } else {\n            let bool;\n            for (const { combo, leaves: [leaf] } of branch) {\n              const { name: leafName, type: leafType } = leaf;\n              if (leafType === PS_CLASS_SELECTOR && leafName === 'dir') {\n                bool = false;\n                break;\n              }\n              if (!bool && combo) {\n                const { name: comboName } = combo;\n                if (/^[+~]$/.test(comboName)) {\n                  bool = true;\n                }\n              }\n            }\n            if (bool) {\n              dir = DIR_NEXT;\n              twig = firstTwig;\n            } else {\n              dir = DIR_PREV;\n              twig = lastTwig;\n            }\n          }\n        } else {\n          dir = DIR_PREV;\n          twig = firstTwig;\n        }\n        const {\n          collected, compound, filtered, nodes, pending\n        } = this._findEntryNodes(twig, targetType, complex);\n        if (nodes.length) {\n          this.#ast[i].find = true;\n          this.#nodes[i] = nodes;\n        } else if (pending) {\n          pendingItems.add(new Map([\n            ['index', i],\n            ['twig', twig]\n          ]));\n        }\n        this.#ast[i].collected = collected;\n        this.#ast[i].dir = dir;\n        this.#ast[i].filtered = filtered || !compound;\n        i++;\n      }\n      if (pendingItems.size) {\n        let node;\n        let walker;\n        if (this.#node !== this.#root && this.#node.nodeType === ELEMENT_NODE) {\n          node = this.#node;\n          walker = this.#qswalker;\n        } else {\n          node = this.#root;\n          walker = this.#walker;\n        }\n        let nextNode = traverseNode(node, walker);\n        while (nextNode) {\n          let bool = false;\n          if (this.#node.nodeType === ELEMENT_NODE) {\n            if (nextNode === this.#node) {\n              bool = true;\n            } else {\n              bool = this.#node.contains(nextNode);\n            }\n          } else {\n            bool = true;\n          }\n          if (bool) {\n            for (const pendingItem of pendingItems) {\n              const { leaves } = pendingItem.get('twig');\n              const matched = this._matchLeaves(leaves, nextNode, {\n                warn: this.#warn\n              });\n              if (matched) {\n                const index = pendingItem.get('index');\n                this.#ast[index].filtered = true;\n                this.#ast[index].find = true;\n                this.#nodes[index].push(nextNode);\n              }\n            }\n          }\n          if (nextNode !== walker.currentNode) {\n            nextNode = traverseNode(nextNode, walker);\n          }\n          nextNode = walker.nextNode();\n        }\n      }\n    } else {\n      let i = 0;\n      for (const { branch } of ast) {\n        const twig = branch[branch.length - 1];\n        const complex = branch.length > 1;\n        const {\n          compound, filtered, nodes\n        } = this._findEntryNodes(twig, targetType, complex);\n        if (nodes.length) {\n          this.#ast[i].find = true;\n          this.#nodes[i] = nodes;\n        }\n        this.#ast[i].dir = DIR_PREV;\n        this.#ast[i].filtered = filtered || !compound;\n        i++;\n      }\n    }\n    return [\n      this.#ast,\n      this.#nodes\n    ];\n  }\n\n  /**\n   * get combined nodes\n   * @private\n   * @param {object} twig - twig\n   * @param {object} nodes - collection of nodes\n   * @param {string} dir - direction\n   * @returns {Array.<object>} - collection of matched nodes\n   */\n  _getCombinedNodes(twig, nodes, dir) {\n    const arr = [];\n    for (const node of nodes) {\n      const matched = this._matchCombinator(twig, node, {\n        dir,\n        warn: this.#warn\n      });\n      if (matched.size) {\n        arr.push(...matched);\n      }\n    }\n    if (arr.length) {\n      return new Set(arr);\n    }\n    return new Set();\n  }\n\n  /**\n   * match node to next direction\n   * @private\n   * @param {Array} branch - branch\n   * @param {Set.<object>} nodes - collection of Element node\n   * @param {object} opt - option\n   * @param {object} opt.combo - combo\n   * @returns {?object} - matched node\n   */\n  _matchNodeNext(branch, nodes, opt) {\n    const { combo, index } = opt;\n    const { combo: nextCombo, leaves } = branch[index];\n    const twig = {\n      combo,\n      leaves\n    };\n    const nextNodes = this._getCombinedNodes(twig, nodes, DIR_NEXT);\n    let res;\n    if (nextNodes.size) {\n      if (index === branch.length - 1) {\n        const [nextNode] = sortNodes(nextNodes);\n        res = nextNode;\n      } else {\n        res = this._matchNodeNext(branch, nextNodes, {\n          combo: nextCombo,\n          index: index + 1\n        });\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * match node to previous direction\n   * @private\n   * @param {Array} branch - branch\n   * @param {object} node - Element node\n   * @param {object} opt - option\n   * @param {number} opt.index - index\n   * @returns {?object} - node\n   */\n  _matchNodePrev(branch, node, opt) {\n    const { index } = opt;\n    const twig = branch[index];\n    const nodes = new Set([node]);\n    const nextNodes = this._getCombinedNodes(twig, nodes, DIR_PREV);\n    let res;\n    if (nextNodes.size) {\n      if (index === 0) {\n        res = node;\n      } else {\n        for (const nextNode of nextNodes) {\n          const matched = this._matchNodePrev(branch, nextNode, {\n            index: index - 1\n          });\n          if (matched) {\n            return node;\n          }\n        }\n      }\n    }\n    return res ?? null;\n  }\n\n  /**\n   * find matched nodes\n   * @param {string} targetType - target type\n   * @returns {Set.<object>} - collection of matched nodes\n   */\n  find(targetType) {\n    if (targetType === TARGET_ALL || targetType === TARGET_FIRST) {\n      this._prepareQuerySelectorWalker();\n    }\n    const [[...branches], collectedNodes] = this._collectNodes(targetType);\n    const l = branches.length;\n    let sort;\n    let nodes = new Set();\n    for (let i = 0; i < l; i++) {\n      const { branch, collected, dir, find } = branches[i];\n      const branchLen = branch.length;\n      if (branchLen && find) {\n        const entryNodes = collectedNodes[i];\n        const entryNodesLen = entryNodes.length;\n        const lastIndex = branchLen - 1;\n        if (lastIndex === 0) {\n          if ((targetType === TARGET_ALL || targetType === TARGET_FIRST) &&\n              this.#node.nodeType === ELEMENT_NODE) {\n            for (let j = 0; j < entryNodesLen; j++) {\n              const node = entryNodes[j];\n              if (node !== this.#node && this.#node.contains(node)) {\n                nodes.add(node);\n                if (targetType !== TARGET_ALL) {\n                  break;\n                }\n              }\n            }\n          } else if (targetType === TARGET_ALL) {\n            if (nodes.size) {\n              const n = [...nodes];\n              nodes = new Set([...n, ...entryNodes]);\n              sort = true;\n            } else {\n              nodes = new Set(entryNodes);\n            }\n          } else {\n            const [node] = entryNodes;\n            nodes.add(node);\n          }\n        } else if (targetType === TARGET_ALL) {\n          if (dir === DIR_NEXT) {\n            let { combo } = branch[0];\n            for (const node of entryNodes) {\n              let nextNodes = new Set([node]);\n              for (let j = 1; j < branchLen; j++) {\n                const { combo: nextCombo, leaves } = branch[j];\n                const twig = {\n                  combo,\n                  leaves\n                };\n                nextNodes = this._getCombinedNodes(twig, nextNodes, dir);\n                if (nextNodes.size) {\n                  if (j === lastIndex) {\n                    if (nodes.size) {\n                      const n = [...nodes];\n                      nodes = new Set([...n, ...nextNodes]);\n                      sort = true;\n                    } else {\n                      nodes = nextNodes;\n                    }\n                  } else {\n                    combo = nextCombo;\n                  }\n                } else {\n                  break;\n                }\n              }\n            }\n          } else {\n            for (const node of entryNodes) {\n              let nextNodes = new Set([node]);\n              for (let j = lastIndex - 1; j >= 0; j--) {\n                const twig = branch[j];\n                nextNodes = this._getCombinedNodes(twig, nextNodes, dir);\n                if (nextNodes.size) {\n                  if (j === 0) {\n                    nodes.add(node);\n                    if (branchLen > 1 && nodes.size > 1) {\n                      sort = true;\n                    }\n                  }\n                } else {\n                  break;\n                }\n              }\n            }\n          }\n        } else if (targetType === TARGET_FIRST && dir === DIR_NEXT) {\n          const { combo: entryCombo } = branch[0];\n          let matched;\n          for (const node of entryNodes) {\n            matched = this._matchNodeNext(branch, new Set([node]), {\n              combo: entryCombo,\n              index: 1\n            });\n            if (matched) {\n              nodes.add(matched);\n              break;\n            }\n          }\n          if (!matched && !collected) {\n            const { leaves: entryLeaves } = branch[0];\n            const [entryNode] = entryNodes;\n            let refNode = this._findNode(entryLeaves, {\n              node: entryNode\n            });\n            while (refNode) {\n              matched = this._matchNodeNext(branch, new Set([refNode]), {\n                combo: entryCombo,\n                index: 1\n              });\n              if (matched) {\n                nodes.add(matched);\n                break;\n              }\n              refNode = this._findNode(entryLeaves, {\n                node: refNode\n              });\n            }\n          }\n        } else {\n          let matched;\n          for (const node of entryNodes) {\n            matched = this._matchNodePrev(branch, node, {\n              index: lastIndex - 1\n            });\n            if (matched) {\n              nodes.add(node);\n              break;\n            }\n          }\n          if (!matched && !collected && targetType === TARGET_FIRST) {\n            const { leaves: entryLeaves } = branch[lastIndex];\n            const [entryNode] = entryNodes;\n            let refNode = this._findNode(entryLeaves, {\n              node: entryNode\n            });\n            while (refNode) {\n              matched = this._matchNodePrev(branch, refNode, {\n                index: lastIndex - 1\n              });\n              if (matched) {\n                nodes.add(refNode);\n                break;\n              }\n              refNode = this._findNode(entryLeaves, {\n                node: refNode\n              });\n            }\n          }\n        }\n      }\n    }\n    if (targetType === TARGET_FIRST) {\n      nodes.delete(this.#node);\n      if (nodes.size > 1) {\n        nodes = new Set(sortNodes(nodes));\n      }\n    } else if (targetType === TARGET_ALL) {\n      nodes.delete(this.#node);\n      if (sort && nodes.size > 1) {\n        nodes = new Set(sortNodes(nodes));\n      }\n    }\n    return nodes;\n  }\n};\n"],
  "mappings": "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",
  "names": ["finder_exports", "__export", "Finder", "__toCommonJS", "import_matcher", "import_parser", "import_utility", "import_constant", "DIR_NEXT", "DIR_PREV", "KEY_TAB", "REG_ANCHOR", "REG_FORM_CTRL", "REG_FORM_VALID", "REG_INTERACT", "REG_SHADOW_HOST", "REG_TYPE_CHECK", "REG_TYPE_RANGE", "REG_TYPE_RESET", "REG_TYPE_SUBMIT", "REG_TYPE_TEXT", "#ast", "#astCache", "#descendant", "#document", "#documentCache", "#event", "#focus", "#invalidate", "#invalidateResults", "#matcher", "#node", "#nodes", "#noexcept", "#qswalker", "#results", "#root", "#shadow", "#verifyShadowHost", "#walker", "#walkers", "#warn", "#window", "window", "e", "opt", "selector", "node", "event", "noexcept", "warn", "func", "mouseKeys", "key", "evt", "keyboardKeys", "nodes", "ast", "cachedItem", "item", "l", "i", "cssAst", "branches", "info", "hasHasPseudoFunc", "hasLogicalPseudoFunc", "hasNthChildOfSelector", "invalidate", "descendant", "items", "branch", "leaves", "nextItem", "itemName", "walker", "anb", "a", "b", "reverse", "parentNode", "matched", "selectorBranches", "refNode", "selectorNodes", "bool", "nth", "j", "m", "localName", "namespaceURI", "prefix", "itemLocalName", "itemNamespaceURI", "itemPrefix", "nthName", "nthIdentName", "anbMap", "astLeaves", "leaf", "leafType", "combo", "twigLeaves", "itemType", "twig", "nextNode", "astData", "astName", "twigBranches", "isShadowRoot", "res", "forgive", "lastIndex", "nextNodes", "arr", "astChildren", "child", "nestedLeaf", "css", "leavesSet", "stateValue", "prop", "href", "origin", "pathname", "attrURL", "target", "type", "buttons", "hash", "id", "current", "eventTarget", "focusTarget", "relatedTarget", "parent", "placeholder", "targetNode", "nodeName", "checked", "form", "inputType", "node1", "node2", "host", "astType", "result", "cacheable", "compound", "filterLeaves", "baseNode", "leafName", "pending", "comboName", "dir", "matchedNode", "filtered", "complex", "targetType", "collected", "pendingItems", "branchLen", "firstTwig", "firstCombo", "firstName", "firstType", "lastTwig", "lastName", "lastType", "pendingItem", "index", "nextCombo", "collectedNodes", "sort", "find", "entryNodes", "entryNodesLen", "n", "entryCombo", "entryLeaves", "entryNode"]
}
